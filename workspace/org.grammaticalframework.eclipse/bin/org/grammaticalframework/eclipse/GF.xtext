/**
 * GF Eclipse Plugin
 * http://www.grammaticalframework.org/eclipse/
 * John J. Camilleri, 2012
 * 
 * The research leading to these results has received funding from the
 * European Union's Seventh Framework Programme (FP7/2007-2013) under
 * grant agreement no FP7-ICT-247914.
 */
 
/**
 * GF grammar based on Yacc grammar file src/compiler/GF/Grammar/Parser.y
 * Some (hopefully syntactically-equivalent) modifications have been made to please the compiler.
 * 
 * Note: Do not rely on the grammar in the GF book (Appendix C), it is known to contain errors!
 */
grammar org.grammaticalframework.eclipse.GF

hidden(WS, ML_COMMENT, SL_COMMENT, COMPILER_PRAGMA, GF_DOC)
	
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
	
generate gF "http://www.grammaticalframework.org/eclipse/GF"

SourceModule
	: ModDef
//	| ModHeader
;

ModDef returns SourceModule
	: (incomplete?='incomplete')? type=ModType '=' body=ModBody (';')*
;

//ModHeader returns SourceModule
//	: (incomplete?='incomplete')? type=ModType '=' body=ModHeaderBody
//;

// Cross-ref checking of module names is done by Validation, not via grammar
ModType
	: abstract?='abstract'		name=Ident
	| resource?='resource'		name=Ident
	| interface?='interface'	name=Ident
	| concrete?='concrete'		name=Ident 'of' abstractName=Ident
	| instance?='instance'		name=Ident 'of' interfaceInclude=Included
;

//ModHeaderBody returns ModBody :
//	extendList=ListIncluded
//	('**' functor=Included functorInstantiation?='with' instantiationList=ListInst)?
//	('**' modOpen=ModOpen)?
//|
//	functor=Included
//	functorInstantiation?='with' instantiationList=ListInst
//	('**' modOpen=ModOpen)?
//|
//	modOpen=ModOpen
//;
//
//ModOpen
//	: {ModOpen} ('open' openList=ListOpen)?
//;

ModBody :
	extendList=ListIncluded
	('**' functor=Included functorInstantiation?='with' instantiationList=ListInst)?
	('**' modContent=ModContent)?
|
	functor=Included
	functorInstantiation?='with' instantiationList=ListInst
	('**' modContent=ModContent)?
|
	modContent=ModContent
;

// combination of ModOpen & ModContent
ModContent
	: {ModContent} ('{' (judgements+=TopDef)* '}')?
	| 'open' openList=ListOpen ('in' '{' (judgements+=TopDef)* '}')? 
;

ListOpen
	: opens+=Open (',' opens+=Open)*
;

Open
	: name=Ident
	| '(' alias=Ident '=' name=Ident ')'
;

ListInst
	: instantiations+=Inst (',' instantiations+=Inst)*
;

Inst
	: '(' interface=Ident '=' name=Ident ')'
;

ListIncluded
	: included+=Included (',' included+=Included)*
;

Included 
	: name=Ident
	| name=Ident inclusive?=	'[' includes+=Ident (',' includes+=Ident)* ']'
	| name=Ident exclusive?='-' '[' excludes+=Ident (',' excludes+=Ident)* ']'
;

TopDef
	: cat?='cat'					(definitions+=CatDef ';')+
	| fun?='fun'					(definitions+=FunDef ';')+
	| def?='def'					(definitions+=DefDef ';')+
	| data?='data'					(definitions+=DataDef ';')+
	| param?='param'				(definitions+=ParamDef ';')+		
	| oper?='oper'					(definitions+=OperDef ';')+
	| lincat?='lincat'				(definitions+=TermDef ';')+
	| lindef?='lindef'				(definitions+=TermDef ';')+
	| lin?='lin'					(definitions+=LinDef ';')+
	| printname?='printname' 'cat'	(definitions+=TermDef ';')+
	| printname?='printname' 'fun'	(definitions+=TermDef ';')+
	| flags?='flags'				(definitions+=FlagDef ';')+
;

CatDef 
	:     		name=Ident context+=DDecl*
	| list?='[' name=Ident context+=DDecl* ']' ('{' size=Integer '}')?
;

FunDef 
	: name+=Ident (',' name+=Ident)* ':' type=Exp
;

DefDef 
	: name+=Name (',' name+=Name)*		'=' definition=Exp
	| name+=Name patternList=ListPatt	'=' definition=Exp
;

DataDef 
	: name+=Ident '=' constructors+=Ident ('|' constructors+=Ident)*
	| name+=Ident (',' name+=Ident)* ':' type=Exp
;

ParamDef 
	: name=Ident ('=' constructors+=ParConstr ('|' constructors+=ParConstr)* )?
;

// Modified to handle "overload" syntax
OperDef 
	: name+=Name (',' name+=Name)* ':' type=Exp	('=' ( definition=Exp | overload?='overload' '{' overloads+=DefDef (';' overloads+=DefDef )* ';'? '}'))?
	| name+=Name (',' name+=Name)*				 '=' ( definition=Exp | overload?='overload' '{' overloads+=DefDef (';' overloads+=DefDef )* ';'? '}')
	| name+=Name (args+=Arg)+					 '=' definition=Exp
;

LinDef
	: name+=Name (',' name+=Name)*	'=' definition=Exp
	| name+=Name (args+=Arg)+		'=' definition=Exp
;

TermDef
	: name+=Name (',' name+=Name)*	'=' definition=Exp
;

FlagDef 
	: name=Ident '=' (value=Ident | String)
;

ParConstr
	: name=Ident constructors+=DDecl*
;

Name
	:     name=Ident
	| '[' name=Ident ']'
;

LocDef 
	: name+=Ident (',' name+=Ident)* ':' type=Exp 	('=' value=Exp)?
	| name+=Ident (',' name+=Ident)*				 '=' value=Exp
;

ListLocDef
	: {ListLocDef} ( localDefinitions+=LocDef (';' localDefinitions+=LocDef)* ';'? )?
;

/*
Exp
  : Exp1 '|' Exp 
  | '\\'   ListBind '->' Exp
  | '\\\\' ListBind '=>' Exp
  | Decl '->' Exp
  | Exp3 '=>' Exp
  | 'let' '{' ListLocDef '}' 'in' Exp
  | 'let' ListLocDef 'in' Exp
  | Exp3 'where' '{' ListLocDef '}'
  | 'in' Exp5 String
  | Exp1   
*/
Exp 
	: ExpLF_Exp1or3
//	  Exp1 ({Exp.left=current} '|' right=Exp)?
	| '\\' bindList=ListBind '->' right=Exp
	| '\\\\' bindList=ListBind '=>' right=Exp
	| '(' bindList=ListBind ':' decl=Exp ')' '->' right=Exp // Decl, part 1
//	| Exp3 {Exp.left=current} right=ExpLF
	| 'let' '{' defList=ListLocDef '}' 'in' right=Exp
	| 'let'     defList=ListLocDef     'in' right=Exp
	| 'in' Exp5 String
;

ExpLF_Exp1or3 returns Exp
	: Exp3 (
		({ExpLF13.left=current} ('++'|'+') right=Exp3)* ({ExpLF13.left=current} '|' right=Exp)? // NOTE precedence of +/++ is lost here.
		| {ExpLF13.left=current} right=ExpLF_AfterExp3
	)
;

ExpLF_AfterExp3 returns Exp 
	: '->' Exp // Decl, part2 
	| '=>' Exp
	| 'where' '{' ListLocDef '}'
;

Exp1 returns Exp
	: Exp2 ({Exp1.left=current} '++' right=Exp2)*
;

Exp2 returns Exp
	: Exp3 ({Exp2.left=current} '+' right=Exp3)*
;

/*
Exp3
  : Exp3 '!' Exp4 
  | 'table' '{' ListCase '}'
  | 'table' Exp6 '{' ListCase '}'
  | 'table' Exp6 '[' ListExp ']'
  | Exp3 '*'  Exp4
  | Exp3 '**' Exp4
  | Exp4
*/
Exp3 returns Exp 
	: Exp3LF ({Exp3.left=current} ('!'|'*'|'**') right=Exp4)*
;
Exp3LF returns Exp 
	: 'table' '{' caseList=ListCase '}'
	| 'table' argType=Exp6 ( '{' caseList=ListCase '}' | '[' expList=ListExp ']' )
	| Exp4
;

/*
Exp4
  : Exp4 Exp5
  | Exp4 '{' Exp '}' 
  | 'case' Exp 'of' '{' ListCase '}'
  | 'variants' '{' ListExp '}'
  | 'pre' '{' ListCase '}'
  | 'pre' '{' String ';' ListAltern '}'
  | 'pre' '{' Ident ';' ListAltern '}'
  | 'strs' '{' ListExp '}'
  | '#' Patt3
  | 'pattern' Exp5
  | 'lincat' Ident Exp5
  | 'lin' Ident Exp5
  | Exp5
*/
Exp4 returns Exp 
	: Exp4LF ({Exp4.left=current} ( right=Exp5 | '{' right=Exp '}' ) )*
;
Exp4LF returns Exp 
	: 'case' caseOf=Exp 'of' '{' caseList=ListCase '}'
	| 'variants' '{' expList=ListExp '}'
	| 'pre' '{' caseList=ListCase '}'
	| 'pre' '{' String ';' alts+=Altern (';' alts+=Altern)* '}'
	| 'pre' '{' Ident  ';' alts+=Altern (';' alts+=Altern)* '}'
	| 'strs' '{' expList=ListExp '}'
	| '#' pattern=Patt3
	| 'pattern' pattern=Exp5
	| 'lincat' name=[Ident|ID] inner=Exp5
	| 'lin' name=[Ident|ID] inner=Exp5
	| Exp5
;

Exp5 returns Exp
	: Exp6 ('.' labels+=Label)*		// projection or qualification
;

/*
Exp6 
  : Ident 
  | Sort
  | String
  | Integer
  | Double
  | '?'
  | '[' ']'
  | '[' Ident Exps ']'
  | '[' String ']'
  | '{' ListLocDef '}'
  | '<' ListTupleComp '>'
  | '<' Exp ':' Exp '>'
  | LString
  | '(' Exp ')'
*/
Exp6 returns Exp 
	: name=[Ident|ID]		// constant or variable
	| sort?=Sort			// type of types/param types/strings/token lists
	| string?=String			// string literal
	| integer?=Integer		// integer literal
	| double?=Double			// floating point literal
	| meta?='?' 		// metavariable
	| emptyString?='[' ']'		// empty token list
	| listCat?='[' category=[Ident|ID] list=Exps ']'		// list category
	| tokenList?='[' String ']'						// token list
	| record?='{' defList=ListLocDef '}'				// record / record type
	| tuple?='<' (=> tupleList=ListTupleComp | v=Exp ':' type=Exp) '>'		// tuple | type-annotated expression
//  | LString
	| identity?='(' v=Exp ')'
;

ListExp
	: {ListExp} ( expressions+=Exp (';' expressions+=Exp)* ';'? )?
;

Exps
	: {Exps} expressions+=Exp6*
;

Patt
	: Patt1 ({Patt.left=current} (or?='|'|and?='+') right=Patt1)*
;

Patt1 returns Patt 
	: name=Ident value=ListPatt
	| name=Ident '.' label=Ident value=ListPatt
	| Patt3 '*'?
	| Patt2LF
//	| Patt2
;

// Left-factoring of `Patt1 -> Patt2` above and `Patt2 -> Patt3` below
Patt2 returns Patt
	: Patt2LF
	| Patt3
;

Patt2LF returns Patt 
	: name=Ident '@' value=Patt3
	| '-' Patt3
	| '~' Exp6
//	| Patt3
;

Patt3 returns Patt 
	: meta?='?'
	| tokenList?='[' String ']'
//	| '#' name=Ident
//	| '#' name=Ident '.' label=Ident
//	| name=Ident
//	| name=Ident '.' label=Ident
	| '#'? name=Ident ('.' label=Ident)?
	| wildcard?='_'
	| {Integer} Integer
	| {Double} Double
	| {String} String
	| '{' ListPattAss '}'
	| '<' ListPattTupleComp '>'
	| '(' Patt ')'
;

PattAss 
	: name+=Ident (',' name+=Ident)* '=' value=Patt
;

Label 
	: name=Ident
	| '$' index=Integer
;

Sort 
	: 'Type'
	| 'PType'
	| 'Tok'
	| 'Str'
	| 'Strs'
;

//BuiltInCat :
//	  'String'
//	| 'Int'
//	| 'Ints'
//	| 'Float'
//;

ListPattAss
	: {ListPattAss} ( assignments+=PattAss (';' assignments+=PattAss)* ';'? )?
;

ListPatt
	: patterns+=PattArg+
;

PattArg returns Patt
	:  Patt2
	| '{' Patt '}'
;

Arg 
	: name+=Ident
	| wildcard?='_'
	| '{' name+=Ident+ '}' // ListIdent2
;

Bind 
	: name+=Ident
	| wildcard?='_'
	| '{' name+=Ident (',' name+=Ident)* '}' // ListIdent
;

ListBind
	: bindings+=Bind (',' bindings+=Bind)*
;

//Decl :
//	  '(' bindings+=Bind (',' bindings+=Bind)* ':' e=Exp ')'
//	| e=Exp3
//;

ListTupleComp
	: {ListTupleComp} ( elements+=Exp (',' elements+=Exp)* ','? )?
;

ListPattTupleComp
	: {ListPattTupleComp} ( patterns+=Patt (',' patterns+=Patt)* ','? )?
;

Case
	: pattern=Patt '=>' right=Exp
;

ListCase
	: cases+=Case (';' cases+=Case)*
;

Altern
	: alt1=Exp '/' alt2=Exp
;

DDecl 
	: '(' bindList=ListBind ':' e=Exp ')'
	| Exp6
;

/*
 * Terminals, Comments
 * 
 * Based on (but modified from) those from org.eclipse.xtext.common.Terminals
 * Ref: http://www.eclipse.org/Xtext/documentation/2_0_0/020-grammar-language.php#grammarLanguage_6
 */
Ident : s=ID ; 
 
terminal ID : 
	('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'\'')*
//	('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'\'')*('.'('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'\'')*)?
;
terminal String : 
	  '"' ( '\\'('"'|'\\') | !('\\'|'"') )* '"'
; 
terminal Integer returns ecore::EInt: 
	('0'..'9')+
;
terminal Double returns ecore::EDouble :
	('0'..'9')+'.'('0'..'9')+('e''-'?('0'..'9')+)?
;
terminal COMPILER_PRAGMA :
	'--#' !('\n'|'\r')* ('\r'? '\n')?
;
terminal GF_DOC :
	('--%'|'--:') !('\n'|'\r')* ('\r'? '\n')?
;
terminal ML_COMMENT :
	'{-' -> '-}'
;
terminal SL_COMMENT : 
	'--' !('\n'|'\r')* ('\r'? '\n')?
;
terminal WS : 
	(' '|'\t'|'\r'|'\n')+
;
terminal ANY_OTHER : 
	.
;
