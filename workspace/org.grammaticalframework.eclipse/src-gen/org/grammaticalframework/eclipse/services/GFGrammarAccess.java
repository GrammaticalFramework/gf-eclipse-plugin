/*
* generated by Xtext
*/

package org.grammaticalframework.eclipse.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class GFGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncompleteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIncompleteIncompleteKeyword_0_0 = (Keyword)cIncompleteAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeModTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyModBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// *
		// * This grammar basically treats a single resource (file), which is why we start directly
		// * from ModDef and exclude the rules ListModDef, Grammar.
		//
		//Grammar :
		//	ListModDef
		//;
		//
		//ListModDef :
		//	{ListModDef} (modules+=ModDef)*
		//;
		// * / ModDef:
		//	incomplete?="incomplete"? type=ModType "=" body=ModBody ";"*;
		public ParserRule getRule() { return rule; }

		//incomplete?="incomplete"? type=ModType "=" body=ModBody ";"*
		public Group getGroup() { return cGroup; }

		//incomplete?="incomplete"?
		public Assignment getIncompleteAssignment_0() { return cIncompleteAssignment_0; }

		//"incomplete"
		public Keyword getIncompleteIncompleteKeyword_0_0() { return cIncompleteIncompleteKeyword_0_0; }

		//type=ModType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ModType
		public RuleCall getTypeModTypeParserRuleCall_1_0() { return cTypeModTypeParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//body=ModBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//ModBody
		public RuleCall getBodyModBodyParserRuleCall_3_0() { return cBodyModBodyParserRuleCall_3_0; }

		//";"*
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ModTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAbstractAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0_0 = (Keyword)cAbstractAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cResourceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cResourceResourceKeyword_1_0_0 = (Keyword)cResourceAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cInterfaceAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cInterfaceInterfaceKeyword_2_0_0 = (Keyword)cInterfaceAssignment_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cConcreteAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cConcreteConcreteKeyword_3_0_0 = (Keyword)cConcreteAssignment_3_0.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cOfKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cAbstractNameAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cAbstractNameIdentParserRuleCall_3_3_0 = (RuleCall)cAbstractNameAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cInstanceAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cInstanceInstanceKeyword_4_0_0 = (Keyword)cInstanceAssignment_4_0.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Keyword cOfKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cAbstractNameAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cAbstractNameIdentParserRuleCall_4_3_0 = (RuleCall)cAbstractNameAssignment_4_3.eContents().get(0);
		
		//// Cross-ref checking is done by Validation, not via grammar
		//ModType:
		//	abstract?="abstract" name=Ident | resource?="resource" name=Ident | interface?="interface" name=Ident |
		//	concrete?="concrete" name=Ident "of" abstractName=Ident | instance?="instance" name=Ident "of" abstractName=Ident;
		public ParserRule getRule() { return rule; }

		//abstract?="abstract" name=Ident | resource?="resource" name=Ident | interface?="interface" name=Ident |
		//concrete?="concrete" name=Ident "of" abstractName=Ident | instance?="instance" name=Ident "of" abstractName=Ident
		public Alternatives getAlternatives() { return cAlternatives; }

		//abstract?="abstract" name=Ident
		public Group getGroup_0() { return cGroup_0; }

		//abstract?="abstract"
		public Assignment getAbstractAssignment_0_0() { return cAbstractAssignment_0_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0_0() { return cAbstractAbstractKeyword_0_0_0; }

		//name=Ident
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_1_0() { return cNameIdentParserRuleCall_0_1_0; }

		//resource?="resource" name=Ident
		public Group getGroup_1() { return cGroup_1; }

		//resource?="resource"
		public Assignment getResourceAssignment_1_0() { return cResourceAssignment_1_0; }

		//"resource"
		public Keyword getResourceResourceKeyword_1_0_0() { return cResourceResourceKeyword_1_0_0; }

		//name=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//interface?="interface" name=Ident
		public Group getGroup_2() { return cGroup_2; }

		//interface?="interface"
		public Assignment getInterfaceAssignment_2_0() { return cInterfaceAssignment_2_0; }

		//"interface"
		public Keyword getInterfaceInterfaceKeyword_2_0_0() { return cInterfaceInterfaceKeyword_2_0_0; }

		//name=Ident
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_1_0() { return cNameIdentParserRuleCall_2_1_0; }

		//concrete?="concrete" name=Ident "of" abstractName=Ident
		public Group getGroup_3() { return cGroup_3; }

		//concrete?="concrete"
		public Assignment getConcreteAssignment_3_0() { return cConcreteAssignment_3_0; }

		//"concrete"
		public Keyword getConcreteConcreteKeyword_3_0_0() { return cConcreteConcreteKeyword_3_0_0; }

		//name=Ident
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_3_1_0() { return cNameIdentParserRuleCall_3_1_0; }

		//"of"
		public Keyword getOfKeyword_3_2() { return cOfKeyword_3_2; }

		//abstractName=Ident
		public Assignment getAbstractNameAssignment_3_3() { return cAbstractNameAssignment_3_3; }

		//Ident
		public RuleCall getAbstractNameIdentParserRuleCall_3_3_0() { return cAbstractNameIdentParserRuleCall_3_3_0; }

		//instance?="instance" name=Ident "of" abstractName=Ident
		public Group getGroup_4() { return cGroup_4; }

		//instance?="instance"
		public Assignment getInstanceAssignment_4_0() { return cInstanceAssignment_4_0; }

		//"instance"
		public Keyword getInstanceInstanceKeyword_4_0_0() { return cInstanceInstanceKeyword_4_0_0; }

		//name=Ident
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_4_1_0() { return cNameIdentParserRuleCall_4_1_0; }

		//"of"
		public Keyword getOfKeyword_4_2() { return cOfKeyword_4_2; }

		//abstractName=Ident
		public Assignment getAbstractNameAssignment_4_3() { return cAbstractNameAssignment_4_3; }

		//Ident
		public RuleCall getAbstractNameIdentParserRuleCall_4_3_0() { return cAbstractNameIdentParserRuleCall_4_3_0; }
	}

	public class ModBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cModBodyAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cGroup_0_1.eContents().get(0);
		private final Assignment cExtendsAssignment_0_1_0_0 = (Assignment)cGroup_0_1_0.eContents().get(0);
		private final RuleCall cExtendsIncludedParserRuleCall_0_1_0_0_0 = (RuleCall)cExtendsAssignment_0_1_0_0.eContents().get(0);
		private final Group cGroup_0_1_0_1 = (Group)cGroup_0_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0_1_0 = (Keyword)cGroup_0_1_0_1.eContents().get(0);
		private final Assignment cExtendsAssignment_0_1_0_1_1 = (Assignment)cGroup_0_1_0_1.eContents().get(1);
		private final RuleCall cExtendsIncludedParserRuleCall_0_1_0_1_1_0 = (RuleCall)cExtendsAssignment_0_1_0_1_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cOpenKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Assignment cOpensAssignment_0_2_1_0 = (Assignment)cGroup_0_2_1.eContents().get(0);
		private final RuleCall cOpensOpenParserRuleCall_0_2_1_0_0 = (RuleCall)cOpensAssignment_0_2_1_0.eContents().get(0);
		private final Group cGroup_0_2_1_1 = (Group)cGroup_0_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_2_1_1_0 = (Keyword)cGroup_0_2_1_1.eContents().get(0);
		private final Assignment cOpensAssignment_0_2_1_1_1 = (Assignment)cGroup_0_2_1_1.eContents().get(1);
		private final RuleCall cOpensOpenParserRuleCall_0_2_1_1_1_0 = (RuleCall)cOpensAssignment_0_2_1_1_1.eContents().get(0);
		private final Keyword cInKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cJudgementsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cJudgementsTopDefParserRuleCall_0_4_0 = (RuleCall)cJudgementsAssignment_0_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cModBodyAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cExtendsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExtendsIncludedParserRuleCall_1_1_0_0 = (RuleCall)cExtendsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cExtendsIncludedParserRuleCall_1_1_1_1_0 = (RuleCall)cExtendsAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cModBodyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cFunctorAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFunctorIncludedParserRuleCall_2_1_0 = (RuleCall)cFunctorAssignment_2_1.eContents().get(0);
		private final Assignment cFunctorInstantiationAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Keyword cFunctorInstantiationWithKeyword_2_2_0 = (Keyword)cFunctorInstantiationAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cInstantiationsAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cInstantiationsOpenParserRuleCall_2_3_0_0 = (RuleCall)cInstantiationsAssignment_2_3_0.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Keyword cCommaKeyword_2_3_1_0 = (Keyword)cGroup_2_3_1.eContents().get(0);
		private final Assignment cInstantiationsAssignment_2_3_1_1 = (Assignment)cGroup_2_3_1.eContents().get(1);
		private final RuleCall cInstantiationsOpenParserRuleCall_2_3_1_1_0 = (RuleCall)cInstantiationsAssignment_2_3_1_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cModBodyAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cFunctorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFunctorIncludedParserRuleCall_3_1_0 = (RuleCall)cFunctorAssignment_3_1.eContents().get(0);
		private final Assignment cFunctorInstantiationAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final Keyword cFunctorInstantiationWithKeyword_3_2_0 = (Keyword)cFunctorInstantiationAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Assignment cInstantiationsAssignment_3_3_0 = (Assignment)cGroup_3_3.eContents().get(0);
		private final RuleCall cInstantiationsOpenParserRuleCall_3_3_0_0 = (RuleCall)cInstantiationsAssignment_3_3_0.eContents().get(0);
		private final Group cGroup_3_3_1 = (Group)cGroup_3_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_3_1_0 = (Keyword)cGroup_3_3_1.eContents().get(0);
		private final Assignment cInstantiationsAssignment_3_3_1_1 = (Assignment)cGroup_3_3_1.eContents().get(1);
		private final RuleCall cInstantiationsOpenParserRuleCall_3_3_1_1_0 = (RuleCall)cInstantiationsAssignment_3_3_1_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_3_5 = (Group)cGroup_3.eContents().get(5);
		private final Keyword cOpenKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Group cGroup_3_5_1 = (Group)cGroup_3_5.eContents().get(1);
		private final Assignment cOpensAssignment_3_5_1_0 = (Assignment)cGroup_3_5_1.eContents().get(0);
		private final RuleCall cOpensOpenParserRuleCall_3_5_1_0_0 = (RuleCall)cOpensAssignment_3_5_1_0.eContents().get(0);
		private final Group cGroup_3_5_1_1 = (Group)cGroup_3_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_5_1_1_0 = (Keyword)cGroup_3_5_1_1.eContents().get(0);
		private final Assignment cOpensAssignment_3_5_1_1_1 = (Assignment)cGroup_3_5_1_1.eContents().get(1);
		private final RuleCall cOpensOpenParserRuleCall_3_5_1_1_1_0 = (RuleCall)cOpensAssignment_3_5_1_1_1.eContents().get(0);
		private final Keyword cInKeyword_3_5_2 = (Keyword)cGroup_3_5.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cJudgementsAssignment_3_7 = (Assignment)cGroup_3.eContents().get(7);
		private final RuleCall cJudgementsTopDefParserRuleCall_3_7_0 = (RuleCall)cJudgementsAssignment_3_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cModBodyAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cExtendsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cExtendsIncludedParserRuleCall_4_1_0_0 = (RuleCall)cExtendsAssignment_4_1_0.eContents().get(0);
		private final Group cGroup_4_1_1 = (Group)cGroup_4_1.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_1_0 = (Keyword)cGroup_4_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_4_1_1_1 = (Assignment)cGroup_4_1_1.eContents().get(1);
		private final RuleCall cExtendsIncludedParserRuleCall_4_1_1_1_0 = (RuleCall)cExtendsAssignment_4_1_1_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cFunctorAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cFunctorIncludedParserRuleCall_4_3_0 = (RuleCall)cFunctorAssignment_4_3.eContents().get(0);
		private final Assignment cFunctorInstantiationAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final Keyword cFunctorInstantiationWithKeyword_4_4_0 = (Keyword)cFunctorInstantiationAssignment_4_4.eContents().get(0);
		private final Group cGroup_4_5 = (Group)cGroup_4.eContents().get(5);
		private final Assignment cInstantiationsAssignment_4_5_0 = (Assignment)cGroup_4_5.eContents().get(0);
		private final RuleCall cInstantiationsOpenParserRuleCall_4_5_0_0 = (RuleCall)cInstantiationsAssignment_4_5_0.eContents().get(0);
		private final Group cGroup_4_5_1 = (Group)cGroup_4_5.eContents().get(1);
		private final Keyword cCommaKeyword_4_5_1_0 = (Keyword)cGroup_4_5_1.eContents().get(0);
		private final Assignment cInstantiationsAssignment_4_5_1_1 = (Assignment)cGroup_4_5_1.eContents().get(1);
		private final RuleCall cInstantiationsOpenParserRuleCall_4_5_1_1_0 = (RuleCall)cInstantiationsAssignment_4_5_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cModBodyAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cExtendsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cExtendsIncludedParserRuleCall_5_1_0_0 = (RuleCall)cExtendsAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cExtendsAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cExtendsIncludedParserRuleCall_5_1_1_1_0 = (RuleCall)cExtendsAssignment_5_1_1_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cFunctorAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cFunctorIncludedParserRuleCall_5_3_0 = (RuleCall)cFunctorAssignment_5_3.eContents().get(0);
		private final Assignment cFunctorInstantiationAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final Keyword cFunctorInstantiationWithKeyword_5_4_0 = (Keyword)cFunctorInstantiationAssignment_5_4.eContents().get(0);
		private final Group cGroup_5_5 = (Group)cGroup_5.eContents().get(5);
		private final Assignment cInstantiationsAssignment_5_5_0 = (Assignment)cGroup_5_5.eContents().get(0);
		private final RuleCall cInstantiationsOpenParserRuleCall_5_5_0_0 = (RuleCall)cInstantiationsAssignment_5_5_0.eContents().get(0);
		private final Group cGroup_5_5_1 = (Group)cGroup_5_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_5_1_0 = (Keyword)cGroup_5_5_1.eContents().get(0);
		private final Assignment cInstantiationsAssignment_5_5_1_1 = (Assignment)cGroup_5_5_1.eContents().get(1);
		private final RuleCall cInstantiationsOpenParserRuleCall_5_5_1_1_0 = (RuleCall)cInstantiationsAssignment_5_5_1_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Group cGroup_5_7 = (Group)cGroup_5.eContents().get(7);
		private final Keyword cOpenKeyword_5_7_0 = (Keyword)cGroup_5_7.eContents().get(0);
		private final Group cGroup_5_7_1 = (Group)cGroup_5_7.eContents().get(1);
		private final Assignment cOpensAssignment_5_7_1_0 = (Assignment)cGroup_5_7_1.eContents().get(0);
		private final RuleCall cOpensOpenParserRuleCall_5_7_1_0_0 = (RuleCall)cOpensAssignment_5_7_1_0.eContents().get(0);
		private final Group cGroup_5_7_1_1 = (Group)cGroup_5_7_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_7_1_1_0 = (Keyword)cGroup_5_7_1_1.eContents().get(0);
		private final Assignment cOpensAssignment_5_7_1_1_1 = (Assignment)cGroup_5_7_1_1.eContents().get(1);
		private final RuleCall cOpensOpenParserRuleCall_5_7_1_1_1_0 = (RuleCall)cOpensAssignment_5_7_1_1_1.eContents().get(0);
		private final Keyword cInKeyword_5_7_2 = (Keyword)cGroup_5_7.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_5_8 = (Keyword)cGroup_5.eContents().get(8);
		private final Assignment cJudgementsAssignment_5_9 = (Assignment)cGroup_5.eContents().get(9);
		private final RuleCall cJudgementsTopDefParserRuleCall_5_9_0 = (RuleCall)cJudgementsAssignment_5_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_10 = (Keyword)cGroup_5.eContents().get(10);
		
		//ModBody:
		//	{ModBody} ((extends+=Included ("," extends+=Included)*)? "**")? ("open" (opens+=Open ("," opens+=Open)*)? "in")? "{"
		//	judgements+=TopDef* "}" | {ModBody} (extends+=Included ("," extends+=Included)*)? | {ModBody} functor=Included
		//	functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)? | {ModBody} functor=Included
		//	functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)? "**" ("open" (opens+=Open (","
		//	opens+=Open)*)? "in")? "{" judgements+=TopDef* "}" | {ModBody} (extends+=Included ("," extends+=Included)*)? "**"
		//	functor=Included functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)? | {ModBody}
		//	(extends+=Included ("," extends+=Included)*)? "**" functor=Included functorInstantiation?="with" (instantiations+=Open
		//	("," instantiations+=Open)*)? "**" ("open" (opens+=Open ("," opens+=Open)*)? "in")? "{" judgements+=TopDef* "}";
		public ParserRule getRule() { return rule; }

		//{ModBody} ((extends+=Included ("," extends+=Included)*)? "**")? ("open" (opens+=Open ("," opens+=Open)*)? "in")? "{"
		//judgements+=TopDef* "}" | {ModBody} (extends+=Included ("," extends+=Included)*)? | {ModBody} functor=Included
		//functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)? | {ModBody} functor=Included
		//functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)? "**" ("open" (opens+=Open (","
		//opens+=Open)*)? "in")? "{" judgements+=TopDef* "}" | {ModBody} (extends+=Included ("," extends+=Included)*)? "**"
		//functor=Included functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)? | {ModBody}
		//(extends+=Included ("," extends+=Included)*)? "**" functor=Included functorInstantiation?="with" (instantiations+=Open
		//("," instantiations+=Open)*)? "**" ("open" (opens+=Open ("," opens+=Open)*)? "in")? "{" judgements+=TopDef* "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ModBody} ((extends+=Included ("," extends+=Included)*)? "**")? ("open" (opens+=Open ("," opens+=Open)*)? "in")? "{"
		//judgements+=TopDef* "}"
		public Group getGroup_0() { return cGroup_0; }

		//{ModBody}
		public Action getModBodyAction_0_0() { return cModBodyAction_0_0; }

		//((extends+=Included ("," extends+=Included)*)? "**")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//(extends+=Included ("," extends+=Included)*)?
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//extends+=Included
		public Assignment getExtendsAssignment_0_1_0_0() { return cExtendsAssignment_0_1_0_0; }

		//Included
		public RuleCall getExtendsIncludedParserRuleCall_0_1_0_0_0() { return cExtendsIncludedParserRuleCall_0_1_0_0_0; }

		//("," extends+=Included)*
		public Group getGroup_0_1_0_1() { return cGroup_0_1_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0_1_0() { return cCommaKeyword_0_1_0_1_0; }

		//extends+=Included
		public Assignment getExtendsAssignment_0_1_0_1_1() { return cExtendsAssignment_0_1_0_1_1; }

		//Included
		public RuleCall getExtendsIncludedParserRuleCall_0_1_0_1_1_0() { return cExtendsIncludedParserRuleCall_0_1_0_1_1_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_0_1_1() { return cAsteriskAsteriskKeyword_0_1_1; }

		//("open" (opens+=Open ("," opens+=Open)*)? "in")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"open"
		public Keyword getOpenKeyword_0_2_0() { return cOpenKeyword_0_2_0; }

		//(opens+=Open ("," opens+=Open)*)?
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//opens+=Open
		public Assignment getOpensAssignment_0_2_1_0() { return cOpensAssignment_0_2_1_0; }

		//Open
		public RuleCall getOpensOpenParserRuleCall_0_2_1_0_0() { return cOpensOpenParserRuleCall_0_2_1_0_0; }

		//("," opens+=Open)*
		public Group getGroup_0_2_1_1() { return cGroup_0_2_1_1; }

		//","
		public Keyword getCommaKeyword_0_2_1_1_0() { return cCommaKeyword_0_2_1_1_0; }

		//opens+=Open
		public Assignment getOpensAssignment_0_2_1_1_1() { return cOpensAssignment_0_2_1_1_1; }

		//Open
		public RuleCall getOpensOpenParserRuleCall_0_2_1_1_1_0() { return cOpensOpenParserRuleCall_0_2_1_1_1_0; }

		//"in"
		public Keyword getInKeyword_0_2_2() { return cInKeyword_0_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }

		//judgements+=TopDef*
		public Assignment getJudgementsAssignment_0_4() { return cJudgementsAssignment_0_4; }

		//TopDef
		public RuleCall getJudgementsTopDefParserRuleCall_0_4_0() { return cJudgementsTopDefParserRuleCall_0_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_5() { return cRightCurlyBracketKeyword_0_5; }

		//{ModBody} (extends+=Included ("," extends+=Included)*)?
		public Group getGroup_1() { return cGroup_1; }

		//{ModBody}
		public Action getModBodyAction_1_0() { return cModBodyAction_1_0; }

		//(extends+=Included ("," extends+=Included)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//extends+=Included
		public Assignment getExtendsAssignment_1_1_0() { return cExtendsAssignment_1_1_0; }

		//Included
		public RuleCall getExtendsIncludedParserRuleCall_1_1_0_0() { return cExtendsIncludedParserRuleCall_1_1_0_0; }

		//("," extends+=Included)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//extends+=Included
		public Assignment getExtendsAssignment_1_1_1_1() { return cExtendsAssignment_1_1_1_1; }

		//Included
		public RuleCall getExtendsIncludedParserRuleCall_1_1_1_1_0() { return cExtendsIncludedParserRuleCall_1_1_1_1_0; }

		//{ModBody} functor=Included functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)?
		public Group getGroup_2() { return cGroup_2; }

		//{ModBody}
		public Action getModBodyAction_2_0() { return cModBodyAction_2_0; }

		//functor=Included
		public Assignment getFunctorAssignment_2_1() { return cFunctorAssignment_2_1; }

		//Included
		public RuleCall getFunctorIncludedParserRuleCall_2_1_0() { return cFunctorIncludedParserRuleCall_2_1_0; }

		//functorInstantiation?="with"
		public Assignment getFunctorInstantiationAssignment_2_2() { return cFunctorInstantiationAssignment_2_2; }

		//"with"
		public Keyword getFunctorInstantiationWithKeyword_2_2_0() { return cFunctorInstantiationWithKeyword_2_2_0; }

		//(instantiations+=Open ("," instantiations+=Open)*)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//instantiations+=Open
		public Assignment getInstantiationsAssignment_2_3_0() { return cInstantiationsAssignment_2_3_0; }

		//Open
		public RuleCall getInstantiationsOpenParserRuleCall_2_3_0_0() { return cInstantiationsOpenParserRuleCall_2_3_0_0; }

		//("," instantiations+=Open)*
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//","
		public Keyword getCommaKeyword_2_3_1_0() { return cCommaKeyword_2_3_1_0; }

		//instantiations+=Open
		public Assignment getInstantiationsAssignment_2_3_1_1() { return cInstantiationsAssignment_2_3_1_1; }

		//Open
		public RuleCall getInstantiationsOpenParserRuleCall_2_3_1_1_0() { return cInstantiationsOpenParserRuleCall_2_3_1_1_0; }

		//{ModBody} functor=Included functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)? "**" ("open"
		//(opens+=Open ("," opens+=Open)*)? "in")? "{" judgements+=TopDef* "}"
		public Group getGroup_3() { return cGroup_3; }

		//{ModBody}
		public Action getModBodyAction_3_0() { return cModBodyAction_3_0; }

		//functor=Included
		public Assignment getFunctorAssignment_3_1() { return cFunctorAssignment_3_1; }

		//Included
		public RuleCall getFunctorIncludedParserRuleCall_3_1_0() { return cFunctorIncludedParserRuleCall_3_1_0; }

		//functorInstantiation?="with"
		public Assignment getFunctorInstantiationAssignment_3_2() { return cFunctorInstantiationAssignment_3_2; }

		//"with"
		public Keyword getFunctorInstantiationWithKeyword_3_2_0() { return cFunctorInstantiationWithKeyword_3_2_0; }

		//(instantiations+=Open ("," instantiations+=Open)*)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//instantiations+=Open
		public Assignment getInstantiationsAssignment_3_3_0() { return cInstantiationsAssignment_3_3_0; }

		//Open
		public RuleCall getInstantiationsOpenParserRuleCall_3_3_0_0() { return cInstantiationsOpenParserRuleCall_3_3_0_0; }

		//("," instantiations+=Open)*
		public Group getGroup_3_3_1() { return cGroup_3_3_1; }

		//","
		public Keyword getCommaKeyword_3_3_1_0() { return cCommaKeyword_3_3_1_0; }

		//instantiations+=Open
		public Assignment getInstantiationsAssignment_3_3_1_1() { return cInstantiationsAssignment_3_3_1_1; }

		//Open
		public RuleCall getInstantiationsOpenParserRuleCall_3_3_1_1_0() { return cInstantiationsOpenParserRuleCall_3_3_1_1_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_3_4() { return cAsteriskAsteriskKeyword_3_4; }

		//("open" (opens+=Open ("," opens+=Open)*)? "in")?
		public Group getGroup_3_5() { return cGroup_3_5; }

		//"open"
		public Keyword getOpenKeyword_3_5_0() { return cOpenKeyword_3_5_0; }

		//(opens+=Open ("," opens+=Open)*)?
		public Group getGroup_3_5_1() { return cGroup_3_5_1; }

		//opens+=Open
		public Assignment getOpensAssignment_3_5_1_0() { return cOpensAssignment_3_5_1_0; }

		//Open
		public RuleCall getOpensOpenParserRuleCall_3_5_1_0_0() { return cOpensOpenParserRuleCall_3_5_1_0_0; }

		//("," opens+=Open)*
		public Group getGroup_3_5_1_1() { return cGroup_3_5_1_1; }

		//","
		public Keyword getCommaKeyword_3_5_1_1_0() { return cCommaKeyword_3_5_1_1_0; }

		//opens+=Open
		public Assignment getOpensAssignment_3_5_1_1_1() { return cOpensAssignment_3_5_1_1_1; }

		//Open
		public RuleCall getOpensOpenParserRuleCall_3_5_1_1_1_0() { return cOpensOpenParserRuleCall_3_5_1_1_1_0; }

		//"in"
		public Keyword getInKeyword_3_5_2() { return cInKeyword_3_5_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_6() { return cLeftCurlyBracketKeyword_3_6; }

		//judgements+=TopDef*
		public Assignment getJudgementsAssignment_3_7() { return cJudgementsAssignment_3_7; }

		//TopDef
		public RuleCall getJudgementsTopDefParserRuleCall_3_7_0() { return cJudgementsTopDefParserRuleCall_3_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_8() { return cRightCurlyBracketKeyword_3_8; }

		//{ModBody} (extends+=Included ("," extends+=Included)*)? "**" functor=Included functorInstantiation?="with"
		//(instantiations+=Open ("," instantiations+=Open)*)?
		public Group getGroup_4() { return cGroup_4; }

		//{ModBody}
		public Action getModBodyAction_4_0() { return cModBodyAction_4_0; }

		//(extends+=Included ("," extends+=Included)*)?
		public Group getGroup_4_1() { return cGroup_4_1; }

		//extends+=Included
		public Assignment getExtendsAssignment_4_1_0() { return cExtendsAssignment_4_1_0; }

		//Included
		public RuleCall getExtendsIncludedParserRuleCall_4_1_0_0() { return cExtendsIncludedParserRuleCall_4_1_0_0; }

		//("," extends+=Included)*
		public Group getGroup_4_1_1() { return cGroup_4_1_1; }

		//","
		public Keyword getCommaKeyword_4_1_1_0() { return cCommaKeyword_4_1_1_0; }

		//extends+=Included
		public Assignment getExtendsAssignment_4_1_1_1() { return cExtendsAssignment_4_1_1_1; }

		//Included
		public RuleCall getExtendsIncludedParserRuleCall_4_1_1_1_0() { return cExtendsIncludedParserRuleCall_4_1_1_1_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_4_2() { return cAsteriskAsteriskKeyword_4_2; }

		//functor=Included
		public Assignment getFunctorAssignment_4_3() { return cFunctorAssignment_4_3; }

		//Included
		public RuleCall getFunctorIncludedParserRuleCall_4_3_0() { return cFunctorIncludedParserRuleCall_4_3_0; }

		//functorInstantiation?="with"
		public Assignment getFunctorInstantiationAssignment_4_4() { return cFunctorInstantiationAssignment_4_4; }

		//"with"
		public Keyword getFunctorInstantiationWithKeyword_4_4_0() { return cFunctorInstantiationWithKeyword_4_4_0; }

		//(instantiations+=Open ("," instantiations+=Open)*)?
		public Group getGroup_4_5() { return cGroup_4_5; }

		//instantiations+=Open
		public Assignment getInstantiationsAssignment_4_5_0() { return cInstantiationsAssignment_4_5_0; }

		//Open
		public RuleCall getInstantiationsOpenParserRuleCall_4_5_0_0() { return cInstantiationsOpenParserRuleCall_4_5_0_0; }

		//("," instantiations+=Open)*
		public Group getGroup_4_5_1() { return cGroup_4_5_1; }

		//","
		public Keyword getCommaKeyword_4_5_1_0() { return cCommaKeyword_4_5_1_0; }

		//instantiations+=Open
		public Assignment getInstantiationsAssignment_4_5_1_1() { return cInstantiationsAssignment_4_5_1_1; }

		//Open
		public RuleCall getInstantiationsOpenParserRuleCall_4_5_1_1_0() { return cInstantiationsOpenParserRuleCall_4_5_1_1_0; }

		//{ModBody} (extends+=Included ("," extends+=Included)*)? "**" functor=Included functorInstantiation?="with"
		//(instantiations+=Open ("," instantiations+=Open)*)? "**" ("open" (opens+=Open ("," opens+=Open)*)? "in")? "{"
		//judgements+=TopDef* "}"
		public Group getGroup_5() { return cGroup_5; }

		//{ModBody}
		public Action getModBodyAction_5_0() { return cModBodyAction_5_0; }

		//(extends+=Included ("," extends+=Included)*)?
		public Group getGroup_5_1() { return cGroup_5_1; }

		//extends+=Included
		public Assignment getExtendsAssignment_5_1_0() { return cExtendsAssignment_5_1_0; }

		//Included
		public RuleCall getExtendsIncludedParserRuleCall_5_1_0_0() { return cExtendsIncludedParserRuleCall_5_1_0_0; }

		//("," extends+=Included)*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//","
		public Keyword getCommaKeyword_5_1_1_0() { return cCommaKeyword_5_1_1_0; }

		//extends+=Included
		public Assignment getExtendsAssignment_5_1_1_1() { return cExtendsAssignment_5_1_1_1; }

		//Included
		public RuleCall getExtendsIncludedParserRuleCall_5_1_1_1_0() { return cExtendsIncludedParserRuleCall_5_1_1_1_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_5_2() { return cAsteriskAsteriskKeyword_5_2; }

		//functor=Included
		public Assignment getFunctorAssignment_5_3() { return cFunctorAssignment_5_3; }

		//Included
		public RuleCall getFunctorIncludedParserRuleCall_5_3_0() { return cFunctorIncludedParserRuleCall_5_3_0; }

		//functorInstantiation?="with"
		public Assignment getFunctorInstantiationAssignment_5_4() { return cFunctorInstantiationAssignment_5_4; }

		//"with"
		public Keyword getFunctorInstantiationWithKeyword_5_4_0() { return cFunctorInstantiationWithKeyword_5_4_0; }

		//(instantiations+=Open ("," instantiations+=Open)*)?
		public Group getGroup_5_5() { return cGroup_5_5; }

		//instantiations+=Open
		public Assignment getInstantiationsAssignment_5_5_0() { return cInstantiationsAssignment_5_5_0; }

		//Open
		public RuleCall getInstantiationsOpenParserRuleCall_5_5_0_0() { return cInstantiationsOpenParserRuleCall_5_5_0_0; }

		//("," instantiations+=Open)*
		public Group getGroup_5_5_1() { return cGroup_5_5_1; }

		//","
		public Keyword getCommaKeyword_5_5_1_0() { return cCommaKeyword_5_5_1_0; }

		//instantiations+=Open
		public Assignment getInstantiationsAssignment_5_5_1_1() { return cInstantiationsAssignment_5_5_1_1; }

		//Open
		public RuleCall getInstantiationsOpenParserRuleCall_5_5_1_1_0() { return cInstantiationsOpenParserRuleCall_5_5_1_1_0; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_5_6() { return cAsteriskAsteriskKeyword_5_6; }

		//("open" (opens+=Open ("," opens+=Open)*)? "in")?
		public Group getGroup_5_7() { return cGroup_5_7; }

		//"open"
		public Keyword getOpenKeyword_5_7_0() { return cOpenKeyword_5_7_0; }

		//(opens+=Open ("," opens+=Open)*)?
		public Group getGroup_5_7_1() { return cGroup_5_7_1; }

		//opens+=Open
		public Assignment getOpensAssignment_5_7_1_0() { return cOpensAssignment_5_7_1_0; }

		//Open
		public RuleCall getOpensOpenParserRuleCall_5_7_1_0_0() { return cOpensOpenParserRuleCall_5_7_1_0_0; }

		//("," opens+=Open)*
		public Group getGroup_5_7_1_1() { return cGroup_5_7_1_1; }

		//","
		public Keyword getCommaKeyword_5_7_1_1_0() { return cCommaKeyword_5_7_1_1_0; }

		//opens+=Open
		public Assignment getOpensAssignment_5_7_1_1_1() { return cOpensAssignment_5_7_1_1_1; }

		//Open
		public RuleCall getOpensOpenParserRuleCall_5_7_1_1_1_0() { return cOpensOpenParserRuleCall_5_7_1_1_1_0; }

		//"in"
		public Keyword getInKeyword_5_7_2() { return cInKeyword_5_7_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_8() { return cLeftCurlyBracketKeyword_5_8; }

		//judgements+=TopDef*
		public Assignment getJudgementsAssignment_5_9() { return cJudgementsAssignment_5_9; }

		//TopDef
		public RuleCall getJudgementsTopDefParserRuleCall_5_9_0() { return cJudgementsTopDefParserRuleCall_5_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_10() { return cRightCurlyBracketKeyword_5_10; }
	}

	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Open");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cAliasAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAliasIdentParserRuleCall_2_1_0 = (RuleCall)cAliasAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNameIdentParserRuleCall_2_3_0 = (RuleCall)cNameAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		
		//Open:
		//	name=Ident | "(" name=Ident ")" | "(" alias=Ident "=" name=Ident ")";
		public ParserRule getRule() { return rule; }

		//name=Ident | "(" name=Ident ")" | "(" alias=Ident "=" name=Ident ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//"(" name=Ident ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//name=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//"(" alias=Ident "=" name=Ident ")"
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//alias=Ident
		public Assignment getAliasAssignment_2_1() { return cAliasAssignment_2_1; }

		//Ident
		public RuleCall getAliasIdentParserRuleCall_2_1_0() { return cAliasIdentParserRuleCall_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//name=Ident
		public Assignment getNameAssignment_2_3() { return cNameAssignment_2_3; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_3_0() { return cNameIdentParserRuleCall_2_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
	}

	public class IncludedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Included");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cInclusiveAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cInclusiveLeftSquareBracketKeyword_1_1_0 = (Keyword)cInclusiveAssignment_1_1.eContents().get(0);
		private final Assignment cIncludesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIncludesIdentParserRuleCall_1_2_0 = (RuleCall)cIncludesAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cIncludesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cIncludesIdentParserRuleCall_1_3_1_0 = (RuleCall)cIncludesAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cExclusiveAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cExclusiveHyphenMinusKeyword_2_1_0 = (Keyword)cExclusiveAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cExcludesAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExcludesIdentParserRuleCall_2_3_0 = (RuleCall)cExcludesAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cExcludesAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cExcludesIdentParserRuleCall_2_4_1_0 = (RuleCall)cExcludesAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//Included:
		//	name=Ident | name=Ident inclusive?="[" includes+=Ident ("," includes+=Ident)* "]" | name=Ident exclusive?="-" "["
		//	excludes+=Ident ("," excludes+=Ident)* "]";
		public ParserRule getRule() { return rule; }

		//name=Ident | name=Ident inclusive?="[" includes+=Ident ("," includes+=Ident)* "]" | name=Ident exclusive?="-" "["
		//excludes+=Ident ("," excludes+=Ident)* "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//name=Ident inclusive?="[" includes+=Ident ("," includes+=Ident)* "]"
		public Group getGroup_1() { return cGroup_1; }

		//name=Ident
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_0_0() { return cNameIdentParserRuleCall_1_0_0; }

		//inclusive?="["
		public Assignment getInclusiveAssignment_1_1() { return cInclusiveAssignment_1_1; }

		//"["
		public Keyword getInclusiveLeftSquareBracketKeyword_1_1_0() { return cInclusiveLeftSquareBracketKeyword_1_1_0; }

		//includes+=Ident
		public Assignment getIncludesAssignment_1_2() { return cIncludesAssignment_1_2; }

		//Ident
		public RuleCall getIncludesIdentParserRuleCall_1_2_0() { return cIncludesIdentParserRuleCall_1_2_0; }

		//("," includes+=Ident)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//includes+=Ident
		public Assignment getIncludesAssignment_1_3_1() { return cIncludesAssignment_1_3_1; }

		//Ident
		public RuleCall getIncludesIdentParserRuleCall_1_3_1_0() { return cIncludesIdentParserRuleCall_1_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }

		//name=Ident exclusive?="-" "[" excludes+=Ident ("," excludes+=Ident)* "]"
		public Group getGroup_2() { return cGroup_2; }

		//name=Ident
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_0_0() { return cNameIdentParserRuleCall_2_0_0; }

		//exclusive?="-"
		public Assignment getExclusiveAssignment_2_1() { return cExclusiveAssignment_2_1; }

		//"-"
		public Keyword getExclusiveHyphenMinusKeyword_2_1_0() { return cExclusiveHyphenMinusKeyword_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//excludes+=Ident
		public Assignment getExcludesAssignment_2_3() { return cExcludesAssignment_2_3; }

		//Ident
		public RuleCall getExcludesIdentParserRuleCall_2_3_0() { return cExcludesIdentParserRuleCall_2_3_0; }

		//("," excludes+=Ident)*
		public Group getGroup_2_4() { return cGroup_2_4; }

		//","
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }

		//excludes+=Ident
		public Assignment getExcludesAssignment_2_4_1() { return cExcludesAssignment_2_4_1; }

		//Ident
		public RuleCall getExcludesIdentParserRuleCall_2_4_1_0() { return cExcludesIdentParserRuleCall_2_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }
	}

	public class DefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Def");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cDefinitionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_0_3_0 = (RuleCall)cDefinitionAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_1_3_0 = (RuleCall)cTypeAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cEqualsSignKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cDefinitionAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cDefinitionExpParserRuleCall_1_4_1_0 = (RuleCall)cDefinitionAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cPatternsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPatternsListPattParserRuleCall_2_1_0 = (RuleCall)cPatternsAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cDefinitionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_2_3_0 = (RuleCall)cDefinitionAssignment_2_3.eContents().get(0);
		
		//Def: //	  name=ListName '=' definition=Exp
		////	| name=Name patterns=ListPatt '=' definition=Exp
		////	| name=ListName ':' type=Exp ('=' definition=Exp)?
		//	name+=Name ("," name+=Name)* "=" definition=Exp | name+=Name ("," name+=Name)* ":" type=Exp ("=" definition=Exp)? |
		//	name+=Name patterns=ListPatt "=" definition=Exp;
		public ParserRule getRule() { return rule; }

		////	  name=ListName '=' definition=Exp
		////	| name=Name patterns=ListPatt '=' definition=Exp
		////	| name=ListName ':' type=Exp ('=' definition=Exp)?
		//name+=Name ("," name+=Name)* "=" definition=Exp | name+=Name ("," name+=Name)* ":" type=Exp ("=" definition=Exp)? |
		//name+=Name patterns=ListPatt "=" definition=Exp
		public Alternatives getAlternatives() { return cAlternatives; }

		////	  name=ListName '=' definition=Exp
		////	| name=Name patterns=ListPatt '=' definition=Exp
		////	| name=ListName ':' type=Exp ('=' definition=Exp)?
		//name+=Name ("," name+=Name)* "=" definition=Exp
		public Group getGroup_0() { return cGroup_0; }

		////	  name=ListName '=' definition=Exp
		////	| name=Name patterns=ListPatt '=' definition=Exp
		////	| name=ListName ':' type=Exp ('=' definition=Exp)?
		//name+=Name
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//("," name+=Name)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//name+=Name
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_1_1_0() { return cNameNameParserRuleCall_0_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_0_3() { return cDefinitionAssignment_0_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_0_3_0() { return cDefinitionExpParserRuleCall_0_3_0; }

		//name+=Name ("," name+=Name)* ":" type=Exp ("=" definition=Exp)?
		public Group getGroup_1() { return cGroup_1; }

		//name+=Name
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0() { return cNameNameParserRuleCall_1_0_0; }

		//("," name+=Name)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//name+=Name
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_1_1_0() { return cNameNameParserRuleCall_1_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//type=Exp
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_1_3_0() { return cTypeExpParserRuleCall_1_3_0; }

		//("=" definition=Exp)?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"="
		public Keyword getEqualsSignKeyword_1_4_0() { return cEqualsSignKeyword_1_4_0; }

		//definition=Exp
		public Assignment getDefinitionAssignment_1_4_1() { return cDefinitionAssignment_1_4_1; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_1_4_1_0() { return cDefinitionExpParserRuleCall_1_4_1_0; }

		//name+=Name patterns=ListPatt "=" definition=Exp
		public Group getGroup_2() { return cGroup_2; }

		//name+=Name
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0_0() { return cNameNameParserRuleCall_2_0_0; }

		//patterns=ListPatt
		public Assignment getPatternsAssignment_2_1() { return cPatternsAssignment_2_1; }

		//ListPatt
		public RuleCall getPatternsListPattParserRuleCall_2_1_0() { return cPatternsListPattParserRuleCall_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_2_3() { return cDefinitionAssignment_2_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_2_3_0() { return cDefinitionExpParserRuleCall_2_3_0; }
	}

	public class OperDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Alternatives cAlternatives_0_3 = (Alternatives)cGroup_0.eContents().get(3);
		private final Assignment cDefinitionAssignment_0_3_0 = (Assignment)cAlternatives_0_3.eContents().get(0);
		private final RuleCall cDefinitionExpParserRuleCall_0_3_0_0 = (RuleCall)cDefinitionAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cAlternatives_0_3.eContents().get(1);
		private final Assignment cOverloadAssignment_0_3_1_0 = (Assignment)cGroup_0_3_1.eContents().get(0);
		private final Keyword cOverloadOverloadKeyword_0_3_1_0_0 = (Keyword)cOverloadAssignment_0_3_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_3_1_1 = (Keyword)cGroup_0_3_1.eContents().get(1);
		private final Assignment cOverloadsAssignment_0_3_1_2 = (Assignment)cGroup_0_3_1.eContents().get(2);
		private final RuleCall cOverloadsDefParserRuleCall_0_3_1_2_0 = (RuleCall)cOverloadsAssignment_0_3_1_2.eContents().get(0);
		private final Group cGroup_0_3_1_3 = (Group)cGroup_0_3_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_0_3_1_3_0 = (Keyword)cGroup_0_3_1_3.eContents().get(0);
		private final Assignment cOverloadsAssignment_0_3_1_3_1 = (Assignment)cGroup_0_3_1_3.eContents().get(1);
		private final RuleCall cOverloadsDefParserRuleCall_0_3_1_3_1_0 = (RuleCall)cOverloadsAssignment_0_3_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3_1_3_2 = (Keyword)cGroup_0_3_1_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_0_3_1_4 = (Keyword)cGroup_0_3_1.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_1_3_0 = (RuleCall)cTypeAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cEqualsSignKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Alternatives cAlternatives_1_4_1 = (Alternatives)cGroup_1_4.eContents().get(1);
		private final Assignment cDefinitionAssignment_1_4_1_0 = (Assignment)cAlternatives_1_4_1.eContents().get(0);
		private final RuleCall cDefinitionExpParserRuleCall_1_4_1_0_0 = (RuleCall)cDefinitionAssignment_1_4_1_0.eContents().get(0);
		private final Group cGroup_1_4_1_1 = (Group)cAlternatives_1_4_1.eContents().get(1);
		private final Assignment cOverloadAssignment_1_4_1_1_0 = (Assignment)cGroup_1_4_1_1.eContents().get(0);
		private final Keyword cOverloadOverloadKeyword_1_4_1_1_0_0 = (Keyword)cOverloadAssignment_1_4_1_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_4_1_1_1 = (Keyword)cGroup_1_4_1_1.eContents().get(1);
		private final Assignment cOverloadsAssignment_1_4_1_1_2 = (Assignment)cGroup_1_4_1_1.eContents().get(2);
		private final RuleCall cOverloadsDefParserRuleCall_1_4_1_1_2_0 = (RuleCall)cOverloadsAssignment_1_4_1_1_2.eContents().get(0);
		private final Group cGroup_1_4_1_1_3 = (Group)cGroup_1_4_1_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_4_1_1_3_0 = (Keyword)cGroup_1_4_1_1_3.eContents().get(0);
		private final Assignment cOverloadsAssignment_1_4_1_1_3_1 = (Assignment)cGroup_1_4_1_1_3.eContents().get(1);
		private final RuleCall cOverloadsDefParserRuleCall_1_4_1_1_3_1_0 = (RuleCall)cOverloadsAssignment_1_4_1_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_4_1_1_3_2 = (Keyword)cGroup_1_4_1_1_3.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_4_1_1_4 = (Keyword)cGroup_1_4_1_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cNameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_2_1_1_0 = (RuleCall)cNameAssignment_2_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cOverloadAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final Keyword cOverloadOverloadKeyword_2_3_0 = (Keyword)cOverloadAssignment_2_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cOverloadsAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cOverloadsDefParserRuleCall_2_5_0 = (RuleCall)cOverloadsAssignment_2_5.eContents().get(0);
		private final Group cGroup_2_6 = (Group)cGroup_2.eContents().get(6);
		private final Keyword cSemicolonKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Assignment cOverloadsAssignment_2_6_1 = (Assignment)cGroup_2_6.eContents().get(1);
		private final RuleCall cOverloadsDefParserRuleCall_2_6_1_0 = (RuleCall)cOverloadsAssignment_2_6_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_6_2 = (Keyword)cGroup_2_6.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_3_0_0 = (RuleCall)cNameAssignment_3_0.eContents().get(0);
		private final Assignment cPatternsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPatternsListPattParserRuleCall_3_1_0 = (RuleCall)cPatternsAssignment_3_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cDefinitionAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_3_3_0 = (RuleCall)cDefinitionAssignment_3_3.eContents().get(0);
		
		//// For handling the overload syntax
		//OperDef returns Def:
		//	name+=Name ("," name+=Name)* "=" (definition=Exp | overload?="overload" "{" overloads+=Def (";" overloads+=Def ";"?)*
		//	"}") | name+=Name ("," name+=Name)* ":" type=Exp ("=" (definition=Exp | overload?="overload" "{" overloads+=Def (";"
		//	overloads+=Def ";"?)* "}"))? | name+=Name ("," name+=Name)* ":" overload?="overload" "{" overloads+=Def (";"
		//	overloads+=Def ";"?)* "}" | name+=Name patterns=ListPatt "=" definition=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Name ("," name+=Name)* "=" (definition=Exp | overload?="overload" "{" overloads+=Def (";" overloads+=Def ";"?)*
		//"}") | name+=Name ("," name+=Name)* ":" type=Exp ("=" (definition=Exp | overload?="overload" "{" overloads+=Def (";"
		//overloads+=Def ";"?)* "}"))? | name+=Name ("," name+=Name)* ":" overload?="overload" "{" overloads+=Def (";"
		//overloads+=Def ";"?)* "}" | name+=Name patterns=ListPatt "=" definition=Exp
		public Alternatives getAlternatives() { return cAlternatives; }

		//name+=Name ("," name+=Name)* "=" (definition=Exp | overload?="overload" "{" overloads+=Def (";" overloads+=Def ";"?)*
		//"}")
		public Group getGroup_0() { return cGroup_0; }

		//name+=Name
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//("," name+=Name)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//name+=Name
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_1_1_0() { return cNameNameParserRuleCall_0_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//definition=Exp | overload?="overload" "{" overloads+=Def (";" overloads+=Def ";"?)* "}"
		public Alternatives getAlternatives_0_3() { return cAlternatives_0_3; }

		//definition=Exp
		public Assignment getDefinitionAssignment_0_3_0() { return cDefinitionAssignment_0_3_0; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_0_3_0_0() { return cDefinitionExpParserRuleCall_0_3_0_0; }

		//overload?="overload" "{" overloads+=Def (";" overloads+=Def ";"?)* "}"
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }

		//overload?="overload"
		public Assignment getOverloadAssignment_0_3_1_0() { return cOverloadAssignment_0_3_1_0; }

		//"overload"
		public Keyword getOverloadOverloadKeyword_0_3_1_0_0() { return cOverloadOverloadKeyword_0_3_1_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_3_1_1() { return cLeftCurlyBracketKeyword_0_3_1_1; }

		//overloads+=Def
		public Assignment getOverloadsAssignment_0_3_1_2() { return cOverloadsAssignment_0_3_1_2; }

		//Def
		public RuleCall getOverloadsDefParserRuleCall_0_3_1_2_0() { return cOverloadsDefParserRuleCall_0_3_1_2_0; }

		//(";" overloads+=Def ";"?)*
		public Group getGroup_0_3_1_3() { return cGroup_0_3_1_3; }

		//";"
		public Keyword getSemicolonKeyword_0_3_1_3_0() { return cSemicolonKeyword_0_3_1_3_0; }

		//overloads+=Def
		public Assignment getOverloadsAssignment_0_3_1_3_1() { return cOverloadsAssignment_0_3_1_3_1; }

		//Def
		public RuleCall getOverloadsDefParserRuleCall_0_3_1_3_1_0() { return cOverloadsDefParserRuleCall_0_3_1_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_3_1_3_2() { return cSemicolonKeyword_0_3_1_3_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3_1_4() { return cRightCurlyBracketKeyword_0_3_1_4; }

		//name+=Name ("," name+=Name)* ":" type=Exp ("=" (definition=Exp | overload?="overload" "{" overloads+=Def (";"
		//overloads+=Def ";"?)* "}"))?
		public Group getGroup_1() { return cGroup_1; }

		//name+=Name
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0() { return cNameNameParserRuleCall_1_0_0; }

		//("," name+=Name)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//name+=Name
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_1_1_0() { return cNameNameParserRuleCall_1_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//type=Exp
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_1_3_0() { return cTypeExpParserRuleCall_1_3_0; }

		//("=" (definition=Exp | overload?="overload" "{" overloads+=Def (";" overloads+=Def ";"?)* "}"))?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"="
		public Keyword getEqualsSignKeyword_1_4_0() { return cEqualsSignKeyword_1_4_0; }

		//definition=Exp | overload?="overload" "{" overloads+=Def (";" overloads+=Def ";"?)* "}"
		public Alternatives getAlternatives_1_4_1() { return cAlternatives_1_4_1; }

		//definition=Exp
		public Assignment getDefinitionAssignment_1_4_1_0() { return cDefinitionAssignment_1_4_1_0; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_1_4_1_0_0() { return cDefinitionExpParserRuleCall_1_4_1_0_0; }

		//overload?="overload" "{" overloads+=Def (";" overloads+=Def ";"?)* "}"
		public Group getGroup_1_4_1_1() { return cGroup_1_4_1_1; }

		//overload?="overload"
		public Assignment getOverloadAssignment_1_4_1_1_0() { return cOverloadAssignment_1_4_1_1_0; }

		//"overload"
		public Keyword getOverloadOverloadKeyword_1_4_1_1_0_0() { return cOverloadOverloadKeyword_1_4_1_1_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4_1_1_1() { return cLeftCurlyBracketKeyword_1_4_1_1_1; }

		//overloads+=Def
		public Assignment getOverloadsAssignment_1_4_1_1_2() { return cOverloadsAssignment_1_4_1_1_2; }

		//Def
		public RuleCall getOverloadsDefParserRuleCall_1_4_1_1_2_0() { return cOverloadsDefParserRuleCall_1_4_1_1_2_0; }

		//(";" overloads+=Def ";"?)*
		public Group getGroup_1_4_1_1_3() { return cGroup_1_4_1_1_3; }

		//";"
		public Keyword getSemicolonKeyword_1_4_1_1_3_0() { return cSemicolonKeyword_1_4_1_1_3_0; }

		//overloads+=Def
		public Assignment getOverloadsAssignment_1_4_1_1_3_1() { return cOverloadsAssignment_1_4_1_1_3_1; }

		//Def
		public RuleCall getOverloadsDefParserRuleCall_1_4_1_1_3_1_0() { return cOverloadsDefParserRuleCall_1_4_1_1_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_4_1_1_3_2() { return cSemicolonKeyword_1_4_1_1_3_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4_1_1_4() { return cRightCurlyBracketKeyword_1_4_1_1_4; }

		//name+=Name ("," name+=Name)* ":" overload?="overload" "{" overloads+=Def (";" overloads+=Def ";"?)* "}"
		public Group getGroup_2() { return cGroup_2; }

		//name+=Name
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0_0() { return cNameNameParserRuleCall_2_0_0; }

		//("," name+=Name)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//name+=Name
		public Assignment getNameAssignment_2_1_1() { return cNameAssignment_2_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_1_1_0() { return cNameNameParserRuleCall_2_1_1_0; }

		//":"
		public Keyword getColonKeyword_2_2() { return cColonKeyword_2_2; }

		//overload?="overload"
		public Assignment getOverloadAssignment_2_3() { return cOverloadAssignment_2_3; }

		//"overload"
		public Keyword getOverloadOverloadKeyword_2_3_0() { return cOverloadOverloadKeyword_2_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_4() { return cLeftCurlyBracketKeyword_2_4; }

		//overloads+=Def
		public Assignment getOverloadsAssignment_2_5() { return cOverloadsAssignment_2_5; }

		//Def
		public RuleCall getOverloadsDefParserRuleCall_2_5_0() { return cOverloadsDefParserRuleCall_2_5_0; }

		//(";" overloads+=Def ";"?)*
		public Group getGroup_2_6() { return cGroup_2_6; }

		//";"
		public Keyword getSemicolonKeyword_2_6_0() { return cSemicolonKeyword_2_6_0; }

		//overloads+=Def
		public Assignment getOverloadsAssignment_2_6_1() { return cOverloadsAssignment_2_6_1; }

		//Def
		public RuleCall getOverloadsDefParserRuleCall_2_6_1_0() { return cOverloadsDefParserRuleCall_2_6_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_2_6_2() { return cSemicolonKeyword_2_6_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_7() { return cRightCurlyBracketKeyword_2_7; }

		//name+=Name patterns=ListPatt "=" definition=Exp
		public Group getGroup_3() { return cGroup_3; }

		//name+=Name
		public Assignment getNameAssignment_3_0() { return cNameAssignment_3_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_3_0_0() { return cNameNameParserRuleCall_3_0_0; }

		//patterns=ListPatt
		public Assignment getPatternsAssignment_3_1() { return cPatternsAssignment_3_1; }

		//ListPatt
		public RuleCall getPatternsListPattParserRuleCall_3_1_0() { return cPatternsListPattParserRuleCall_3_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_3_2() { return cEqualsSignKeyword_3_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_3_3() { return cDefinitionAssignment_3_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_3_3_0() { return cDefinitionExpParserRuleCall_3_3_0; }
	}

	public class TopDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCatAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cCatCatKeyword_0_0_0 = (Keyword)cCatAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cDefinitionsAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cDefinitionsCatDefParserRuleCall_0_1_0_0 = (RuleCall)cDefinitionsAssignment_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFunAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cFunFunKeyword_1_0_0 = (Keyword)cFunAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cDefinitionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cDefinitionsFunDefParserRuleCall_1_1_0_0 = (RuleCall)cDefinitionsAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cDataAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cDataDataKeyword_2_0_0 = (Keyword)cDataAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cDefinitionsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cDefinitionsFunDefParserRuleCall_2_1_0_0 = (RuleCall)cDefinitionsAssignment_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cDefAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDefDefKeyword_3_0_0 = (Keyword)cDefAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cDefinitionsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cDefinitionsDefParserRuleCall_3_1_0_0 = (RuleCall)cDefinitionsAssignment_3_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cDataAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cDataDataKeyword_4_0_0 = (Keyword)cDataAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cDefinitionsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cDefinitionsDataDefParserRuleCall_4_1_0_0 = (RuleCall)cDefinitionsAssignment_4_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cParamAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cParamParamKeyword_5_0_0 = (Keyword)cParamAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cDefinitionsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cDefinitionsParDefParserRuleCall_5_1_0_0 = (RuleCall)cDefinitionsAssignment_5_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cOperAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cOperOperKeyword_6_0_0 = (Keyword)cOperAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cDefinitionsAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cDefinitionsOperDefParserRuleCall_6_1_0_0 = (RuleCall)cDefinitionsAssignment_6_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cLincatAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cLincatLincatKeyword_7_0_0 = (Keyword)cLincatAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Assignment cDefinitionsAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final RuleCall cDefinitionsPrintDefParserRuleCall_7_1_0_0 = (RuleCall)cDefinitionsAssignment_7_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1_1 = (Keyword)cGroup_7_1.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cLindefAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cLindefLindefKeyword_8_0_0 = (Keyword)cLindefAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Assignment cDefinitionsAssignment_8_1_0 = (Assignment)cGroup_8_1.eContents().get(0);
		private final RuleCall cDefinitionsDefParserRuleCall_8_1_0_0 = (RuleCall)cDefinitionsAssignment_8_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1_1 = (Keyword)cGroup_8_1.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cLinAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cLinLinKeyword_9_0_0 = (Keyword)cLinAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Assignment cDefinitionsAssignment_9_1_0 = (Assignment)cGroup_9_1.eContents().get(0);
		private final RuleCall cDefinitionsDefParserRuleCall_9_1_0_0 = (RuleCall)cDefinitionsAssignment_9_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_1_1 = (Keyword)cGroup_9_1.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cPrintnameAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cPrintnamePrintnameKeyword_10_0_0 = (Keyword)cPrintnameAssignment_10_0.eContents().get(0);
		private final Keyword cCatKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Assignment cDefinitionsAssignment_10_2_0 = (Assignment)cGroup_10_2.eContents().get(0);
		private final RuleCall cDefinitionsPrintDefParserRuleCall_10_2_0_0 = (RuleCall)cDefinitionsAssignment_10_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_2_1 = (Keyword)cGroup_10_2.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cPrintnameAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cPrintnamePrintnameKeyword_11_0_0 = (Keyword)cPrintnameAssignment_11_0.eContents().get(0);
		private final Keyword cFunKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Group cGroup_11_2 = (Group)cGroup_11.eContents().get(2);
		private final Assignment cDefinitionsAssignment_11_2_0 = (Assignment)cGroup_11_2.eContents().get(0);
		private final RuleCall cDefinitionsPrintDefParserRuleCall_11_2_0_0 = (RuleCall)cDefinitionsAssignment_11_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_2_1 = (Keyword)cGroup_11_2.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cFlagsAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Keyword cFlagsFlagsKeyword_12_0_0 = (Keyword)cFlagsAssignment_12_0.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final Assignment cDefinitionsAssignment_12_1_0 = (Assignment)cGroup_12_1.eContents().get(0);
		private final RuleCall cDefinitionsFlagDefParserRuleCall_12_1_0_0 = (RuleCall)cDefinitionsAssignment_12_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_12_1_1 = (Keyword)cGroup_12_1.eContents().get(1);
		
		//TopDef:
		//	cat?="cat" (definitions+=CatDef ";")+ //	| oper?='oper'		(definitions+=Def ';')+
		//	| fun?="fun" (definitions+=FunDef ";")+ | data?="data" (definitions+=FunDef ";")+ | def?="def" (definitions+=Def ";")+
		//	| data?="data" (definitions+=DataDef ";")+ | param?="param" (definitions+=ParDef ";")+ | oper?="oper"
		//	(definitions+=OperDef ";")+ | lincat?="lincat" (definitions+=PrintDef ";")+ | lindef?="lindef" (definitions+=Def ";")+
		//	| lin?="lin" (definitions+=Def ";")+ | printname?="printname" "cat" (definitions+=PrintDef ";")+ |
		//	printname?="printname" "fun" (definitions+=PrintDef ";")+ | flags?="flags" (definitions+=FlagDef ";")+;
		public ParserRule getRule() { return rule; }

		//cat?="cat" (definitions+=CatDef ";")+ //	| oper?='oper'		(definitions+=Def ';')+
		//| fun?="fun" (definitions+=FunDef ";")+ | data?="data" (definitions+=FunDef ";")+ | def?="def" (definitions+=Def ";")+ |
		//data?="data" (definitions+=DataDef ";")+ | param?="param" (definitions+=ParDef ";")+ | oper?="oper"
		//(definitions+=OperDef ";")+ | lincat?="lincat" (definitions+=PrintDef ";")+ | lindef?="lindef" (definitions+=Def ";")+
		//| lin?="lin" (definitions+=Def ";")+ | printname?="printname" "cat" (definitions+=PrintDef ";")+ |
		//printname?="printname" "fun" (definitions+=PrintDef ";")+ | flags?="flags" (definitions+=FlagDef ";")+
		public Alternatives getAlternatives() { return cAlternatives; }

		//cat?="cat" (definitions+=CatDef ";")+
		public Group getGroup_0() { return cGroup_0; }

		//cat?="cat"
		public Assignment getCatAssignment_0_0() { return cCatAssignment_0_0; }

		//"cat"
		public Keyword getCatCatKeyword_0_0_0() { return cCatCatKeyword_0_0_0; }

		//(definitions+=CatDef ";")+
		public Group getGroup_0_1() { return cGroup_0_1; }

		//definitions+=CatDef
		public Assignment getDefinitionsAssignment_0_1_0() { return cDefinitionsAssignment_0_1_0; }

		//CatDef
		public RuleCall getDefinitionsCatDefParserRuleCall_0_1_0_0() { return cDefinitionsCatDefParserRuleCall_0_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1_1() { return cSemicolonKeyword_0_1_1; }

		//fun?="fun" (definitions+=FunDef ";")+
		public Group getGroup_1() { return cGroup_1; }

		//fun?="fun"
		public Assignment getFunAssignment_1_0() { return cFunAssignment_1_0; }

		//"fun"
		public Keyword getFunFunKeyword_1_0_0() { return cFunFunKeyword_1_0_0; }

		//(definitions+=FunDef ";")+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//definitions+=FunDef
		public Assignment getDefinitionsAssignment_1_1_0() { return cDefinitionsAssignment_1_1_0; }

		//FunDef
		public RuleCall getDefinitionsFunDefParserRuleCall_1_1_0_0() { return cDefinitionsFunDefParserRuleCall_1_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }

		//data?="data" (definitions+=FunDef ";")+
		public Group getGroup_2() { return cGroup_2; }

		//data?="data"
		public Assignment getDataAssignment_2_0() { return cDataAssignment_2_0; }

		//"data"
		public Keyword getDataDataKeyword_2_0_0() { return cDataDataKeyword_2_0_0; }

		//(definitions+=FunDef ";")+
		public Group getGroup_2_1() { return cGroup_2_1; }

		//definitions+=FunDef
		public Assignment getDefinitionsAssignment_2_1_0() { return cDefinitionsAssignment_2_1_0; }

		//FunDef
		public RuleCall getDefinitionsFunDefParserRuleCall_2_1_0_0() { return cDefinitionsFunDefParserRuleCall_2_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }

		//def?="def" (definitions+=Def ";")+
		public Group getGroup_3() { return cGroup_3; }

		//def?="def"
		public Assignment getDefAssignment_3_0() { return cDefAssignment_3_0; }

		//"def"
		public Keyword getDefDefKeyword_3_0_0() { return cDefDefKeyword_3_0_0; }

		//(definitions+=Def ";")+
		public Group getGroup_3_1() { return cGroup_3_1; }

		//definitions+=Def
		public Assignment getDefinitionsAssignment_3_1_0() { return cDefinitionsAssignment_3_1_0; }

		//Def
		public RuleCall getDefinitionsDefParserRuleCall_3_1_0_0() { return cDefinitionsDefParserRuleCall_3_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1_1() { return cSemicolonKeyword_3_1_1; }

		//data?="data" (definitions+=DataDef ";")+
		public Group getGroup_4() { return cGroup_4; }

		//data?="data"
		public Assignment getDataAssignment_4_0() { return cDataAssignment_4_0; }

		//"data"
		public Keyword getDataDataKeyword_4_0_0() { return cDataDataKeyword_4_0_0; }

		//(definitions+=DataDef ";")+
		public Group getGroup_4_1() { return cGroup_4_1; }

		//definitions+=DataDef
		public Assignment getDefinitionsAssignment_4_1_0() { return cDefinitionsAssignment_4_1_0; }

		//DataDef
		public RuleCall getDefinitionsDataDefParserRuleCall_4_1_0_0() { return cDefinitionsDataDefParserRuleCall_4_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1_1() { return cSemicolonKeyword_4_1_1; }

		//param?="param" (definitions+=ParDef ";")+
		public Group getGroup_5() { return cGroup_5; }

		//param?="param"
		public Assignment getParamAssignment_5_0() { return cParamAssignment_5_0; }

		//"param"
		public Keyword getParamParamKeyword_5_0_0() { return cParamParamKeyword_5_0_0; }

		//(definitions+=ParDef ";")+
		public Group getGroup_5_1() { return cGroup_5_1; }

		//definitions+=ParDef
		public Assignment getDefinitionsAssignment_5_1_0() { return cDefinitionsAssignment_5_1_0; }

		//ParDef
		public RuleCall getDefinitionsParDefParserRuleCall_5_1_0_0() { return cDefinitionsParDefParserRuleCall_5_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_1() { return cSemicolonKeyword_5_1_1; }

		//oper?="oper" (definitions+=OperDef ";")+
		public Group getGroup_6() { return cGroup_6; }

		//oper?="oper"
		public Assignment getOperAssignment_6_0() { return cOperAssignment_6_0; }

		//"oper"
		public Keyword getOperOperKeyword_6_0_0() { return cOperOperKeyword_6_0_0; }

		//(definitions+=OperDef ";")+
		public Group getGroup_6_1() { return cGroup_6_1; }

		//definitions+=OperDef
		public Assignment getDefinitionsAssignment_6_1_0() { return cDefinitionsAssignment_6_1_0; }

		//OperDef
		public RuleCall getDefinitionsOperDefParserRuleCall_6_1_0_0() { return cDefinitionsOperDefParserRuleCall_6_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1_1() { return cSemicolonKeyword_6_1_1; }

		//lincat?="lincat" (definitions+=PrintDef ";")+
		public Group getGroup_7() { return cGroup_7; }

		//lincat?="lincat"
		public Assignment getLincatAssignment_7_0() { return cLincatAssignment_7_0; }

		//"lincat"
		public Keyword getLincatLincatKeyword_7_0_0() { return cLincatLincatKeyword_7_0_0; }

		//(definitions+=PrintDef ";")+
		public Group getGroup_7_1() { return cGroup_7_1; }

		//definitions+=PrintDef
		public Assignment getDefinitionsAssignment_7_1_0() { return cDefinitionsAssignment_7_1_0; }

		//PrintDef
		public RuleCall getDefinitionsPrintDefParserRuleCall_7_1_0_0() { return cDefinitionsPrintDefParserRuleCall_7_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1_1() { return cSemicolonKeyword_7_1_1; }

		//lindef?="lindef" (definitions+=Def ";")+
		public Group getGroup_8() { return cGroup_8; }

		//lindef?="lindef"
		public Assignment getLindefAssignment_8_0() { return cLindefAssignment_8_0; }

		//"lindef"
		public Keyword getLindefLindefKeyword_8_0_0() { return cLindefLindefKeyword_8_0_0; }

		//(definitions+=Def ";")+
		public Group getGroup_8_1() { return cGroup_8_1; }

		//definitions+=Def
		public Assignment getDefinitionsAssignment_8_1_0() { return cDefinitionsAssignment_8_1_0; }

		//Def
		public RuleCall getDefinitionsDefParserRuleCall_8_1_0_0() { return cDefinitionsDefParserRuleCall_8_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_8_1_1() { return cSemicolonKeyword_8_1_1; }

		//lin?="lin" (definitions+=Def ";")+
		public Group getGroup_9() { return cGroup_9; }

		//lin?="lin"
		public Assignment getLinAssignment_9_0() { return cLinAssignment_9_0; }

		//"lin"
		public Keyword getLinLinKeyword_9_0_0() { return cLinLinKeyword_9_0_0; }

		//(definitions+=Def ";")+
		public Group getGroup_9_1() { return cGroup_9_1; }

		//definitions+=Def
		public Assignment getDefinitionsAssignment_9_1_0() { return cDefinitionsAssignment_9_1_0; }

		//Def
		public RuleCall getDefinitionsDefParserRuleCall_9_1_0_0() { return cDefinitionsDefParserRuleCall_9_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_9_1_1() { return cSemicolonKeyword_9_1_1; }

		//printname?="printname" "cat" (definitions+=PrintDef ";")+
		public Group getGroup_10() { return cGroup_10; }

		//printname?="printname"
		public Assignment getPrintnameAssignment_10_0() { return cPrintnameAssignment_10_0; }

		//"printname"
		public Keyword getPrintnamePrintnameKeyword_10_0_0() { return cPrintnamePrintnameKeyword_10_0_0; }

		//"cat"
		public Keyword getCatKeyword_10_1() { return cCatKeyword_10_1; }

		//(definitions+=PrintDef ";")+
		public Group getGroup_10_2() { return cGroup_10_2; }

		//definitions+=PrintDef
		public Assignment getDefinitionsAssignment_10_2_0() { return cDefinitionsAssignment_10_2_0; }

		//PrintDef
		public RuleCall getDefinitionsPrintDefParserRuleCall_10_2_0_0() { return cDefinitionsPrintDefParserRuleCall_10_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_10_2_1() { return cSemicolonKeyword_10_2_1; }

		//printname?="printname" "fun" (definitions+=PrintDef ";")+
		public Group getGroup_11() { return cGroup_11; }

		//printname?="printname"
		public Assignment getPrintnameAssignment_11_0() { return cPrintnameAssignment_11_0; }

		//"printname"
		public Keyword getPrintnamePrintnameKeyword_11_0_0() { return cPrintnamePrintnameKeyword_11_0_0; }

		//"fun"
		public Keyword getFunKeyword_11_1() { return cFunKeyword_11_1; }

		//(definitions+=PrintDef ";")+
		public Group getGroup_11_2() { return cGroup_11_2; }

		//definitions+=PrintDef
		public Assignment getDefinitionsAssignment_11_2_0() { return cDefinitionsAssignment_11_2_0; }

		//PrintDef
		public RuleCall getDefinitionsPrintDefParserRuleCall_11_2_0_0() { return cDefinitionsPrintDefParserRuleCall_11_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_11_2_1() { return cSemicolonKeyword_11_2_1; }

		//flags?="flags" (definitions+=FlagDef ";")+
		public Group getGroup_12() { return cGroup_12; }

		//flags?="flags"
		public Assignment getFlagsAssignment_12_0() { return cFlagsAssignment_12_0; }

		//"flags"
		public Keyword getFlagsFlagsKeyword_12_0_0() { return cFlagsFlagsKeyword_12_0_0; }

		//(definitions+=FlagDef ";")+
		public Group getGroup_12_1() { return cGroup_12_1; }

		//definitions+=FlagDef
		public Assignment getDefinitionsAssignment_12_1_0() { return cDefinitionsAssignment_12_1_0; }

		//FlagDef
		public RuleCall getDefinitionsFlagDefParserRuleCall_12_1_0_0() { return cDefinitionsFlagDefParserRuleCall_12_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_12_1_1() { return cSemicolonKeyword_12_1_1; }
	}

	public class CatDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cContextAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cContextDDeclParserRuleCall_0_1_0 = (RuleCall)cContextAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cContextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cContextDDeclParserRuleCall_1_2_0 = (RuleCall)cContextAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cSizeAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cSizeIntegerTerminalRuleCall_1_4_1_0 = (RuleCall)cSizeAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		
		//CatDef:
		//	name=Ident context+=DDecl* | "[" name=Ident context+=DDecl* "]" ("{" size=Integer "}")?;
		public ParserRule getRule() { return rule; }

		//name=Ident context+=DDecl* | "[" name=Ident context+=DDecl* "]" ("{" size=Integer "}")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident context+=DDecl*
		public Group getGroup_0() { return cGroup_0; }

		//name=Ident
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0_0() { return cNameIdentParserRuleCall_0_0_0; }

		//context+=DDecl*
		public Assignment getContextAssignment_0_1() { return cContextAssignment_0_1; }

		//DDecl
		public RuleCall getContextDDeclParserRuleCall_0_1_0() { return cContextDDeclParserRuleCall_0_1_0; }

		//"[" name=Ident context+=DDecl* "]" ("{" size=Integer "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//name=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//context+=DDecl*
		public Assignment getContextAssignment_1_2() { return cContextAssignment_1_2; }

		//DDecl
		public RuleCall getContextDDeclParserRuleCall_1_2_0() { return cContextDDeclParserRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }

		//("{" size=Integer "}")?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4_0() { return cLeftCurlyBracketKeyword_1_4_0; }

		//size=Integer
		public Assignment getSizeAssignment_1_4_1() { return cSizeAssignment_1_4_1; }

		//Integer
		public RuleCall getSizeIntegerTerminalRuleCall_1_4_1_0() { return cSizeIntegerTerminalRuleCall_1_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4_2() { return cRightCurlyBracketKeyword_1_4_2; }
	}

	public class FunDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//FunDef:
		//	name+=Ident ("," name+=Ident)* ":" type=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Ident ("," name+=Ident)* ":" type=Exp
		public Group getGroup() { return cGroup; }

		//name+=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//("," name+=Ident)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name+=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Exp
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_3_0() { return cTypeExpParserRuleCall_3_0; }
	}

	public class DataDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cConstructorsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cConstructorsDataConstrParserRuleCall_2_0_0 = (RuleCall)cConstructorsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cConstructorsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cConstructorsDataConstrParserRuleCall_2_1_1_0 = (RuleCall)cConstructorsAssignment_2_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//DataDef:
		//	name=Ident "=" (constructors+=DataConstr ("|" constructors+=DataConstr)* "|"?)?;
		public ParserRule getRule() { return rule; }

		//name=Ident "=" (constructors+=DataConstr ("|" constructors+=DataConstr)* "|"?)?
		public Group getGroup() { return cGroup; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(constructors+=DataConstr ("|" constructors+=DataConstr)* "|"?)?
		public Group getGroup_2() { return cGroup_2; }

		//constructors+=DataConstr
		public Assignment getConstructorsAssignment_2_0() { return cConstructorsAssignment_2_0; }

		//DataConstr
		public RuleCall getConstructorsDataConstrParserRuleCall_2_0_0() { return cConstructorsDataConstrParserRuleCall_2_0_0; }

		//("|" constructors+=DataConstr)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"|"
		public Keyword getVerticalLineKeyword_2_1_0() { return cVerticalLineKeyword_2_1_0; }

		//constructors+=DataConstr
		public Assignment getConstructorsAssignment_2_1_1() { return cConstructorsAssignment_2_1_1; }

		//DataConstr
		public RuleCall getConstructorsDataConstrParserRuleCall_2_1_1_0() { return cConstructorsDataConstrParserRuleCall_2_1_1_0; }

		//"|"?
		public Keyword getVerticalLineKeyword_2_2() { return cVerticalLineKeyword_2_2; }
	}

	public class DataConstrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataConstr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cModuleAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cModuleIdentParserRuleCall_1_0_0 = (RuleCall)cModuleAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIdentParserRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		
		//DataConstr:
		//	name=Ident | module=Ident "." name=Ident;
		public ParserRule getRule() { return rule; }

		//name=Ident | module=Ident "." name=Ident
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//module=Ident "." name=Ident
		public Group getGroup_1() { return cGroup_1; }

		//module=Ident
		public Assignment getModuleAssignment_1_0() { return cModuleAssignment_1_0; }

		//Ident
		public RuleCall getModuleIdentParserRuleCall_1_0_0() { return cModuleIdentParserRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//name=Ident
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_2_0() { return cNameIdentParserRuleCall_1_2_0; }
	}

	public class ParDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cConstructorsAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cConstructorsParConstrParserRuleCall_0_2_0_0 = (RuleCall)cConstructorsAssignment_0_2_0.eContents().get(0);
		private final Group cGroup_0_2_1 = (Group)cGroup_0_2.eContents().get(1);
		private final Keyword cVerticalLineKeyword_0_2_1_0 = (Keyword)cGroup_0_2_1.eContents().get(0);
		private final Assignment cConstructorsAssignment_0_2_1_1 = (Assignment)cGroup_0_2_1.eContents().get(1);
		private final RuleCall cConstructorsParConstrParserRuleCall_0_2_1_1_0 = (RuleCall)cConstructorsAssignment_0_2_1_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cInKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cId2Assignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cId2IdentParserRuleCall_1_4_0 = (RuleCall)cId2Assignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cNameAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNameIdentParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//ParDef:
		//	name=Ident "=" (constructors+=ParConstr ("|" constructors+=ParConstr)* "|"?)? | name=Ident "=" "(" "in" id2=Ident ")"
		//	| name=Ident;
		public ParserRule getRule() { return rule; }

		//name=Ident "=" (constructors+=ParConstr ("|" constructors+=ParConstr)* "|"?)? | name=Ident "=" "(" "in" id2=Ident ")" |
		//name=Ident
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident "=" (constructors+=ParConstr ("|" constructors+=ParConstr)* "|"?)?
		public Group getGroup_0() { return cGroup_0; }

		//name=Ident
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0_0() { return cNameIdentParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//(constructors+=ParConstr ("|" constructors+=ParConstr)* "|"?)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//constructors+=ParConstr
		public Assignment getConstructorsAssignment_0_2_0() { return cConstructorsAssignment_0_2_0; }

		//ParConstr
		public RuleCall getConstructorsParConstrParserRuleCall_0_2_0_0() { return cConstructorsParConstrParserRuleCall_0_2_0_0; }

		//("|" constructors+=ParConstr)*
		public Group getGroup_0_2_1() { return cGroup_0_2_1; }

		//"|"
		public Keyword getVerticalLineKeyword_0_2_1_0() { return cVerticalLineKeyword_0_2_1_0; }

		//constructors+=ParConstr
		public Assignment getConstructorsAssignment_0_2_1_1() { return cConstructorsAssignment_0_2_1_1; }

		//ParConstr
		public RuleCall getConstructorsParConstrParserRuleCall_0_2_1_1_0() { return cConstructorsParConstrParserRuleCall_0_2_1_1_0; }

		//"|"?
		public Keyword getVerticalLineKeyword_0_2_2() { return cVerticalLineKeyword_0_2_2; }

		//name=Ident "=" "(" "in" id2=Ident ")"
		public Group getGroup_1() { return cGroup_1; }

		//name=Ident
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_0_0() { return cNameIdentParserRuleCall_1_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }

		//"in"
		public Keyword getInKeyword_1_3() { return cInKeyword_1_3; }

		//id2=Ident
		public Assignment getId2Assignment_1_4() { return cId2Assignment_1_4; }

		//Ident
		public RuleCall getId2IdentParserRuleCall_1_4_0() { return cId2IdentParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }

		//name=Ident
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_0() { return cNameIdentParserRuleCall_2_0; }
	}

	public class ParConstrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParConstr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cConstructorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstructorsDDeclParserRuleCall_1_0 = (RuleCall)cConstructorsAssignment_1.eContents().get(0);
		
		//ParConstr:
		//	name=Ident constructors+=DDecl*;
		public ParserRule getRule() { return rule; }

		//name=Ident constructors+=DDecl*
		public Group getGroup() { return cGroup; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//constructors+=DDecl*
		public Assignment getConstructorsAssignment_1() { return cConstructorsAssignment_1; }

		//DDecl
		public RuleCall getConstructorsDDeclParserRuleCall_1_0() { return cConstructorsDDeclParserRuleCall_1_0; }
	}

	public class PrintDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrintDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPrintnameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPrintnameExpParserRuleCall_3_0 = (RuleCall)cPrintnameAssignment_3.eContents().get(0);
		
		//PrintDef: //	name=ListName '=' printname=Exp
		//	name+=Name ("," name+=Name)* "=" printname=Exp;
		public ParserRule getRule() { return rule; }

		////	name=ListName '=' printname=Exp
		//name+=Name ("," name+=Name)* "=" printname=Exp
		public Group getGroup() { return cGroup; }

		////	name=ListName '=' printname=Exp
		//name+=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//("," name+=Name)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name+=Name
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_1_0() { return cNameNameParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//printname=Exp
		public Assignment getPrintnameAssignment_3() { return cPrintnameAssignment_3; }

		//Exp
		public RuleCall getPrintnameExpParserRuleCall_3_0() { return cPrintnameExpParserRuleCall_3_0; }
	}

	public class FlagDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlagDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueIdentParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final RuleCall cStringTerminalRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		
		//FlagDef:
		//	name=Ident "=" (value=Ident | String);
		public ParserRule getRule() { return rule; }

		//name=Ident "=" (value=Ident | String)
		public Group getGroup() { return cGroup; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Ident | String
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=Ident
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//Ident
		public RuleCall getValueIdentParserRuleCall_2_0_0() { return cValueIdentParserRuleCall_2_0_0; }

		//String
		public RuleCall getStringTerminalRuleCall_2_1() { return cStringTerminalRuleCall_2_1; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Name:
		//	name=Ident | "[" name=Ident "]";
		public ParserRule getRule() { return rule; }

		//name=Ident | "[" name=Ident "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//"[" name=Ident "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//name=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class LocDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_0_3_0 = (RuleCall)cTypeAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cEqualsSignKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cValueAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cValueExpParserRuleCall_0_4_1_0 = (RuleCall)cValueAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueExpParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		
		//LocDef:
		//	name+=Ident ("," name+=Ident)* ":" type=Exp ("=" value=Exp)? | name+=Ident ("," name+=Ident)* "=" value=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Ident ("," name+=Ident)* ":" type=Exp ("=" value=Exp)? | name+=Ident ("," name+=Ident)* "=" value=Exp
		public Alternatives getAlternatives() { return cAlternatives; }

		//name+=Ident ("," name+=Ident)* ":" type=Exp ("=" value=Exp)?
		public Group getGroup_0() { return cGroup_0; }

		//name+=Ident
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0_0() { return cNameIdentParserRuleCall_0_0_0; }

		//("," name+=Ident)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//name+=Ident
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_1_1_0() { return cNameIdentParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//type=Exp
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_0_3_0() { return cTypeExpParserRuleCall_0_3_0; }

		//("=" value=Exp)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//"="
		public Keyword getEqualsSignKeyword_0_4_0() { return cEqualsSignKeyword_0_4_0; }

		//value=Exp
		public Assignment getValueAssignment_0_4_1() { return cValueAssignment_0_4_1; }

		//Exp
		public RuleCall getValueExpParserRuleCall_0_4_1_0() { return cValueExpParserRuleCall_0_4_1_0; }

		//name+=Ident ("," name+=Ident)* "=" value=Exp
		public Group getGroup_1() { return cGroup_1; }

		//name+=Ident
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_0_0() { return cNameIdentParserRuleCall_1_0_0; }

		//("," name+=Ident)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//name+=Ident
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_1_0() { return cNameIdentParserRuleCall_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//value=Exp
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }

		//Exp
		public RuleCall getValueExpParserRuleCall_1_3_0() { return cValueExpParserRuleCall_1_3_0; }
	}

	public class ListLocDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListLocDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListLocDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLocalDefinitionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLocalDefinitionsLocDefParserRuleCall_1_0_0 = (RuleCall)cLocalDefinitionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLocalDefinitionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLocalDefinitionsLocDefParserRuleCall_1_1_1_0 = (RuleCall)cLocalDefinitionsAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ListLocDef: // ε | LocDef | LocDef ';' ListLocDef
		//	{ListLocDef} (localDefinitions+=LocDef (";" localDefinitions+=LocDef)* ";"?)?;
		public ParserRule getRule() { return rule; }

		//// ε | LocDef | LocDef ';' ListLocDef
		//{ListLocDef} (localDefinitions+=LocDef (";" localDefinitions+=LocDef)* ";"?)?
		public Group getGroup() { return cGroup; }

		//// ε | LocDef | LocDef ';' ListLocDef
		//{ListLocDef}
		public Action getListLocDefAction_0() { return cListLocDefAction_0; }

		//(localDefinitions+=LocDef (";" localDefinitions+=LocDef)* ";"?)?
		public Group getGroup_1() { return cGroup_1; }

		//localDefinitions+=LocDef
		public Assignment getLocalDefinitionsAssignment_1_0() { return cLocalDefinitionsAssignment_1_0; }

		//LocDef
		public RuleCall getLocalDefinitionsLocDefParserRuleCall_1_0_0() { return cLocalDefinitionsLocDefParserRuleCall_1_0_0; }

		//(";" localDefinitions+=LocDef)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//localDefinitions+=LocDef
		public Assignment getLocalDefinitionsAssignment_1_1_1() { return cLocalDefinitionsAssignment_1_1_1; }

		//LocDef
		public RuleCall getLocalDefinitionsLocDefParserRuleCall_1_1_1_0() { return cLocalDefinitionsLocDefParserRuleCall_1_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class Exp6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp6");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cNameIdentCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIdentIDTerminalRuleCall_0_0_1 = (RuleCall)cNameIdentCrossReference_0_0.eContents().get(1);
		private final Assignment cSortAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSortSortParserRuleCall_1_0 = (RuleCall)cSortAssignment_1.eContents().get(0);
		private final Assignment cBuiltInCatAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cBuiltInCatBuiltInCatParserRuleCall_2_0 = (RuleCall)cBuiltInCatAssignment_2.eContents().get(0);
		private final Assignment cStringAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cStringStringTerminalRuleCall_3_0 = (RuleCall)cStringAssignment_3.eContents().get(0);
		private final Assignment cIntegerAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cIntegerIntegerTerminalRuleCall_4_0 = (RuleCall)cIntegerAssignment_4.eContents().get(0);
		private final Assignment cDoubleAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cDoubleDoubleTerminalRuleCall_5_0 = (RuleCall)cDoubleAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cMetaAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cMetaQuestionMarkKeyword_6_0_0 = (Keyword)cMetaAssignment_6_0.eContents().get(0);
		private final RuleCall cIntegerTerminalRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cEmptyStringAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cEmptyStringLeftSquareBracketKeyword_7_0_0 = (Keyword)cEmptyStringAssignment_7_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDataAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final Keyword cDataDataKeyword_8_0 = (Keyword)cDataAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cListCatAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cListCatLeftSquareBracketKeyword_9_0_0 = (Keyword)cListCatAssignment_9_0.eContents().get(0);
		private final Assignment cCategoryAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cCategoryIdentCrossReference_9_1_0 = (CrossReference)cCategoryAssignment_9_1.eContents().get(0);
		private final RuleCall cCategoryIdentIDTerminalRuleCall_9_1_0_1 = (RuleCall)cCategoryIdentCrossReference_9_1_0.eContents().get(1);
		private final Assignment cListAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cListExpsParserRuleCall_9_2_0 = (RuleCall)cListAssignment_9_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cTokenListAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cTokenListLeftSquareBracketKeyword_10_0_0 = (Keyword)cTokenListAssignment_10_0.eContents().get(0);
		private final RuleCall cStringTerminalRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cRecordAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cRecordLeftCurlyBracketKeyword_11_0_0 = (Keyword)cRecordAssignment_11_0.eContents().get(0);
		private final Assignment cDefListAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cDefListListLocDefParserRuleCall_11_1_0 = (RuleCall)cDefListAssignment_11_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cTupleAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Keyword cTupleLessThanSignKeyword_12_0_0 = (Keyword)cTupleAssignment_12_0.eContents().get(0);
		private final Alternatives cAlternatives_12_1 = (Alternatives)cGroup_12.eContents().get(1);
		private final Assignment cTupleListAssignment_12_1_0 = (Assignment)cAlternatives_12_1.eContents().get(0);
		private final RuleCall cTupleListListTupleCompParserRuleCall_12_1_0_0 = (RuleCall)cTupleListAssignment_12_1_0.eContents().get(0);
		private final Group cGroup_12_1_1 = (Group)cAlternatives_12_1.eContents().get(1);
		private final Assignment cVAssignment_12_1_1_0 = (Assignment)cGroup_12_1_1.eContents().get(0);
		private final RuleCall cVExpParserRuleCall_12_1_1_0_0 = (RuleCall)cVAssignment_12_1_1_0.eContents().get(0);
		private final Keyword cColonKeyword_12_1_1_1 = (Keyword)cGroup_12_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_12_1_1_2 = (Assignment)cGroup_12_1_1.eContents().get(2);
		private final RuleCall cTypeExpParserRuleCall_12_1_1_2_0 = (RuleCall)cTypeAssignment_12_1_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Assignment cIdentityAssignment_13_0 = (Assignment)cGroup_13.eContents().get(0);
		private final Keyword cIdentityLeftParenthesisKeyword_13_0_0 = (Keyword)cIdentityAssignment_13_0.eContents().get(0);
		private final Assignment cVAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cVExpParserRuleCall_13_1_0 = (RuleCall)cVAssignment_13_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		
		//Exp6: //	  {Exp6} Ident
		//	name= // constant or variable
		//	[Ident] //	| {Exp6} '?' Integer
		//	//	| {Exp6} '?'
		//	//	| '[' Ident es=Exps ']'
		//	//	| '<' ltc=ListTupleComp '>'
		//	//	| '<' e+=Exp ':' e+=Exp '>'
		//	| sort?= // type of types/param types/strings/token lists
		//	Sort | builtInCat?= // 
		//	BuiltInCat | string?= // string literal
		//	String | integer?= // integer literal
		//	Integer | double?= // floating point literal
		//	Double | meta?="?" => Integer? // metavariable
		//	| emptyString?="[" // empty token list
		//	"]" | data?="data" | listCat?="[" category=[Ident] list=Exps // list category
		//	"]" | tokenList?="[" String // token list
		//	"]" | record?="{" defList=ListLocDef // record / record type
		//	"}" | tuple?="<" (=> tupleList=ListTupleComp | v=Exp ":" type=Exp) // tuple | type-annotated expression
		//	">" | identity?="(" v=Exp ")";
		public ParserRule getRule() { return rule; }

		////	  {Exp6} Ident
		//name= // constant or variable
		//[Ident] //	| {Exp6} '?' Integer
		////	| {Exp6} '?'
		////	| '[' Ident es=Exps ']'
		////	| '<' ltc=ListTupleComp '>'
		////	| '<' e+=Exp ':' e+=Exp '>'
		//| sort?= // type of types/param types/strings/token lists
		//Sort | builtInCat?= // 
		//BuiltInCat | string?= // string literal
		//String | integer?= // integer literal
		//Integer | double?= // floating point literal
		//Double | meta?="?" => Integer? // metavariable
		//| emptyString?="[" // empty token list
		//"]" | data?="data" | listCat?="[" category=[Ident] list=Exps // list category
		//"]" | tokenList?="[" String // token list
		//"]" | record?="{" defList=ListLocDef // record / record type
		//"}" | tuple?="<" (=> tupleList=ListTupleComp | v=Exp ":" type=Exp) // tuple | type-annotated expression
		//">" | identity?="(" v=Exp ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		////	  {Exp6} Ident
		//name= // constant or variable
		//[Ident]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//// constant or variable
		//[Ident]
		public CrossReference getNameIdentCrossReference_0_0() { return cNameIdentCrossReference_0_0; }

		//ID
		public RuleCall getNameIdentIDTerminalRuleCall_0_0_1() { return cNameIdentIDTerminalRuleCall_0_0_1; }

		//sort?= // type of types/param types/strings/token lists
		//Sort
		public Assignment getSortAssignment_1() { return cSortAssignment_1; }

		//// type of types/param types/strings/token lists
		//Sort
		public RuleCall getSortSortParserRuleCall_1_0() { return cSortSortParserRuleCall_1_0; }

		//builtInCat?= // 
		//BuiltInCat
		public Assignment getBuiltInCatAssignment_2() { return cBuiltInCatAssignment_2; }

		//// 
		//BuiltInCat
		public RuleCall getBuiltInCatBuiltInCatParserRuleCall_2_0() { return cBuiltInCatBuiltInCatParserRuleCall_2_0; }

		//string?= // string literal
		//String
		public Assignment getStringAssignment_3() { return cStringAssignment_3; }

		//// string literal
		//String
		public RuleCall getStringStringTerminalRuleCall_3_0() { return cStringStringTerminalRuleCall_3_0; }

		//integer?= // integer literal
		//Integer
		public Assignment getIntegerAssignment_4() { return cIntegerAssignment_4; }

		//// integer literal
		//Integer
		public RuleCall getIntegerIntegerTerminalRuleCall_4_0() { return cIntegerIntegerTerminalRuleCall_4_0; }

		//double?= // floating point literal
		//Double
		public Assignment getDoubleAssignment_5() { return cDoubleAssignment_5; }

		//// floating point literal
		//Double
		public RuleCall getDoubleDoubleTerminalRuleCall_5_0() { return cDoubleDoubleTerminalRuleCall_5_0; }

		//meta?="?" => Integer? // metavariable
		public Group getGroup_6() { return cGroup_6; }

		//meta?="?"
		public Assignment getMetaAssignment_6_0() { return cMetaAssignment_6_0; }

		//"?"
		public Keyword getMetaQuestionMarkKeyword_6_0_0() { return cMetaQuestionMarkKeyword_6_0_0; }

		//=> Integer?
		public RuleCall getIntegerTerminalRuleCall_6_1() { return cIntegerTerminalRuleCall_6_1; }

		//emptyString?="[" // empty token list
		//"]"
		public Group getGroup_7() { return cGroup_7; }

		//emptyString?="["
		public Assignment getEmptyStringAssignment_7_0() { return cEmptyStringAssignment_7_0; }

		//"["
		public Keyword getEmptyStringLeftSquareBracketKeyword_7_0_0() { return cEmptyStringLeftSquareBracketKeyword_7_0_0; }

		//// empty token list
		//"]"
		public Keyword getRightSquareBracketKeyword_7_1() { return cRightSquareBracketKeyword_7_1; }

		//data?="data"
		public Assignment getDataAssignment_8() { return cDataAssignment_8; }

		//"data"
		public Keyword getDataDataKeyword_8_0() { return cDataDataKeyword_8_0; }

		//listCat?="[" category=[Ident] list=Exps // list category
		//"]"
		public Group getGroup_9() { return cGroup_9; }

		//listCat?="["
		public Assignment getListCatAssignment_9_0() { return cListCatAssignment_9_0; }

		//"["
		public Keyword getListCatLeftSquareBracketKeyword_9_0_0() { return cListCatLeftSquareBracketKeyword_9_0_0; }

		//category=[Ident]
		public Assignment getCategoryAssignment_9_1() { return cCategoryAssignment_9_1; }

		//[Ident]
		public CrossReference getCategoryIdentCrossReference_9_1_0() { return cCategoryIdentCrossReference_9_1_0; }

		//ID
		public RuleCall getCategoryIdentIDTerminalRuleCall_9_1_0_1() { return cCategoryIdentIDTerminalRuleCall_9_1_0_1; }

		//list=Exps
		public Assignment getListAssignment_9_2() { return cListAssignment_9_2; }

		//Exps
		public RuleCall getListExpsParserRuleCall_9_2_0() { return cListExpsParserRuleCall_9_2_0; }

		//// list category
		//"]"
		public Keyword getRightSquareBracketKeyword_9_3() { return cRightSquareBracketKeyword_9_3; }

		//tokenList?="[" String // token list
		//"]"
		public Group getGroup_10() { return cGroup_10; }

		//tokenList?="["
		public Assignment getTokenListAssignment_10_0() { return cTokenListAssignment_10_0; }

		//"["
		public Keyword getTokenListLeftSquareBracketKeyword_10_0_0() { return cTokenListLeftSquareBracketKeyword_10_0_0; }

		//String
		public RuleCall getStringTerminalRuleCall_10_1() { return cStringTerminalRuleCall_10_1; }

		//// token list
		//"]"
		public Keyword getRightSquareBracketKeyword_10_2() { return cRightSquareBracketKeyword_10_2; }

		//record?="{" defList=ListLocDef // record / record type
		//"}"
		public Group getGroup_11() { return cGroup_11; }

		//record?="{"
		public Assignment getRecordAssignment_11_0() { return cRecordAssignment_11_0; }

		//"{"
		public Keyword getRecordLeftCurlyBracketKeyword_11_0_0() { return cRecordLeftCurlyBracketKeyword_11_0_0; }

		//defList=ListLocDef
		public Assignment getDefListAssignment_11_1() { return cDefListAssignment_11_1; }

		//ListLocDef
		public RuleCall getDefListListLocDefParserRuleCall_11_1_0() { return cDefListListLocDefParserRuleCall_11_1_0; }

		//// record / record type
		//"}"
		public Keyword getRightCurlyBracketKeyword_11_2() { return cRightCurlyBracketKeyword_11_2; }

		//tuple?="<" (=> tupleList=ListTupleComp | v=Exp ":" type=Exp) // tuple | type-annotated expression
		//">"
		public Group getGroup_12() { return cGroup_12; }

		//tuple?="<"
		public Assignment getTupleAssignment_12_0() { return cTupleAssignment_12_0; }

		//"<"
		public Keyword getTupleLessThanSignKeyword_12_0_0() { return cTupleLessThanSignKeyword_12_0_0; }

		//=> tupleList=ListTupleComp | v=Exp ":" type=Exp
		public Alternatives getAlternatives_12_1() { return cAlternatives_12_1; }

		//=> tupleList=ListTupleComp
		public Assignment getTupleListAssignment_12_1_0() { return cTupleListAssignment_12_1_0; }

		//ListTupleComp
		public RuleCall getTupleListListTupleCompParserRuleCall_12_1_0_0() { return cTupleListListTupleCompParserRuleCall_12_1_0_0; }

		//v=Exp ":" type=Exp
		public Group getGroup_12_1_1() { return cGroup_12_1_1; }

		//v=Exp
		public Assignment getVAssignment_12_1_1_0() { return cVAssignment_12_1_1_0; }

		//Exp
		public RuleCall getVExpParserRuleCall_12_1_1_0_0() { return cVExpParserRuleCall_12_1_1_0_0; }

		//":"
		public Keyword getColonKeyword_12_1_1_1() { return cColonKeyword_12_1_1_1; }

		//type=Exp
		public Assignment getTypeAssignment_12_1_1_2() { return cTypeAssignment_12_1_1_2; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_12_1_1_2_0() { return cTypeExpParserRuleCall_12_1_1_2_0; }

		//// tuple | type-annotated expression
		//">"
		public Keyword getGreaterThanSignKeyword_12_2() { return cGreaterThanSignKeyword_12_2; }

		//identity?="(" v=Exp ")"
		public Group getGroup_13() { return cGroup_13; }

		//identity?="("
		public Assignment getIdentityAssignment_13_0() { return cIdentityAssignment_13_0; }

		//"("
		public Keyword getIdentityLeftParenthesisKeyword_13_0_0() { return cIdentityLeftParenthesisKeyword_13_0_0; }

		//v=Exp
		public Assignment getVAssignment_13_1() { return cVAssignment_13_1; }

		//Exp
		public RuleCall getVExpParserRuleCall_13_1_0() { return cVExpParserRuleCall_13_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13_2() { return cRightParenthesisKeyword_13_2; }
	}

	public class Exp5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVExp6ParserRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLabelAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_1_1_0 = (RuleCall)cLabelAssignment_1_1.eContents().get(0);
		
		//Exp5: // Exp5 . Label | Exp6
		//	v=Exp6 ("." label+=Label)* // projection or qualification
		//;
		public ParserRule getRule() { return rule; }

		//// Exp5 . Label | Exp6
		//v=Exp6 ("." label+=Label)* // projection or qualification
		public Group getGroup() { return cGroup; }

		//// Exp5 . Label | Exp6
		//v=Exp6
		public Assignment getVAssignment_0() { return cVAssignment_0; }

		//Exp6
		public RuleCall getVExp6ParserRuleCall_0_0() { return cVExp6ParserRuleCall_0_0; }

		//("." label+=Label)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//label+=Label
		public Assignment getLabelAssignment_1_1() { return cLabelAssignment_1_1; }

		//Label
		public RuleCall getLabelLabelParserRuleCall_1_1_0() { return cLabelLabelParserRuleCall_1_1_0; }
	}

	public class Exp4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTableKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCaseListAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCaseListListCaseParserRuleCall_0_2_0 = (RuleCall)cCaseListAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cArgsAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cArgsExp5ParserRuleCall_0_4_0 = (RuleCall)cArgsAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTableKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgTypeExp6ParserRuleCall_1_1_0 = (RuleCall)cArgTypeAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cAlternatives_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cCaseListAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cCaseListListCaseParserRuleCall_1_2_0_1_0 = (RuleCall)cCaseListAssignment_1_2_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2_0_2 = (Keyword)cGroup_1_2_0.eContents().get(2);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cExpListAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cExpListListExpParserRuleCall_1_2_1_1_0 = (RuleCall)cExpListAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_1_2 = (Keyword)cGroup_1_2_1.eContents().get(2);
		private final Assignment cArgsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cArgsExp5ParserRuleCall_1_3_0 = (RuleCall)cArgsAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCaseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCaseOfAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCaseOfExpParserRuleCall_2_1_0 = (RuleCall)cCaseOfAssignment_2_1.eContents().get(0);
		private final Keyword cOfKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cCaseListAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cCaseListListCaseParserRuleCall_2_4_0 = (RuleCall)cCaseListAssignment_2_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cArgsAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cArgsExp5ParserRuleCall_2_6_0 = (RuleCall)cArgsAssignment_2_6.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cVariantsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cExpListAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cExpListListExpParserRuleCall_3_2_0 = (RuleCall)cExpListAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cArgsAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cArgsExp5ParserRuleCall_3_4_0 = (RuleCall)cArgsAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cPreKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cCaseListAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cCaseListListCaseParserRuleCall_4_2_0 = (RuleCall)cCaseListAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cArgsAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cArgsExp5ParserRuleCall_4_4_0 = (RuleCall)cArgsAssignment_4_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLincatKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNameAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cNameIdentCrossReference_5_1_0 = (CrossReference)cNameAssignment_5_1.eContents().get(0);
		private final RuleCall cNameIdentIDTerminalRuleCall_5_1_0_1 = (RuleCall)cNameIdentCrossReference_5_1_0.eContents().get(1);
		private final Assignment cArgsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cArgsExp5ParserRuleCall_5_2_0 = (RuleCall)cArgsAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLinKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cNameAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cNameIdentCrossReference_6_1_0 = (CrossReference)cNameAssignment_6_1.eContents().get(0);
		private final RuleCall cNameIdentIDTerminalRuleCall_6_1_0_1 = (RuleCall)cNameIdentCrossReference_6_1_0.eContents().get(1);
		private final Assignment cInnerAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cInnerExp6ParserRuleCall_6_2_0 = (RuleCall)cInnerAssignment_6_2.eContents().get(0);
		private final Assignment cArgsAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cArgsExp5ParserRuleCall_6_3_0 = (RuleCall)cArgsAssignment_6_3.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cVAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cVExp5ParserRuleCall_7_0_0 = (RuleCall)cVAssignment_7_0.eContents().get(0);
		private final Assignment cArgsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cArgsExp5ParserRuleCall_7_1_0 = (RuleCall)cArgsAssignment_7_1.eContents().get(0);
		
		//Exp4: //	  e1=Exp4 e2=Exp5		// function application
		//	"table" "{" caseList=ListCase "}" args+=Exp5* //	| 'table' e+=Exp6 '{' lc=ListCase '}'		(e+=Exp5)*
		//	//	| 'table' e+=Exp6 '[' le=ListExp ']'		(e+=Exp5)*
		//	| "table" argType=Exp6 ("{" caseList=ListCase "}" | "[" expList=ListExp "]") args+=Exp5* // course-of-values table
		//	| "case" caseOf=Exp "of" "{" caseList=ListCase "}" args+=Exp5* | "variants" "{" expList=ListExp "}" args+=Exp5* | "pre"
		//	"{" caseList=ListCase "}" args+=Exp5* | "lincat" name=[Ident] args+=Exp5* | "lin" name=[Ident] inner=Exp6 args+=Exp5*
		//	| v=Exp5 args+=Exp5*;
		public ParserRule getRule() { return rule; }

		////	  e1=Exp4 e2=Exp5		// function application
		//"table" "{" caseList=ListCase "}" args+=Exp5* //	| 'table' e+=Exp6 '{' lc=ListCase '}'		(e+=Exp5)*
		////	| 'table' e+=Exp6 '[' le=ListExp ']'		(e+=Exp5)*
		//| "table" argType=Exp6 ("{" caseList=ListCase "}" | "[" expList=ListExp "]") args+=Exp5* // course-of-values table
		//| "case" caseOf=Exp "of" "{" caseList=ListCase "}" args+=Exp5* | "variants" "{" expList=ListExp "}" args+=Exp5* | "pre"
		//"{" caseList=ListCase "}" args+=Exp5* | "lincat" name=[Ident] args+=Exp5* | "lin" name=[Ident] inner=Exp6 args+=Exp5* |
		//v=Exp5 args+=Exp5*
		public Alternatives getAlternatives() { return cAlternatives; }

		////	  e1=Exp4 e2=Exp5		// function application
		//"table" "{" caseList=ListCase "}" args+=Exp5*
		public Group getGroup_0() { return cGroup_0; }

		////	  e1=Exp4 e2=Exp5		// function application
		//"table"
		public Keyword getTableKeyword_0_0() { return cTableKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//caseList=ListCase
		public Assignment getCaseListAssignment_0_2() { return cCaseListAssignment_0_2; }

		//ListCase
		public RuleCall getCaseListListCaseParserRuleCall_0_2_0() { return cCaseListListCaseParserRuleCall_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }

		//args+=Exp5*
		public Assignment getArgsAssignment_0_4() { return cArgsAssignment_0_4; }

		//Exp5
		public RuleCall getArgsExp5ParserRuleCall_0_4_0() { return cArgsExp5ParserRuleCall_0_4_0; }

		//"table" argType=Exp6 ("{" caseList=ListCase "}" | "[" expList=ListExp "]") args+=Exp5* // course-of-values table
		public Group getGroup_1() { return cGroup_1; }

		//"table"
		public Keyword getTableKeyword_1_0() { return cTableKeyword_1_0; }

		//argType=Exp6
		public Assignment getArgTypeAssignment_1_1() { return cArgTypeAssignment_1_1; }

		//Exp6
		public RuleCall getArgTypeExp6ParserRuleCall_1_1_0() { return cArgTypeExp6ParserRuleCall_1_1_0; }

		//"{" caseList=ListCase "}" | "[" expList=ListExp "]"
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//"{" caseList=ListCase "}"
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2_0_0() { return cLeftCurlyBracketKeyword_1_2_0_0; }

		//caseList=ListCase
		public Assignment getCaseListAssignment_1_2_0_1() { return cCaseListAssignment_1_2_0_1; }

		//ListCase
		public RuleCall getCaseListListCaseParserRuleCall_1_2_0_1_0() { return cCaseListListCaseParserRuleCall_1_2_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2_0_2() { return cRightCurlyBracketKeyword_1_2_0_2; }

		//"[" expList=ListExp "]"
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_1_0() { return cLeftSquareBracketKeyword_1_2_1_0; }

		//expList=ListExp
		public Assignment getExpListAssignment_1_2_1_1() { return cExpListAssignment_1_2_1_1; }

		//ListExp
		public RuleCall getExpListListExpParserRuleCall_1_2_1_1_0() { return cExpListListExpParserRuleCall_1_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_1_2() { return cRightSquareBracketKeyword_1_2_1_2; }

		//args+=Exp5*
		public Assignment getArgsAssignment_1_3() { return cArgsAssignment_1_3; }

		//Exp5
		public RuleCall getArgsExp5ParserRuleCall_1_3_0() { return cArgsExp5ParserRuleCall_1_3_0; }

		//"case" caseOf=Exp "of" "{" caseList=ListCase "}" args+=Exp5*
		public Group getGroup_2() { return cGroup_2; }

		//"case"
		public Keyword getCaseKeyword_2_0() { return cCaseKeyword_2_0; }

		//caseOf=Exp
		public Assignment getCaseOfAssignment_2_1() { return cCaseOfAssignment_2_1; }

		//Exp
		public RuleCall getCaseOfExpParserRuleCall_2_1_0() { return cCaseOfExpParserRuleCall_2_1_0; }

		//"of"
		public Keyword getOfKeyword_2_2() { return cOfKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_3() { return cLeftCurlyBracketKeyword_2_3; }

		//caseList=ListCase
		public Assignment getCaseListAssignment_2_4() { return cCaseListAssignment_2_4; }

		//ListCase
		public RuleCall getCaseListListCaseParserRuleCall_2_4_0() { return cCaseListListCaseParserRuleCall_2_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_5() { return cRightCurlyBracketKeyword_2_5; }

		//args+=Exp5*
		public Assignment getArgsAssignment_2_6() { return cArgsAssignment_2_6; }

		//Exp5
		public RuleCall getArgsExp5ParserRuleCall_2_6_0() { return cArgsExp5ParserRuleCall_2_6_0; }

		//"variants" "{" expList=ListExp "}" args+=Exp5*
		public Group getGroup_3() { return cGroup_3; }

		//"variants"
		public Keyword getVariantsKeyword_3_0() { return cVariantsKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//expList=ListExp
		public Assignment getExpListAssignment_3_2() { return cExpListAssignment_3_2; }

		//ListExp
		public RuleCall getExpListListExpParserRuleCall_3_2_0() { return cExpListListExpParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//args+=Exp5*
		public Assignment getArgsAssignment_3_4() { return cArgsAssignment_3_4; }

		//Exp5
		public RuleCall getArgsExp5ParserRuleCall_3_4_0() { return cArgsExp5ParserRuleCall_3_4_0; }

		//"pre" "{" caseList=ListCase "}" args+=Exp5*
		public Group getGroup_4() { return cGroup_4; }

		//"pre"
		public Keyword getPreKeyword_4_0() { return cPreKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//caseList=ListCase
		public Assignment getCaseListAssignment_4_2() { return cCaseListAssignment_4_2; }

		//ListCase
		public RuleCall getCaseListListCaseParserRuleCall_4_2_0() { return cCaseListListCaseParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }

		//args+=Exp5*
		public Assignment getArgsAssignment_4_4() { return cArgsAssignment_4_4; }

		//Exp5
		public RuleCall getArgsExp5ParserRuleCall_4_4_0() { return cArgsExp5ParserRuleCall_4_4_0; }

		//"lincat" name=[Ident] args+=Exp5*
		public Group getGroup_5() { return cGroup_5; }

		//"lincat"
		public Keyword getLincatKeyword_5_0() { return cLincatKeyword_5_0; }

		//name=[Ident]
		public Assignment getNameAssignment_5_1() { return cNameAssignment_5_1; }

		//[Ident]
		public CrossReference getNameIdentCrossReference_5_1_0() { return cNameIdentCrossReference_5_1_0; }

		//ID
		public RuleCall getNameIdentIDTerminalRuleCall_5_1_0_1() { return cNameIdentIDTerminalRuleCall_5_1_0_1; }

		//args+=Exp5*
		public Assignment getArgsAssignment_5_2() { return cArgsAssignment_5_2; }

		//Exp5
		public RuleCall getArgsExp5ParserRuleCall_5_2_0() { return cArgsExp5ParserRuleCall_5_2_0; }

		//"lin" name=[Ident] inner=Exp6 args+=Exp5*
		public Group getGroup_6() { return cGroup_6; }

		//"lin"
		public Keyword getLinKeyword_6_0() { return cLinKeyword_6_0; }

		//name=[Ident]
		public Assignment getNameAssignment_6_1() { return cNameAssignment_6_1; }

		//[Ident]
		public CrossReference getNameIdentCrossReference_6_1_0() { return cNameIdentCrossReference_6_1_0; }

		//ID
		public RuleCall getNameIdentIDTerminalRuleCall_6_1_0_1() { return cNameIdentIDTerminalRuleCall_6_1_0_1; }

		//inner=Exp6
		public Assignment getInnerAssignment_6_2() { return cInnerAssignment_6_2; }

		//Exp6
		public RuleCall getInnerExp6ParserRuleCall_6_2_0() { return cInnerExp6ParserRuleCall_6_2_0; }

		//args+=Exp5*
		public Assignment getArgsAssignment_6_3() { return cArgsAssignment_6_3; }

		//Exp5
		public RuleCall getArgsExp5ParserRuleCall_6_3_0() { return cArgsExp5ParserRuleCall_6_3_0; }

		//v=Exp5 args+=Exp5*
		public Group getGroup_7() { return cGroup_7; }

		//v=Exp5
		public Assignment getVAssignment_7_0() { return cVAssignment_7_0; }

		//Exp5
		public RuleCall getVExp5ParserRuleCall_7_0_0() { return cVExp5ParserRuleCall_7_0_0; }

		//args+=Exp5*
		public Assignment getArgsAssignment_7_1() { return cArgsAssignment_7_1; }

		//Exp5
		public RuleCall getArgsExp5ParserRuleCall_7_1_0() { return cArgsExp5ParserRuleCall_7_1_0; }
	}

	public class Exp3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cVAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cVExp4ParserRuleCall_0_0_0 = (RuleCall)cVAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1_0_0 = (Keyword)cAlternatives_0_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_0_1_0_1 = (Keyword)cAlternatives_0_1_0.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_0_1_0_2 = (Keyword)cAlternatives_0_1_0.eContents().get(2);
		private final Assignment cEAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cEExp4ParserRuleCall_0_1_1_0 = (RuleCall)cEAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cNumberSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVPatt2ParserRuleCall_1_1_0 = (RuleCall)cVAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_1_2_0_2 = (Keyword)cAlternatives_1_2_0.eContents().get(2);
		private final Assignment cEAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cEExp4ParserRuleCall_1_2_1_0 = (RuleCall)cEAssignment_1_2_1.eContents().get(0);
		
		//Exp3: //	  e1=Exp3 '!' e2=Exp4
		////	| e1=Exp3 '*' e2=Exp4
		////	| e1=Exp3 '**' e2=Exp4
		////	| '#' Patt2
		////	| Exp4
		//	v=Exp4 (("!" | "*" | "**") e+=Exp4)* | "#" v=Patt2 (("!" | "*" | "**") e+=Exp4)*;
		public ParserRule getRule() { return rule; }

		////	  e1=Exp3 '!' e2=Exp4
		////	| e1=Exp3 '*' e2=Exp4
		////	| e1=Exp3 '**' e2=Exp4
		////	| '#' Patt2
		////	| Exp4
		//v=Exp4 (("!" | "*" | "**") e+=Exp4)* | "#" v=Patt2 (("!" | "*" | "**") e+=Exp4)*
		public Alternatives getAlternatives() { return cAlternatives; }

		////	  e1=Exp3 '!' e2=Exp4
		////	| e1=Exp3 '*' e2=Exp4
		////	| e1=Exp3 '**' e2=Exp4
		////	| '#' Patt2
		////	| Exp4
		//v=Exp4 (("!" | "*" | "**") e+=Exp4)*
		public Group getGroup_0() { return cGroup_0; }

		////	  e1=Exp3 '!' e2=Exp4
		////	| e1=Exp3 '*' e2=Exp4
		////	| e1=Exp3 '**' e2=Exp4
		////	| '#' Patt2
		////	| Exp4
		//v=Exp4
		public Assignment getVAssignment_0_0() { return cVAssignment_0_0; }

		//Exp4
		public RuleCall getVExp4ParserRuleCall_0_0_0() { return cVExp4ParserRuleCall_0_0_0; }

		//(("!" | "*" | "**") e+=Exp4)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"!" | "*" | "**"
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_1_0_0() { return cExclamationMarkKeyword_0_1_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_0_1_0_1() { return cAsteriskKeyword_0_1_0_1; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_0_1_0_2() { return cAsteriskAsteriskKeyword_0_1_0_2; }

		//e+=Exp4
		public Assignment getEAssignment_0_1_1() { return cEAssignment_0_1_1; }

		//Exp4
		public RuleCall getEExp4ParserRuleCall_0_1_1_0() { return cEExp4ParserRuleCall_0_1_1_0; }

		//"#" v=Patt2 (("!" | "*" | "**") e+=Exp4)*
		public Group getGroup_1() { return cGroup_1; }

		//"#"
		public Keyword getNumberSignKeyword_1_0() { return cNumberSignKeyword_1_0; }

		//v=Patt2
		public Assignment getVAssignment_1_1() { return cVAssignment_1_1; }

		//Patt2
		public RuleCall getVPatt2ParserRuleCall_1_1_0() { return cVPatt2ParserRuleCall_1_1_0; }

		//(("!" | "*" | "**") e+=Exp4)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"!" | "*" | "**"
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_2_0_0() { return cExclamationMarkKeyword_1_2_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_2_0_1() { return cAsteriskKeyword_1_2_0_1; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_2_0_2() { return cAsteriskAsteriskKeyword_1_2_0_2; }

		//e+=Exp4
		public Assignment getEAssignment_1_2_1() { return cEAssignment_1_2_1; }

		//Exp4
		public RuleCall getEExp4ParserRuleCall_1_2_1_0() { return cEExp4ParserRuleCall_1_2_1_0; }
	}

	public class Exp2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVExp3ParserRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEExp2ParserRuleCall_1_1_0 = (RuleCall)cEAssignment_1_1.eContents().get(0);
		
		//Exp2: //	  e1=Exp3 '+' e2=Exp2
		////	| Exp3
		//	v=Exp3 ("+" e+=Exp2)?;
		public ParserRule getRule() { return rule; }

		////	  e1=Exp3 '+' e2=Exp2
		////	| Exp3
		//v=Exp3 ("+" e+=Exp2)?
		public Group getGroup() { return cGroup; }

		////	  e1=Exp3 '+' e2=Exp2
		////	| Exp3
		//v=Exp3
		public Assignment getVAssignment_0() { return cVAssignment_0; }

		//Exp3
		public RuleCall getVExp3ParserRuleCall_0_0() { return cVExp3ParserRuleCall_0_0; }

		//("+" e+=Exp2)?
		public Group getGroup_1() { return cGroup_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_0() { return cPlusSignKeyword_1_0; }

		//e+=Exp2
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }

		//Exp2
		public RuleCall getEExp2ParserRuleCall_1_1_0() { return cEExp2ParserRuleCall_1_1_0; }
	}

	public class Exp1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVExp2ParserRuleCall_0_0 = (RuleCall)cVAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEExp1ParserRuleCall_1_1_0 = (RuleCall)cEAssignment_1_1.eContents().get(0);
		
		//Exp1: //	  e1=Exp2 '++' e2=Exp1
		////	| Exp2
		//	v=Exp2 ("++" e+=Exp1)?;
		public ParserRule getRule() { return rule; }

		////	  e1=Exp2 '++' e2=Exp1
		////	| Exp2
		//v=Exp2 ("++" e+=Exp1)?
		public Group getGroup() { return cGroup; }

		////	  e1=Exp2 '++' e2=Exp1
		////	| Exp2
		//v=Exp2
		public Assignment getVAssignment_0() { return cVAssignment_0; }

		//Exp2
		public RuleCall getVExp2ParserRuleCall_0_0() { return cVExp2ParserRuleCall_0_0; }

		//("++" e+=Exp1)?
		public Group getGroup_1() { return cGroup_1; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }

		//e+=Exp1
		public Assignment getEAssignment_1_1() { return cEAssignment_1_1; }

		//Exp1
		public RuleCall getEExp1ParserRuleCall_1_1_0() { return cEExp1ParserRuleCall_1_1_0; }
	}

	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cReverseSolidusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cBindListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBindListListBindParserRuleCall_0_1_0 = (RuleCall)cBindListAssignment_0_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cVAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cVExpParserRuleCall_0_3_0 = (RuleCall)cVAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cVerticalLineKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cEAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cEExp1ParserRuleCall_0_4_1_0 = (RuleCall)cEAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cReverseSolidusKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cReverseSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBindListAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cBindListListBindParserRuleCall_1_2_0 = (RuleCall)cBindListAssignment_1_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cVAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cVExpParserRuleCall_1_4_0 = (RuleCall)cVAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cVerticalLineKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cEAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cEExp1ParserRuleCall_1_5_1_0 = (RuleCall)cEAssignment_1_5_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLetKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cDefListAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDefListListLocDefParserRuleCall_2_2_0 = (RuleCall)cDefListAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cInKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cVAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cVExpParserRuleCall_2_5_0 = (RuleCall)cVAssignment_2_5.eContents().get(0);
		private final Group cGroup_2_6 = (Group)cGroup_2.eContents().get(6);
		private final Keyword cVerticalLineKeyword_2_6_0 = (Keyword)cGroup_2_6.eContents().get(0);
		private final Assignment cEAssignment_2_6_1 = (Assignment)cGroup_2_6.eContents().get(1);
		private final RuleCall cEExp1ParserRuleCall_2_6_1_0 = (RuleCall)cEAssignment_2_6_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefListListLocDefParserRuleCall_3_1_0 = (RuleCall)cDefListAssignment_3_1.eContents().get(0);
		private final Keyword cInKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cVAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cVExpParserRuleCall_3_3_0 = (RuleCall)cVAssignment_3_3.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cVerticalLineKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cEAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cEExp1ParserRuleCall_3_4_1_0 = (RuleCall)cEAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cBindListAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cBindListListBindParserRuleCall_4_1_0 = (RuleCall)cBindListAssignment_4_1.eContents().get(0);
		private final Keyword cColonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cTypeAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_4_3_0 = (RuleCall)cTypeAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Assignment cVAssignment_4_6 = (Assignment)cGroup_4.eContents().get(6);
		private final RuleCall cVExpParserRuleCall_4_6_0 = (RuleCall)cVAssignment_4_6.eContents().get(0);
		private final Group cGroup_4_7 = (Group)cGroup_4.eContents().get(7);
		private final Keyword cVerticalLineKeyword_4_7_0 = (Keyword)cGroup_4_7.eContents().get(0);
		private final Assignment cEAssignment_4_7_1 = (Assignment)cGroup_4_7.eContents().get(1);
		private final RuleCall cEExp1ParserRuleCall_4_7_1_0 = (RuleCall)cEAssignment_4_7_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cVAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cVExp4ParserRuleCall_5_0_0 = (RuleCall)cVAssignment_5_0.eContents().get(0);
		private final Alternatives cAlternatives_5_1 = (Alternatives)cGroup_5.eContents().get(1);
		private final Group cGroup_5_1_0 = (Group)cAlternatives_5_1.eContents().get(0);
		private final Group cGroup_5_1_0_0 = (Group)cGroup_5_1_0.eContents().get(0);
		private final Alternatives cAlternatives_5_1_0_0_0 = (Alternatives)cGroup_5_1_0_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_5_1_0_0_0_0 = (Keyword)cAlternatives_5_1_0_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_5_1_0_0_0_1 = (Keyword)cAlternatives_5_1_0_0_0.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_5_1_0_0_0_2 = (Keyword)cAlternatives_5_1_0_0_0.eContents().get(2);
		private final Assignment cEAssignment_5_1_0_0_1 = (Assignment)cGroup_5_1_0_0.eContents().get(1);
		private final RuleCall cEExp4ParserRuleCall_5_1_0_0_1_0 = (RuleCall)cEAssignment_5_1_0_0_1.eContents().get(0);
		private final Alternatives cAlternatives_5_1_0_1 = (Alternatives)cGroup_5_1_0.eContents().get(1);
		private final Group cGroup_5_1_0_1_0 = (Group)cAlternatives_5_1_0_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5_1_0_1_0_0 = (Keyword)cGroup_5_1_0_1_0.eContents().get(0);
		private final Assignment cEAssignment_5_1_0_1_0_1 = (Assignment)cGroup_5_1_0_1_0.eContents().get(1);
		private final RuleCall cEExpParserRuleCall_5_1_0_1_0_1_0 = (RuleCall)cEAssignment_5_1_0_1_0_1.eContents().get(0);
		private final Group cGroup_5_1_0_1_1 = (Group)cAlternatives_5_1_0_1.eContents().get(1);
		private final Keyword cWhereKeyword_5_1_0_1_1_0 = (Keyword)cGroup_5_1_0_1_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1_0_1_1_1 = (Keyword)cGroup_5_1_0_1_1.eContents().get(1);
		private final Assignment cDefListAssignment_5_1_0_1_1_2 = (Assignment)cGroup_5_1_0_1_1.eContents().get(2);
		private final RuleCall cDefListListLocDefParserRuleCall_5_1_0_1_1_2_0 = (RuleCall)cDefListAssignment_5_1_0_1_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_1_0_1_1_3 = (Keyword)cGroup_5_1_0_1_1.eContents().get(3);
		private final Group cGroup_5_1_0_1_2 = (Group)cAlternatives_5_1_0_1.eContents().get(2);
		private final Group cGroup_5_1_0_1_2_0 = (Group)cGroup_5_1_0_1_2.eContents().get(0);
		private final Keyword cPlusSignKeyword_5_1_0_1_2_0_0 = (Keyword)cGroup_5_1_0_1_2_0.eContents().get(0);
		private final Assignment cEAssignment_5_1_0_1_2_0_1 = (Assignment)cGroup_5_1_0_1_2_0.eContents().get(1);
		private final RuleCall cEExp2ParserRuleCall_5_1_0_1_2_0_1_0 = (RuleCall)cEAssignment_5_1_0_1_2_0_1.eContents().get(0);
		private final Group cGroup_5_1_0_1_2_1 = (Group)cGroup_5_1_0_1_2.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_5_1_0_1_2_1_0 = (Keyword)cGroup_5_1_0_1_2_1.eContents().get(0);
		private final Assignment cEAssignment_5_1_0_1_2_1_1 = (Assignment)cGroup_5_1_0_1_2_1.eContents().get(1);
		private final RuleCall cEExp1ParserRuleCall_5_1_0_1_2_1_1_0 = (RuleCall)cEAssignment_5_1_0_1_2_1_1.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cAlternatives_5_1.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cEAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cEExpParserRuleCall_5_1_1_1_0 = (RuleCall)cEAssignment_5_1_1_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cVerticalLineKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cEAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cEExp1ParserRuleCall_5_2_1_0 = (RuleCall)cEAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cNumberSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVPatt2ParserRuleCall_6_1_0 = (RuleCall)cVAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Alternatives cAlternatives_6_2_0 = (Alternatives)cGroup_6_2.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_6_2_0_0 = (Keyword)cAlternatives_6_2_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_6_2_0_1 = (Keyword)cAlternatives_6_2_0.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_6_2_0_2 = (Keyword)cAlternatives_6_2_0.eContents().get(2);
		private final Assignment cEAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cEExp4ParserRuleCall_6_2_1_0 = (RuleCall)cEAssignment_6_2_1.eContents().get(0);
		private final Alternatives cAlternatives_6_3 = (Alternatives)cGroup_6.eContents().get(3);
		private final Group cGroup_6_3_0 = (Group)cAlternatives_6_3.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_6_3_0_0 = (Keyword)cGroup_6_3_0.eContents().get(0);
		private final Assignment cEAssignment_6_3_0_1 = (Assignment)cGroup_6_3_0.eContents().get(1);
		private final RuleCall cEExpParserRuleCall_6_3_0_1_0 = (RuleCall)cEAssignment_6_3_0_1.eContents().get(0);
		private final Group cGroup_6_3_1 = (Group)cAlternatives_6_3.eContents().get(1);
		private final Keyword cWhereKeyword_6_3_1_0 = (Keyword)cGroup_6_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_3_1_1 = (Keyword)cGroup_6_3_1.eContents().get(1);
		private final Assignment cDefListAssignment_6_3_1_2 = (Assignment)cGroup_6_3_1.eContents().get(2);
		private final RuleCall cDefListListLocDefParserRuleCall_6_3_1_2_0 = (RuleCall)cDefListAssignment_6_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3_1_3 = (Keyword)cGroup_6_3_1.eContents().get(3);
		private final Group cGroup_6_3_2 = (Group)cAlternatives_6_3.eContents().get(2);
		private final Group cGroup_6_3_2_0 = (Group)cGroup_6_3_2.eContents().get(0);
		private final Keyword cPlusSignKeyword_6_3_2_0_0 = (Keyword)cGroup_6_3_2_0.eContents().get(0);
		private final Assignment cEAssignment_6_3_2_0_1 = (Assignment)cGroup_6_3_2_0.eContents().get(1);
		private final RuleCall cEExp2ParserRuleCall_6_3_2_0_1_0 = (RuleCall)cEAssignment_6_3_2_0_1.eContents().get(0);
		private final Group cGroup_6_3_2_1 = (Group)cGroup_6_3_2.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_6_3_2_1_0 = (Keyword)cGroup_6_3_2_1.eContents().get(0);
		private final Assignment cEAssignment_6_3_2_1_1 = (Assignment)cGroup_6_3_2_1.eContents().get(1);
		private final RuleCall cEExp1ParserRuleCall_6_3_2_1_1_0 = (RuleCall)cEAssignment_6_3_2_1_1.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cGroup_6.eContents().get(4);
		private final Keyword cVerticalLineKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Assignment cEAssignment_6_4_1 = (Assignment)cGroup_6_4.eContents().get(1);
		private final RuleCall cEExp1ParserRuleCall_6_4_1_0 = (RuleCall)cEAssignment_6_4_1.eContents().get(0);
		
		/// *
		// * The following is an amalgamation of:
		// *  Exp3 => Exp
		// * 	Exp3 where { ListLocDef }
		// * 	Exp1
		// *
		//	| e+=Exp3
		//		(
		//			  '=>' e+=Exp
		//			| 'where' '{' e+=ListLocDef '}'
		//			| ('+' e+=Exp2)? ('++' e+=Exp1)?
		//		)
		//		(=> '|' e+=Exp1)*
		//
		// * / //-	| e+=Exp '|' e+=Exp1
		////-	| e+=Exp1										(=> '|' e+=Exp1)*
		//Exp:
		//	"\\" bindList=ListBind "->" v=Exp ("|" e+=Exp1)* //-	| d+=Decl '->' e+=Exp							(=> '|' e+=Exp1)*
		//	//-	| e+=Exp3 '=>' e+=Exp							(=> '|' e+=Exp1)*
		//	//-	| e+=Exp3 'where' '{' e+=ListLocDef '}'			(=> '|' e+=Exp1)*
		//
		//	/ *
		// * The following is (hopefully) an amalgamation of:
		// *	Decl -> Exp
		// *  Exp3 => Exp
		// * 	Exp3 where { ListLocDef }
		// * 	Exp1
		// * / | "\\" "\\" bindList=ListBind "=>" v=Exp ("|" e+=Exp1)* | "let" "{" defList=ListLocDef "}" "in" v=Exp ("|" e+=Exp1)*
		//	| "let" defList=ListLocDef "in" v=Exp ("|" e+=Exp1)* | "(" bindList=ListBind ":" type=Exp ")" "->" v=Exp ("|"
		//	e+=Exp1)* | v=Exp4 ((("!" | "*" | "**") e+=Exp4)* // That makes Exp3
		//	("=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?) | "->" e+=Exp) ("|" e+=Exp1)* | "#"
		//	v=Patt2 (("!" | "*" | "**") e+=Exp4)* // That makes Exp3
		//	("=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?) ("|" e+=Exp1)*;
		public ParserRule getRule() { return rule; }

		//"\\" bindList=ListBind "->" v=Exp ("|" e+=Exp1)* //-	| d+=Decl '->' e+=Exp							(=> '|' e+=Exp1)*
		////-	| e+=Exp3 '=>' e+=Exp							(=> '|' e+=Exp1)*
		////-	| e+=Exp3 'where' '{' e+=ListLocDef '}'			(=> '|' e+=Exp1)*
		/// *
		// * The following is (hopefully) an amalgamation of:
		// *	Decl -> Exp
		// *  Exp3 => Exp
		// * 	Exp3 where { ListLocDef }
		// * 	Exp1
		// * / | "\\" "\\" bindList=ListBind "=>" v=Exp ("|" e+=Exp1)* | "let" "{" defList=ListLocDef "}" "in" v=Exp ("|" e+=Exp1)*
		//| "let" defList=ListLocDef "in" v=Exp ("|" e+=Exp1)* | "(" bindList=ListBind ":" type=Exp ")" "->" v=Exp ("|" e+=Exp1)*
		//| v=Exp4 ((("!" | "*" | "**") e+=Exp4)* // That makes Exp3
		//("=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?) | "->" e+=Exp) ("|" e+=Exp1)* | "#"
		//v=Patt2 (("!" | "*" | "**") e+=Exp4)* // That makes Exp3
		//("=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?) ("|" e+=Exp1)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"\\" bindList=ListBind "->" v=Exp ("|" e+=Exp1)*
		public Group getGroup_0() { return cGroup_0; }

		//"\\"
		public Keyword getReverseSolidusKeyword_0_0() { return cReverseSolidusKeyword_0_0; }

		//bindList=ListBind
		public Assignment getBindListAssignment_0_1() { return cBindListAssignment_0_1; }

		//ListBind
		public RuleCall getBindListListBindParserRuleCall_0_1_0() { return cBindListListBindParserRuleCall_0_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_2() { return cHyphenMinusGreaterThanSignKeyword_0_2; }

		//v=Exp
		public Assignment getVAssignment_0_3() { return cVAssignment_0_3; }

		//Exp
		public RuleCall getVExpParserRuleCall_0_3_0() { return cVExpParserRuleCall_0_3_0; }

		//(=> "|" e+=Exp1)*
		public Group getGroup_0_4() { return cGroup_0_4; }

		//=> "|"
		public Keyword getVerticalLineKeyword_0_4_0() { return cVerticalLineKeyword_0_4_0; }

		//e+=Exp1
		public Assignment getEAssignment_0_4_1() { return cEAssignment_0_4_1; }

		//Exp1
		public RuleCall getEExp1ParserRuleCall_0_4_1_0() { return cEExp1ParserRuleCall_0_4_1_0; }

		//"\\" "\\" bindList=ListBind "=>" v=Exp ("|" e+=Exp1)*
		public Group getGroup_1() { return cGroup_1; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_0() { return cReverseSolidusKeyword_1_0; }

		//"\\"
		public Keyword getReverseSolidusKeyword_1_1() { return cReverseSolidusKeyword_1_1; }

		//bindList=ListBind
		public Assignment getBindListAssignment_1_2() { return cBindListAssignment_1_2; }

		//ListBind
		public RuleCall getBindListListBindParserRuleCall_1_2_0() { return cBindListListBindParserRuleCall_1_2_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_3() { return cEqualsSignGreaterThanSignKeyword_1_3; }

		//v=Exp
		public Assignment getVAssignment_1_4() { return cVAssignment_1_4; }

		//Exp
		public RuleCall getVExpParserRuleCall_1_4_0() { return cVExpParserRuleCall_1_4_0; }

		//(=> "|" e+=Exp1)*
		public Group getGroup_1_5() { return cGroup_1_5; }

		//=> "|"
		public Keyword getVerticalLineKeyword_1_5_0() { return cVerticalLineKeyword_1_5_0; }

		//e+=Exp1
		public Assignment getEAssignment_1_5_1() { return cEAssignment_1_5_1; }

		//Exp1
		public RuleCall getEExp1ParserRuleCall_1_5_1_0() { return cEExp1ParserRuleCall_1_5_1_0; }

		//"let" "{" defList=ListLocDef "}" "in" v=Exp ("|" e+=Exp1)*
		public Group getGroup_2() { return cGroup_2; }

		//"let"
		public Keyword getLetKeyword_2_0() { return cLetKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//defList=ListLocDef
		public Assignment getDefListAssignment_2_2() { return cDefListAssignment_2_2; }

		//ListLocDef
		public RuleCall getDefListListLocDefParserRuleCall_2_2_0() { return cDefListListLocDefParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//"in"
		public Keyword getInKeyword_2_4() { return cInKeyword_2_4; }

		//v=Exp
		public Assignment getVAssignment_2_5() { return cVAssignment_2_5; }

		//Exp
		public RuleCall getVExpParserRuleCall_2_5_0() { return cVExpParserRuleCall_2_5_0; }

		//(=> "|" e+=Exp1)*
		public Group getGroup_2_6() { return cGroup_2_6; }

		//=> "|"
		public Keyword getVerticalLineKeyword_2_6_0() { return cVerticalLineKeyword_2_6_0; }

		//e+=Exp1
		public Assignment getEAssignment_2_6_1() { return cEAssignment_2_6_1; }

		//Exp1
		public RuleCall getEExp1ParserRuleCall_2_6_1_0() { return cEExp1ParserRuleCall_2_6_1_0; }

		//"let" defList=ListLocDef "in" v=Exp ("|" e+=Exp1)*
		public Group getGroup_3() { return cGroup_3; }

		//"let"
		public Keyword getLetKeyword_3_0() { return cLetKeyword_3_0; }

		//defList=ListLocDef
		public Assignment getDefListAssignment_3_1() { return cDefListAssignment_3_1; }

		//ListLocDef
		public RuleCall getDefListListLocDefParserRuleCall_3_1_0() { return cDefListListLocDefParserRuleCall_3_1_0; }

		//"in"
		public Keyword getInKeyword_3_2() { return cInKeyword_3_2; }

		//v=Exp
		public Assignment getVAssignment_3_3() { return cVAssignment_3_3; }

		//Exp
		public RuleCall getVExpParserRuleCall_3_3_0() { return cVExpParserRuleCall_3_3_0; }

		//(=> "|" e+=Exp1)*
		public Group getGroup_3_4() { return cGroup_3_4; }

		//=> "|"
		public Keyword getVerticalLineKeyword_3_4_0() { return cVerticalLineKeyword_3_4_0; }

		//e+=Exp1
		public Assignment getEAssignment_3_4_1() { return cEAssignment_3_4_1; }

		//Exp1
		public RuleCall getEExp1ParserRuleCall_3_4_1_0() { return cEExp1ParserRuleCall_3_4_1_0; }

		//"(" bindList=ListBind ":" type=Exp ")" "->" v=Exp ("|" e+=Exp1)*
		public Group getGroup_4() { return cGroup_4; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }

		//bindList=ListBind
		public Assignment getBindListAssignment_4_1() { return cBindListAssignment_4_1; }

		//ListBind
		public RuleCall getBindListListBindParserRuleCall_4_1_0() { return cBindListListBindParserRuleCall_4_1_0; }

		//":"
		public Keyword getColonKeyword_4_2() { return cColonKeyword_4_2; }

		//type=Exp
		public Assignment getTypeAssignment_4_3() { return cTypeAssignment_4_3; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_4_3_0() { return cTypeExpParserRuleCall_4_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_5() { return cHyphenMinusGreaterThanSignKeyword_4_5; }

		//v=Exp
		public Assignment getVAssignment_4_6() { return cVAssignment_4_6; }

		//Exp
		public RuleCall getVExpParserRuleCall_4_6_0() { return cVExpParserRuleCall_4_6_0; }

		//(=> "|" e+=Exp1)*
		public Group getGroup_4_7() { return cGroup_4_7; }

		//=> "|"
		public Keyword getVerticalLineKeyword_4_7_0() { return cVerticalLineKeyword_4_7_0; }

		//e+=Exp1
		public Assignment getEAssignment_4_7_1() { return cEAssignment_4_7_1; }

		//Exp1
		public RuleCall getEExp1ParserRuleCall_4_7_1_0() { return cEExp1ParserRuleCall_4_7_1_0; }

		//v=Exp4 ((("!" | "*" | "**") e+=Exp4)* // That makes Exp3
		//("=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?) | "->" e+=Exp) ("|" e+=Exp1)*
		public Group getGroup_5() { return cGroup_5; }

		//v=Exp4
		public Assignment getVAssignment_5_0() { return cVAssignment_5_0; }

		//Exp4
		public RuleCall getVExp4ParserRuleCall_5_0_0() { return cVExp4ParserRuleCall_5_0_0; }

		//(("!" | "*" | "**") e+=Exp4)* // That makes Exp3
		//("=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?) | "->" e+=Exp
		public Alternatives getAlternatives_5_1() { return cAlternatives_5_1; }

		//(("!" | "*" | "**") e+=Exp4)* // That makes Exp3
		//("=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?)
		public Group getGroup_5_1_0() { return cGroup_5_1_0; }

		//(("!" | "*" | "**") e+=Exp4)*
		public Group getGroup_5_1_0_0() { return cGroup_5_1_0_0; }

		//"!" | "*" | "**"
		public Alternatives getAlternatives_5_1_0_0_0() { return cAlternatives_5_1_0_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_5_1_0_0_0_0() { return cExclamationMarkKeyword_5_1_0_0_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_5_1_0_0_0_1() { return cAsteriskKeyword_5_1_0_0_0_1; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_5_1_0_0_0_2() { return cAsteriskAsteriskKeyword_5_1_0_0_0_2; }

		//e+=Exp4
		public Assignment getEAssignment_5_1_0_0_1() { return cEAssignment_5_1_0_0_1; }

		//Exp4
		public RuleCall getEExp4ParserRuleCall_5_1_0_0_1_0() { return cEExp4ParserRuleCall_5_1_0_0_1_0; }

		//"=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?
		public Alternatives getAlternatives_5_1_0_1() { return cAlternatives_5_1_0_1; }

		//"=>" e+=Exp
		public Group getGroup_5_1_0_1_0() { return cGroup_5_1_0_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_5_1_0_1_0_0() { return cEqualsSignGreaterThanSignKeyword_5_1_0_1_0_0; }

		//e+=Exp
		public Assignment getEAssignment_5_1_0_1_0_1() { return cEAssignment_5_1_0_1_0_1; }

		//Exp
		public RuleCall getEExpParserRuleCall_5_1_0_1_0_1_0() { return cEExpParserRuleCall_5_1_0_1_0_1_0; }

		//"where" "{" defList=ListLocDef "}"
		public Group getGroup_5_1_0_1_1() { return cGroup_5_1_0_1_1; }

		//"where"
		public Keyword getWhereKeyword_5_1_0_1_1_0() { return cWhereKeyword_5_1_0_1_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1_0_1_1_1() { return cLeftCurlyBracketKeyword_5_1_0_1_1_1; }

		//defList=ListLocDef
		public Assignment getDefListAssignment_5_1_0_1_1_2() { return cDefListAssignment_5_1_0_1_1_2; }

		//ListLocDef
		public RuleCall getDefListListLocDefParserRuleCall_5_1_0_1_1_2_0() { return cDefListListLocDefParserRuleCall_5_1_0_1_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_1_0_1_1_3() { return cRightCurlyBracketKeyword_5_1_0_1_1_3; }

		//("+" e+=Exp2)? ("++" e+=Exp1)?
		public Group getGroup_5_1_0_1_2() { return cGroup_5_1_0_1_2; }

		//("+" e+=Exp2)?
		public Group getGroup_5_1_0_1_2_0() { return cGroup_5_1_0_1_2_0; }

		//"+"
		public Keyword getPlusSignKeyword_5_1_0_1_2_0_0() { return cPlusSignKeyword_5_1_0_1_2_0_0; }

		//e+=Exp2
		public Assignment getEAssignment_5_1_0_1_2_0_1() { return cEAssignment_5_1_0_1_2_0_1; }

		//Exp2
		public RuleCall getEExp2ParserRuleCall_5_1_0_1_2_0_1_0() { return cEExp2ParserRuleCall_5_1_0_1_2_0_1_0; }

		//("++" e+=Exp1)?
		public Group getGroup_5_1_0_1_2_1() { return cGroup_5_1_0_1_2_1; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_5_1_0_1_2_1_0() { return cPlusSignPlusSignKeyword_5_1_0_1_2_1_0; }

		//e+=Exp1
		public Assignment getEAssignment_5_1_0_1_2_1_1() { return cEAssignment_5_1_0_1_2_1_1; }

		//Exp1
		public RuleCall getEExp1ParserRuleCall_5_1_0_1_2_1_1_0() { return cEExp1ParserRuleCall_5_1_0_1_2_1_1_0; }

		//"->" e+=Exp
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_5_1_1_0() { return cHyphenMinusGreaterThanSignKeyword_5_1_1_0; }

		//e+=Exp
		public Assignment getEAssignment_5_1_1_1() { return cEAssignment_5_1_1_1; }

		//Exp
		public RuleCall getEExpParserRuleCall_5_1_1_1_0() { return cEExpParserRuleCall_5_1_1_1_0; }

		//(=> "|" e+=Exp1)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//=> "|"
		public Keyword getVerticalLineKeyword_5_2_0() { return cVerticalLineKeyword_5_2_0; }

		//e+=Exp1
		public Assignment getEAssignment_5_2_1() { return cEAssignment_5_2_1; }

		//Exp1
		public RuleCall getEExp1ParserRuleCall_5_2_1_0() { return cEExp1ParserRuleCall_5_2_1_0; }

		//"#" v=Patt2 (("!" | "*" | "**") e+=Exp4)* // That makes Exp3
		//("=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?) ("|" e+=Exp1)*
		public Group getGroup_6() { return cGroup_6; }

		//"#"
		public Keyword getNumberSignKeyword_6_0() { return cNumberSignKeyword_6_0; }

		//v=Patt2
		public Assignment getVAssignment_6_1() { return cVAssignment_6_1; }

		//Patt2
		public RuleCall getVPatt2ParserRuleCall_6_1_0() { return cVPatt2ParserRuleCall_6_1_0; }

		//(("!" | "*" | "**") e+=Exp4)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//"!" | "*" | "**"
		public Alternatives getAlternatives_6_2_0() { return cAlternatives_6_2_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_6_2_0_0() { return cExclamationMarkKeyword_6_2_0_0; }

		//"*"
		public Keyword getAsteriskKeyword_6_2_0_1() { return cAsteriskKeyword_6_2_0_1; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_6_2_0_2() { return cAsteriskAsteriskKeyword_6_2_0_2; }

		//e+=Exp4
		public Assignment getEAssignment_6_2_1() { return cEAssignment_6_2_1; }

		//Exp4
		public RuleCall getEExp4ParserRuleCall_6_2_1_0() { return cEExp4ParserRuleCall_6_2_1_0; }

		//"=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?
		public Alternatives getAlternatives_6_3() { return cAlternatives_6_3; }

		//"=>" e+=Exp
		public Group getGroup_6_3_0() { return cGroup_6_3_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_6_3_0_0() { return cEqualsSignGreaterThanSignKeyword_6_3_0_0; }

		//e+=Exp
		public Assignment getEAssignment_6_3_0_1() { return cEAssignment_6_3_0_1; }

		//Exp
		public RuleCall getEExpParserRuleCall_6_3_0_1_0() { return cEExpParserRuleCall_6_3_0_1_0; }

		//"where" "{" defList=ListLocDef "}"
		public Group getGroup_6_3_1() { return cGroup_6_3_1; }

		//"where"
		public Keyword getWhereKeyword_6_3_1_0() { return cWhereKeyword_6_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_3_1_1() { return cLeftCurlyBracketKeyword_6_3_1_1; }

		//defList=ListLocDef
		public Assignment getDefListAssignment_6_3_1_2() { return cDefListAssignment_6_3_1_2; }

		//ListLocDef
		public RuleCall getDefListListLocDefParserRuleCall_6_3_1_2_0() { return cDefListListLocDefParserRuleCall_6_3_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3_1_3() { return cRightCurlyBracketKeyword_6_3_1_3; }

		//("+" e+=Exp2)? ("++" e+=Exp1)?
		public Group getGroup_6_3_2() { return cGroup_6_3_2; }

		//("+" e+=Exp2)?
		public Group getGroup_6_3_2_0() { return cGroup_6_3_2_0; }

		//"+"
		public Keyword getPlusSignKeyword_6_3_2_0_0() { return cPlusSignKeyword_6_3_2_0_0; }

		//e+=Exp2
		public Assignment getEAssignment_6_3_2_0_1() { return cEAssignment_6_3_2_0_1; }

		//Exp2
		public RuleCall getEExp2ParserRuleCall_6_3_2_0_1_0() { return cEExp2ParserRuleCall_6_3_2_0_1_0; }

		//("++" e+=Exp1)?
		public Group getGroup_6_3_2_1() { return cGroup_6_3_2_1; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_6_3_2_1_0() { return cPlusSignPlusSignKeyword_6_3_2_1_0; }

		//e+=Exp1
		public Assignment getEAssignment_6_3_2_1_1() { return cEAssignment_6_3_2_1_1; }

		//Exp1
		public RuleCall getEExp1ParserRuleCall_6_3_2_1_1_0() { return cEExp1ParserRuleCall_6_3_2_1_1_0; }

		//(=> "|" e+=Exp1)*
		public Group getGroup_6_4() { return cGroup_6_4; }

		//=> "|"
		public Keyword getVerticalLineKeyword_6_4_0() { return cVerticalLineKeyword_6_4_0; }

		//e+=Exp1
		public Assignment getEAssignment_6_4_1() { return cEAssignment_6_4_1; }

		//Exp1
		public RuleCall getEExp1ParserRuleCall_6_4_1_0() { return cEExp1ParserRuleCall_6_4_1_0; }
	}

	public class ListExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsExpParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionsExpParserRuleCall_1_1_1_0 = (RuleCall)cExpressionsAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ListExp: // ε | Exp | Exp ';' ListExp
		//	{ListExp} (expressions+=Exp (";" expressions+=Exp)* ";"?)?;
		public ParserRule getRule() { return rule; }

		//// ε | Exp | Exp ';' ListExp
		//{ListExp} (expressions+=Exp (";" expressions+=Exp)* ";"?)?
		public Group getGroup() { return cGroup; }

		//// ε | Exp | Exp ';' ListExp
		//{ListExp}
		public Action getListExpAction_0() { return cListExpAction_0; }

		//(expressions+=Exp (";" expressions+=Exp)* ";"?)?
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=Exp
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//Exp
		public RuleCall getExpressionsExpParserRuleCall_1_0_0() { return cExpressionsExpParserRuleCall_1_0_0; }

		//(";" expressions+=Exp)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//expressions+=Exp
		public Assignment getExpressionsAssignment_1_1_1() { return cExpressionsAssignment_1_1_1; }

		//Exp
		public RuleCall getExpressionsExpParserRuleCall_1_1_1_0() { return cExpressionsExpParserRuleCall_1_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class ExpsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsExp6ParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		
		//Exps: // ε | Exp6 Exps
		//	{Exps} expressions+=Exp6*;
		public ParserRule getRule() { return rule; }

		//// ε | Exp6 Exps
		//{Exps} expressions+=Exp6*
		public Group getGroup() { return cGroup; }

		//// ε | Exp6 Exps
		//{Exps}
		public Action getExpsAction_0() { return cExpsAction_0; }

		//expressions+=Exp6*
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//Exp6
		public RuleCall getExpressionsExp6ParserRuleCall_1_0() { return cExpressionsExp6ParserRuleCall_1_0; }
	}

	public class Patt2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Patt2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPatt2Action_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword c_Keyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPatt2Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPatt2Action_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cLabelAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cLabelIdentParserRuleCall_2_3_0 = (RuleCall)cLabelAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cPatt2Action_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cIntegerTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cPatt2Action_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cDoubleTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cPatt2Action_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cStringTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cListPattAssParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cLessThanSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cListPattTupleCompParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cPatt2Action_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cNumberSignKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cNameAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cNameIdentParserRuleCall_8_2_0 = (RuleCall)cNameAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cPatt2Action_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cPattParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		
		//Patt2:
		//	{Patt2} "_" | {Patt2} name=Ident | {Patt2} name=Ident "." label=Ident | {Patt2} Integer | {Patt2} Double | {Patt2}
		//	String | "{" ListPattAss "}" | "<" ListPattTupleComp ">" | {Patt2} "#" name=Ident | {Patt2} "?" | "(" Patt ")";
		public ParserRule getRule() { return rule; }

		//{Patt2} "_" | {Patt2} name=Ident | {Patt2} name=Ident "." label=Ident | {Patt2} Integer | {Patt2} Double | {Patt2}
		//String | "{" ListPattAss "}" | "<" ListPattTupleComp ">" | {Patt2} "#" name=Ident | {Patt2} "?" | "(" Patt ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Patt2} "_"
		public Group getGroup_0() { return cGroup_0; }

		//{Patt2}
		public Action getPatt2Action_0_0() { return cPatt2Action_0_0; }

		//"_"
		public Keyword get_Keyword_0_1() { return c_Keyword_0_1; }

		//{Patt2} name=Ident
		public Group getGroup_1() { return cGroup_1; }

		//{Patt2}
		public Action getPatt2Action_1_0() { return cPatt2Action_1_0; }

		//name=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//{Patt2} name=Ident "." label=Ident
		public Group getGroup_2() { return cGroup_2; }

		//{Patt2}
		public Action getPatt2Action_2_0() { return cPatt2Action_2_0; }

		//name=Ident
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_1_0() { return cNameIdentParserRuleCall_2_1_0; }

		//"."
		public Keyword getFullStopKeyword_2_2() { return cFullStopKeyword_2_2; }

		//label=Ident
		public Assignment getLabelAssignment_2_3() { return cLabelAssignment_2_3; }

		//Ident
		public RuleCall getLabelIdentParserRuleCall_2_3_0() { return cLabelIdentParserRuleCall_2_3_0; }

		//{Patt2} Integer
		public Group getGroup_3() { return cGroup_3; }

		//{Patt2}
		public Action getPatt2Action_3_0() { return cPatt2Action_3_0; }

		//Integer
		public RuleCall getIntegerTerminalRuleCall_3_1() { return cIntegerTerminalRuleCall_3_1; }

		//{Patt2} Double
		public Group getGroup_4() { return cGroup_4; }

		//{Patt2}
		public Action getPatt2Action_4_0() { return cPatt2Action_4_0; }

		//Double
		public RuleCall getDoubleTerminalRuleCall_4_1() { return cDoubleTerminalRuleCall_4_1; }

		//{Patt2} String
		public Group getGroup_5() { return cGroup_5; }

		//{Patt2}
		public Action getPatt2Action_5_0() { return cPatt2Action_5_0; }

		//String
		public RuleCall getStringTerminalRuleCall_5_1() { return cStringTerminalRuleCall_5_1; }

		//"{" ListPattAss "}"
		public Group getGroup_6() { return cGroup_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }

		//ListPattAss
		public RuleCall getListPattAssParserRuleCall_6_1() { return cListPattAssParserRuleCall_6_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }

		//"<" ListPattTupleComp ">"
		public Group getGroup_7() { return cGroup_7; }

		//"<"
		public Keyword getLessThanSignKeyword_7_0() { return cLessThanSignKeyword_7_0; }

		//ListPattTupleComp
		public RuleCall getListPattTupleCompParserRuleCall_7_1() { return cListPattTupleCompParserRuleCall_7_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_7_2() { return cGreaterThanSignKeyword_7_2; }

		//{Patt2} "#" name=Ident
		public Group getGroup_8() { return cGroup_8; }

		//{Patt2}
		public Action getPatt2Action_8_0() { return cPatt2Action_8_0; }

		//"#"
		public Keyword getNumberSignKeyword_8_1() { return cNumberSignKeyword_8_1; }

		//name=Ident
		public Assignment getNameAssignment_8_2() { return cNameAssignment_8_2; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_8_2_0() { return cNameIdentParserRuleCall_8_2_0; }

		//{Patt2} "?"
		public Group getGroup_9() { return cGroup_9; }

		//{Patt2}
		public Action getPatt2Action_9_0() { return cPatt2Action_9_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_9_1() { return cQuestionMarkKeyword_9_1; }

		//"(" Patt ")"
		public Group getGroup_10() { return cGroup_10; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_0() { return cLeftParenthesisKeyword_10_0; }

		//Patt
		public RuleCall getPattParserRuleCall_10_1() { return cPattParserRuleCall_10_1; }

		//")"
		public Keyword getRightParenthesisKeyword_10_2() { return cRightParenthesisKeyword_10_2; }
	}

	public class Patt1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Patt1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueListPattParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLabelAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLabelIdentParserRuleCall_1_2_0 = (RuleCall)cLabelAssignment_1_2.eContents().get(0);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueListPattParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValuePatt2ParserRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cHyphenMinusKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cPatt2ParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cPatt2ParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cAsteriskKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		////	| Patt2
		//Patt1:
		//	name=Ident value=ListPatt //	| Patt2 '*'
		//	| name=Ident "." label=Ident value=ListPatt | name=Ident "@" value=Patt2 | "-" Patt2 | Patt2 "*"?;
		public ParserRule getRule() { return rule; }

		//name=Ident value=ListPatt //	| Patt2 '*'
		//| name=Ident "." label=Ident value=ListPatt | name=Ident "@" value=Patt2 | "-" Patt2 | Patt2 "*"?
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident value=ListPatt
		public Group getGroup_0() { return cGroup_0; }

		//name=Ident
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0_0() { return cNameIdentParserRuleCall_0_0_0; }

		//value=ListPatt
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//ListPatt
		public RuleCall getValueListPattParserRuleCall_0_1_0() { return cValueListPattParserRuleCall_0_1_0; }

		//name=Ident "." label=Ident value=ListPatt
		public Group getGroup_1() { return cGroup_1; }

		//name=Ident
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_0_0() { return cNameIdentParserRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//label=Ident
		public Assignment getLabelAssignment_1_2() { return cLabelAssignment_1_2; }

		//Ident
		public RuleCall getLabelIdentParserRuleCall_1_2_0() { return cLabelIdentParserRuleCall_1_2_0; }

		//value=ListPatt
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }

		//ListPatt
		public RuleCall getValueListPattParserRuleCall_1_3_0() { return cValueListPattParserRuleCall_1_3_0; }

		//name=Ident "@" value=Patt2
		public Group getGroup_2() { return cGroup_2; }

		//name=Ident
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_0_0() { return cNameIdentParserRuleCall_2_0_0; }

		//"@"
		public Keyword getCommercialAtKeyword_2_1() { return cCommercialAtKeyword_2_1; }

		//value=Patt2
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }

		//Patt2
		public RuleCall getValuePatt2ParserRuleCall_2_2_0() { return cValuePatt2ParserRuleCall_2_2_0; }

		//"-" Patt2
		public Group getGroup_3() { return cGroup_3; }

		//"-"
		public Keyword getHyphenMinusKeyword_3_0() { return cHyphenMinusKeyword_3_0; }

		//Patt2
		public RuleCall getPatt2ParserRuleCall_3_1() { return cPatt2ParserRuleCall_3_1; }

		//Patt2 "*"?
		public Group getGroup_4() { return cGroup_4; }

		//Patt2
		public RuleCall getPatt2ParserRuleCall_4_0() { return cPatt2ParserRuleCall_4_0; }

		//"*"?
		public Keyword getAsteriskKeyword_4_1() { return cAsteriskKeyword_4_1; }
	}

	public class PattElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Patt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPPatt1ParserRuleCall_0_0 = (RuleCall)cPAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cPAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPPatt1ParserRuleCall_1_1_0 = (RuleCall)cPAssignment_1_1.eContents().get(0);
		
		//Patt: // Patt '|' Patt1 | Patt '+' Patt1 | Patt1
		//	p+=Patt1 (("|" | "+") p+=Patt1)*;
		public ParserRule getRule() { return rule; }

		//// Patt '|' Patt1 | Patt '+' Patt1 | Patt1
		//p+=Patt1 (("|" | "+") p+=Patt1)*
		public Group getGroup() { return cGroup; }

		//// Patt '|' Patt1 | Patt '+' Patt1 | Patt1
		//p+=Patt1
		public Assignment getPAssignment_0() { return cPAssignment_0; }

		//Patt1
		public RuleCall getPPatt1ParserRuleCall_0_0() { return cPPatt1ParserRuleCall_0_0; }

		//(("|" | "+") p+=Patt1)*
		public Group getGroup_1() { return cGroup_1; }

		//"|" | "+"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0_0() { return cVerticalLineKeyword_1_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_1() { return cPlusSignKeyword_1_0_1; }

		//p+=Patt1
		public Assignment getPAssignment_1_1() { return cPAssignment_1_1; }

		//Patt1
		public RuleCall getPPatt1ParserRuleCall_1_1_0() { return cPPatt1ParserRuleCall_1_1_0; }
	}

	public class PattAssElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PattAss");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePattParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//// "Pattern Assignment"
		//PattAss:
		//	name+=Ident ("," name+=Ident)* "=" value=Patt;
		public ParserRule getRule() { return rule; }

		//name+=Ident ("," name+=Ident)* "=" value=Patt
		public Group getGroup() { return cGroup; }

		//name+=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//("," name+=Ident)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name+=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Patt
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Patt
		public RuleCall getValuePattParserRuleCall_3_0() { return cValuePattParserRuleCall_3_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDollarSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexIntegerTerminalRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		
		//Label:
		//	name=Ident | "$" index=Integer;
		public ParserRule getRule() { return rule; }

		//name=Ident | "$" index=Integer
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//"$" index=Integer
		public Group getGroup_1() { return cGroup_1; }

		//"$"
		public Keyword getDollarSignKeyword_1_0() { return cDollarSignKeyword_1_0; }

		//index=Integer
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }

		//Integer
		public RuleCall getIndexIntegerTerminalRuleCall_1_1_0() { return cIndexIntegerTerminalRuleCall_1_1_0; }
	}

	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sort");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPTypeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStrKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStrsKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//Sort:
		//	"Type" | "PType" | "Str" | "Strs";
		public ParserRule getRule() { return rule; }

		//"Type" | "PType" | "Str" | "Strs"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//"PType"
		public Keyword getPTypeKeyword_1() { return cPTypeKeyword_1; }

		//"Str"
		public Keyword getStrKeyword_2() { return cStrKeyword_2; }

		//"Strs"
		public Keyword getStrsKeyword_3() { return cStrsKeyword_3; }
	}

	public class BuiltInCatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BuiltInCat");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIntsKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFloatKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BuiltInCat:
		//	"String" | "Int" | "Ints" | "Float";
		public ParserRule getRule() { return rule; }

		//"String" | "Int" | "Ints" | "Float"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"String"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }

		//"Int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }

		//"Ints"
		public Keyword getIntsKeyword_2() { return cIntsKeyword_2; }

		//"Float"
		public Keyword getFloatKeyword_3() { return cFloatKeyword_3; }
	}

	public class ListPattAssElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListPattAss");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListPattAssAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAssignmentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAssignmentsPattAssParserRuleCall_1_0_0 = (RuleCall)cAssignmentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAssignmentsPattAssParserRuleCall_1_1_1_0 = (RuleCall)cAssignmentsAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ListPattAss: // ε | PattAss | PattAss ';' ListPattAss
		//	{ListPattAss} (assignments+=PattAss (";" assignments+=PattAss)* ";"?)?;
		public ParserRule getRule() { return rule; }

		//// ε | PattAss | PattAss ';' ListPattAss
		//{ListPattAss} (assignments+=PattAss (";" assignments+=PattAss)* ";"?)?
		public Group getGroup() { return cGroup; }

		//// ε | PattAss | PattAss ';' ListPattAss
		//{ListPattAss}
		public Action getListPattAssAction_0() { return cListPattAssAction_0; }

		//(assignments+=PattAss (";" assignments+=PattAss)* ";"?)?
		public Group getGroup_1() { return cGroup_1; }

		//assignments+=PattAss
		public Assignment getAssignmentsAssignment_1_0() { return cAssignmentsAssignment_1_0; }

		//PattAss
		public RuleCall getAssignmentsPattAssParserRuleCall_1_0_0() { return cAssignmentsPattAssParserRuleCall_1_0_0; }

		//(";" assignments+=PattAss)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//assignments+=PattAss
		public Assignment getAssignmentsAssignment_1_1_1() { return cAssignmentsAssignment_1_1_1; }

		//PattAss
		public RuleCall getAssignmentsPattAssParserRuleCall_1_1_1_0() { return cAssignmentsPattAssParserRuleCall_1_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class ListPattElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListPatt");
		private final Assignment cPatternsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPatternsPatt2ParserRuleCall_0 = (RuleCall)cPatternsAssignment.eContents().get(0);
		
		//// WARNING If you refactor this, make sure to update GFScopeProvider::getAllDescriptions(), line 137
		//// Patt2 | Patt2 ListPatt
		//ListPatt:
		//	patterns+=Patt2+;
		public ParserRule getRule() { return rule; }

		//patterns+=Patt2+
		public Assignment getPatternsAssignment() { return cPatternsAssignment; }

		//Patt2
		public RuleCall getPatternsPatt2ParserRuleCall_0() { return cPatternsPatt2ParserRuleCall_0; }
	}

	public class BindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBindAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword c_Keyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Bind:
		//	name=Ident | {Bind} "_";
		public ParserRule getRule() { return rule; }

		//name=Ident | {Bind} "_"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//{Bind} "_"
		public Group getGroup_1() { return cGroup_1; }

		//{Bind}
		public Action getBindAction_1_0() { return cBindAction_1_0; }

		//"_"
		public Keyword get_Keyword_1_1() { return c_Keyword_1_1; }
	}

	public class ListBindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListBind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListBindAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cBindingsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cBindingsBindParserRuleCall_1_0_0 = (RuleCall)cBindingsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cBindingsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cBindingsBindParserRuleCall_1_1_1_0 = (RuleCall)cBindingsAssignment_1_1_1.eContents().get(0);
		
		//// WARNING If you refactor this, make sure to update GFScopeProvider::getAllDescriptions(), line 142
		//ListBind: // ε | Bind | Bind ',' ListBind
		//	{ListBind} (bindings+=Bind ("," bindings+=Bind)*)?;
		public ParserRule getRule() { return rule; }

		//// ε | Bind | Bind ',' ListBind
		//{ListBind} (bindings+=Bind ("," bindings+=Bind)*)?
		public Group getGroup() { return cGroup; }

		//// ε | Bind | Bind ',' ListBind
		//{ListBind}
		public Action getListBindAction_0() { return cListBindAction_0; }

		//(bindings+=Bind ("," bindings+=Bind)*)?
		public Group getGroup_1() { return cGroup_1; }

		//bindings+=Bind
		public Assignment getBindingsAssignment_1_0() { return cBindingsAssignment_1_0; }

		//Bind
		public RuleCall getBindingsBindParserRuleCall_1_0_0() { return cBindingsBindParserRuleCall_1_0_0; }

		//("," bindings+=Bind)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//bindings+=Bind
		public Assignment getBindingsAssignment_1_1_1() { return cBindingsAssignment_1_1_1; }

		//Bind
		public RuleCall getBindingsBindParserRuleCall_1_1_1_0() { return cBindingsBindParserRuleCall_1_1_1_0; }
	}

	public class TupleCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TupleComp");
		private final RuleCall cExpParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * This has now been melted down into Exp
		// * / //Decl :
		////	  '(' lb=ListBind ':' e+=Exp ')'
		////	| e+=Exp4
		////;
		//TupleComp:
		//	Exp;
		public ParserRule getRule() { return rule; }

		//Exp
		public RuleCall getExpParserRuleCall() { return cExpParserRuleCall; }
	}

	public class PattTupleCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PattTupleComp");
		private final RuleCall cPattParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PattTupleComp:
		//	Patt;
		public ParserRule getRule() { return rule; }

		//Patt
		public RuleCall getPattParserRuleCall() { return cPattParserRuleCall; }
	}

	public class ListTupleCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListTupleComp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListTupleCompAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLTupleCompParserRuleCall_1_0_0 = (RuleCall)cLAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLTupleCompParserRuleCall_1_1_1_0 = (RuleCall)cLAssignment_1_1_1.eContents().get(0);
		
		//ListTupleComp: // ε | TupleComp | TupleComp ',' ListTupleComp
		//	{ListTupleComp} (l+=TupleComp ("," l+=TupleComp)*)?;
		public ParserRule getRule() { return rule; }

		//// ε | TupleComp | TupleComp ',' ListTupleComp
		//{ListTupleComp} (l+=TupleComp ("," l+=TupleComp)*)?
		public Group getGroup() { return cGroup; }

		//// ε | TupleComp | TupleComp ',' ListTupleComp
		//{ListTupleComp}
		public Action getListTupleCompAction_0() { return cListTupleCompAction_0; }

		//(l+=TupleComp ("," l+=TupleComp)*)?
		public Group getGroup_1() { return cGroup_1; }

		//l+=TupleComp
		public Assignment getLAssignment_1_0() { return cLAssignment_1_0; }

		//TupleComp
		public RuleCall getLTupleCompParserRuleCall_1_0_0() { return cLTupleCompParserRuleCall_1_0_0; }

		//("," l+=TupleComp)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//l+=TupleComp
		public Assignment getLAssignment_1_1_1() { return cLAssignment_1_1_1; }

		//TupleComp
		public RuleCall getLTupleCompParserRuleCall_1_1_1_0() { return cLTupleCompParserRuleCall_1_1_1_0; }
	}

	public class ListPattTupleCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListPattTupleComp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListPattTupleCompAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLPattTupleCompParserRuleCall_1_0_0 = (RuleCall)cLAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLPattTupleCompParserRuleCall_1_1_1_0 = (RuleCall)cLAssignment_1_1_1.eContents().get(0);
		
		//ListPattTupleComp: // ε | PattTupleComp | PattTupleComp ',' ListPattTupleComp
		//	{ListPattTupleComp} (l+=PattTupleComp ("," l+=PattTupleComp)*)?;
		public ParserRule getRule() { return rule; }

		//// ε | PattTupleComp | PattTupleComp ',' ListPattTupleComp
		//{ListPattTupleComp} (l+=PattTupleComp ("," l+=PattTupleComp)*)?
		public Group getGroup() { return cGroup; }

		//// ε | PattTupleComp | PattTupleComp ',' ListPattTupleComp
		//{ListPattTupleComp}
		public Action getListPattTupleCompAction_0() { return cListPattTupleCompAction_0; }

		//(l+=PattTupleComp ("," l+=PattTupleComp)*)?
		public Group getGroup_1() { return cGroup_1; }

		//l+=PattTupleComp
		public Assignment getLAssignment_1_0() { return cLAssignment_1_0; }

		//PattTupleComp
		public RuleCall getLPattTupleCompParserRuleCall_1_0_0() { return cLPattTupleCompParserRuleCall_1_0_0; }

		//("," l+=PattTupleComp)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//l+=PattTupleComp
		public Assignment getLAssignment_1_1_1() { return cLAssignment_1_1_1; }

		//PattTupleComp
		public RuleCall getLPattTupleCompParserRuleCall_1_1_1_0() { return cLPattTupleCompParserRuleCall_1_1_1_0; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternPattParserRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEExpParserRuleCall_2_0 = (RuleCall)cEAssignment_2.eContents().get(0);
		
		//Case:
		//	pattern=Patt "=>" e=Exp;
		public ParserRule getRule() { return rule; }

		//pattern=Patt "=>" e=Exp
		public Group getGroup() { return cGroup; }

		//pattern=Patt
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }

		//Patt
		public RuleCall getPatternPattParserRuleCall_0_0() { return cPatternPattParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//e=Exp
		public Assignment getEAssignment_2() { return cEAssignment_2; }

		//Exp
		public RuleCall getEExpParserRuleCall_2_0() { return cEExpParserRuleCall_2_0; }
	}

	public class ListCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCasesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_0_0 = (RuleCall)cCasesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCasesCaseParserRuleCall_1_1_0 = (RuleCall)cCasesAssignment_1_1.eContents().get(0);
		
		//ListCase: // Case | Case ';' ListCase
		//	cases+=Case (";" cases+=Case)*;
		public ParserRule getRule() { return rule; }

		//// Case | Case ';' ListCase
		//cases+=Case (";" cases+=Case)*
		public Group getGroup() { return cGroup; }

		//// Case | Case ';' ListCase
		//cases+=Case
		public Assignment getCasesAssignment_0() { return cCasesAssignment_0; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_0_0() { return cCasesCaseParserRuleCall_0_0; }

		//(";" cases+=Case)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//cases+=Case
		public Assignment getCasesAssignment_1_1() { return cCasesAssignment_1_1; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_1_1_0() { return cCasesCaseParserRuleCall_1_1_0; }
	}

	public class DDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cBindListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBindListListBindParserRuleCall_0_1_0 = (RuleCall)cBindListAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cEAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEExpParserRuleCall_0_3_0 = (RuleCall)cEAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cExp6ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DDecl:
		//	"(" bindList=ListBind ":" e=Exp ")" | Exp6;
		public ParserRule getRule() { return rule; }

		//"(" bindList=ListBind ":" e=Exp ")" | Exp6
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" bindList=ListBind ":" e=Exp ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//bindList=ListBind
		public Assignment getBindListAssignment_0_1() { return cBindListAssignment_0_1; }

		//ListBind
		public RuleCall getBindListListBindParserRuleCall_0_1_0() { return cBindListListBindParserRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//e=Exp
		public Assignment getEAssignment_0_3() { return cEAssignment_0_3; }

		//Exp
		public RuleCall getEExpParserRuleCall_0_3_0() { return cEExpParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//Exp6
		public RuleCall getExp6ParserRuleCall_1() { return cExp6ParserRuleCall_1; }
	}

	public class IdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ident");
		private final Assignment cSAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSIDTerminalRuleCall_0 = (RuleCall)cSAssignment.eContents().get(0);
		
		/// *
		// * Terminals, Comments
		// * 
		// * Based on (but modified from) those from org.eclipse.xtext.common.Terminals
		// * Ref: http://www.eclipse.org/Xtext/documentation/2_0_0/020-grammar-language.php#grammarLanguage_6
		// * / Ident:
		//	s=ID;
		public ParserRule getRule() { return rule; }

		//s=ID
		public Assignment getSAssignment() { return cSAssignment; }

		//ID
		public RuleCall getSIDTerminalRuleCall_0() { return cSIDTerminalRuleCall_0; }
	}
	
	
	private ModDefElements pModDef;
	private ModTypeElements pModType;
	private ModBodyElements pModBody;
	private OpenElements pOpen;
	private IncludedElements pIncluded;
	private DefElements pDef;
	private OperDefElements pOperDef;
	private TopDefElements pTopDef;
	private CatDefElements pCatDef;
	private FunDefElements pFunDef;
	private DataDefElements pDataDef;
	private DataConstrElements pDataConstr;
	private ParDefElements pParDef;
	private ParConstrElements pParConstr;
	private PrintDefElements pPrintDef;
	private FlagDefElements pFlagDef;
	private NameElements pName;
	private LocDefElements pLocDef;
	private ListLocDefElements pListLocDef;
	private Exp6Elements pExp6;
	private Exp5Elements pExp5;
	private Exp4Elements pExp4;
	private Exp3Elements pExp3;
	private Exp2Elements pExp2;
	private Exp1Elements pExp1;
	private ExpElements pExp;
	private ListExpElements pListExp;
	private ExpsElements pExps;
	private Patt2Elements pPatt2;
	private Patt1Elements pPatt1;
	private PattElements pPatt;
	private PattAssElements pPattAss;
	private LabelElements pLabel;
	private SortElements pSort;
	private BuiltInCatElements pBuiltInCat;
	private ListPattAssElements pListPattAss;
	private ListPattElements pListPatt;
	private BindElements pBind;
	private ListBindElements pListBind;
	private TupleCompElements pTupleComp;
	private PattTupleCompElements pPattTupleComp;
	private ListTupleCompElements pListTupleComp;
	private ListPattTupleCompElements pListPattTupleComp;
	private CaseElements pCase;
	private ListCaseElements pListCase;
	private DDeclElements pDDecl;
	private IdentElements pIdent;
	private TerminalRule tID;
	private TerminalRule tString;
	private TerminalRule tInteger;
	private TerminalRule tDouble;
	private TerminalRule tCOMPILER_PRAGMA;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public GFGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	/// *
	// * This grammar basically treats a single resource (file), which is why we start directly
	// * from ModDef and exclude the rules ListModDef, Grammar.
	//
	//Grammar :
	//	ListModDef
	//;
	//
	//ListModDef :
	//	{ListModDef} (modules+=ModDef)*
	//;
	// * / ModDef:
	//	incomplete?="incomplete"? type=ModType "=" body=ModBody ";"*;
	public ModDefElements getModDefAccess() {
		return (pModDef != null) ? pModDef : (pModDef = new ModDefElements());
	}
	
	public ParserRule getModDefRule() {
		return getModDefAccess().getRule();
	}

	//// Cross-ref checking is done by Validation, not via grammar
	//ModType:
	//	abstract?="abstract" name=Ident | resource?="resource" name=Ident | interface?="interface" name=Ident |
	//	concrete?="concrete" name=Ident "of" abstractName=Ident | instance?="instance" name=Ident "of" abstractName=Ident;
	public ModTypeElements getModTypeAccess() {
		return (pModType != null) ? pModType : (pModType = new ModTypeElements());
	}
	
	public ParserRule getModTypeRule() {
		return getModTypeAccess().getRule();
	}

	//ModBody:
	//	{ModBody} ((extends+=Included ("," extends+=Included)*)? "**")? ("open" (opens+=Open ("," opens+=Open)*)? "in")? "{"
	//	judgements+=TopDef* "}" | {ModBody} (extends+=Included ("," extends+=Included)*)? | {ModBody} functor=Included
	//	functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)? | {ModBody} functor=Included
	//	functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)? "**" ("open" (opens+=Open (","
	//	opens+=Open)*)? "in")? "{" judgements+=TopDef* "}" | {ModBody} (extends+=Included ("," extends+=Included)*)? "**"
	//	functor=Included functorInstantiation?="with" (instantiations+=Open ("," instantiations+=Open)*)? | {ModBody}
	//	(extends+=Included ("," extends+=Included)*)? "**" functor=Included functorInstantiation?="with" (instantiations+=Open
	//	("," instantiations+=Open)*)? "**" ("open" (opens+=Open ("," opens+=Open)*)? "in")? "{" judgements+=TopDef* "}";
	public ModBodyElements getModBodyAccess() {
		return (pModBody != null) ? pModBody : (pModBody = new ModBodyElements());
	}
	
	public ParserRule getModBodyRule() {
		return getModBodyAccess().getRule();
	}

	//Open:
	//	name=Ident | "(" name=Ident ")" | "(" alias=Ident "=" name=Ident ")";
	public OpenElements getOpenAccess() {
		return (pOpen != null) ? pOpen : (pOpen = new OpenElements());
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}

	//Included:
	//	name=Ident | name=Ident inclusive?="[" includes+=Ident ("," includes+=Ident)* "]" | name=Ident exclusive?="-" "["
	//	excludes+=Ident ("," excludes+=Ident)* "]";
	public IncludedElements getIncludedAccess() {
		return (pIncluded != null) ? pIncluded : (pIncluded = new IncludedElements());
	}
	
	public ParserRule getIncludedRule() {
		return getIncludedAccess().getRule();
	}

	//Def: //	  name=ListName '=' definition=Exp
	////	| name=Name patterns=ListPatt '=' definition=Exp
	////	| name=ListName ':' type=Exp ('=' definition=Exp)?
	//	name+=Name ("," name+=Name)* "=" definition=Exp | name+=Name ("," name+=Name)* ":" type=Exp ("=" definition=Exp)? |
	//	name+=Name patterns=ListPatt "=" definition=Exp;
	public DefElements getDefAccess() {
		return (pDef != null) ? pDef : (pDef = new DefElements());
	}
	
	public ParserRule getDefRule() {
		return getDefAccess().getRule();
	}

	//// For handling the overload syntax
	//OperDef returns Def:
	//	name+=Name ("," name+=Name)* "=" (definition=Exp | overload?="overload" "{" overloads+=Def (";" overloads+=Def ";"?)*
	//	"}") | name+=Name ("," name+=Name)* ":" type=Exp ("=" (definition=Exp | overload?="overload" "{" overloads+=Def (";"
	//	overloads+=Def ";"?)* "}"))? | name+=Name ("," name+=Name)* ":" overload?="overload" "{" overloads+=Def (";"
	//	overloads+=Def ";"?)* "}" | name+=Name patterns=ListPatt "=" definition=Exp;
	public OperDefElements getOperDefAccess() {
		return (pOperDef != null) ? pOperDef : (pOperDef = new OperDefElements());
	}
	
	public ParserRule getOperDefRule() {
		return getOperDefAccess().getRule();
	}

	//TopDef:
	//	cat?="cat" (definitions+=CatDef ";")+ //	| oper?='oper'		(definitions+=Def ';')+
	//	| fun?="fun" (definitions+=FunDef ";")+ | data?="data" (definitions+=FunDef ";")+ | def?="def" (definitions+=Def ";")+
	//	| data?="data" (definitions+=DataDef ";")+ | param?="param" (definitions+=ParDef ";")+ | oper?="oper"
	//	(definitions+=OperDef ";")+ | lincat?="lincat" (definitions+=PrintDef ";")+ | lindef?="lindef" (definitions+=Def ";")+
	//	| lin?="lin" (definitions+=Def ";")+ | printname?="printname" "cat" (definitions+=PrintDef ";")+ |
	//	printname?="printname" "fun" (definitions+=PrintDef ";")+ | flags?="flags" (definitions+=FlagDef ";")+;
	public TopDefElements getTopDefAccess() {
		return (pTopDef != null) ? pTopDef : (pTopDef = new TopDefElements());
	}
	
	public ParserRule getTopDefRule() {
		return getTopDefAccess().getRule();
	}

	//CatDef:
	//	name=Ident context+=DDecl* | "[" name=Ident context+=DDecl* "]" ("{" size=Integer "}")?;
	public CatDefElements getCatDefAccess() {
		return (pCatDef != null) ? pCatDef : (pCatDef = new CatDefElements());
	}
	
	public ParserRule getCatDefRule() {
		return getCatDefAccess().getRule();
	}

	//FunDef:
	//	name+=Ident ("," name+=Ident)* ":" type=Exp;
	public FunDefElements getFunDefAccess() {
		return (pFunDef != null) ? pFunDef : (pFunDef = new FunDefElements());
	}
	
	public ParserRule getFunDefRule() {
		return getFunDefAccess().getRule();
	}

	//DataDef:
	//	name=Ident "=" (constructors+=DataConstr ("|" constructors+=DataConstr)* "|"?)?;
	public DataDefElements getDataDefAccess() {
		return (pDataDef != null) ? pDataDef : (pDataDef = new DataDefElements());
	}
	
	public ParserRule getDataDefRule() {
		return getDataDefAccess().getRule();
	}

	//DataConstr:
	//	name=Ident | module=Ident "." name=Ident;
	public DataConstrElements getDataConstrAccess() {
		return (pDataConstr != null) ? pDataConstr : (pDataConstr = new DataConstrElements());
	}
	
	public ParserRule getDataConstrRule() {
		return getDataConstrAccess().getRule();
	}

	//ParDef:
	//	name=Ident "=" (constructors+=ParConstr ("|" constructors+=ParConstr)* "|"?)? | name=Ident "=" "(" "in" id2=Ident ")"
	//	| name=Ident;
	public ParDefElements getParDefAccess() {
		return (pParDef != null) ? pParDef : (pParDef = new ParDefElements());
	}
	
	public ParserRule getParDefRule() {
		return getParDefAccess().getRule();
	}

	//ParConstr:
	//	name=Ident constructors+=DDecl*;
	public ParConstrElements getParConstrAccess() {
		return (pParConstr != null) ? pParConstr : (pParConstr = new ParConstrElements());
	}
	
	public ParserRule getParConstrRule() {
		return getParConstrAccess().getRule();
	}

	//PrintDef: //	name=ListName '=' printname=Exp
	//	name+=Name ("," name+=Name)* "=" printname=Exp;
	public PrintDefElements getPrintDefAccess() {
		return (pPrintDef != null) ? pPrintDef : (pPrintDef = new PrintDefElements());
	}
	
	public ParserRule getPrintDefRule() {
		return getPrintDefAccess().getRule();
	}

	//FlagDef:
	//	name=Ident "=" (value=Ident | String);
	public FlagDefElements getFlagDefAccess() {
		return (pFlagDef != null) ? pFlagDef : (pFlagDef = new FlagDefElements());
	}
	
	public ParserRule getFlagDefRule() {
		return getFlagDefAccess().getRule();
	}

	//Name:
	//	name=Ident | "[" name=Ident "]";
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//LocDef:
	//	name+=Ident ("," name+=Ident)* ":" type=Exp ("=" value=Exp)? | name+=Ident ("," name+=Ident)* "=" value=Exp;
	public LocDefElements getLocDefAccess() {
		return (pLocDef != null) ? pLocDef : (pLocDef = new LocDefElements());
	}
	
	public ParserRule getLocDefRule() {
		return getLocDefAccess().getRule();
	}

	//ListLocDef: // ε | LocDef | LocDef ';' ListLocDef
	//	{ListLocDef} (localDefinitions+=LocDef (";" localDefinitions+=LocDef)* ";"?)?;
	public ListLocDefElements getListLocDefAccess() {
		return (pListLocDef != null) ? pListLocDef : (pListLocDef = new ListLocDefElements());
	}
	
	public ParserRule getListLocDefRule() {
		return getListLocDefAccess().getRule();
	}

	//Exp6: //	  {Exp6} Ident
	//	name= // constant or variable
	//	[Ident] //	| {Exp6} '?' Integer
	//	//	| {Exp6} '?'
	//	//	| '[' Ident es=Exps ']'
	//	//	| '<' ltc=ListTupleComp '>'
	//	//	| '<' e+=Exp ':' e+=Exp '>'
	//	| sort?= // type of types/param types/strings/token lists
	//	Sort | builtInCat?= // 
	//	BuiltInCat | string?= // string literal
	//	String | integer?= // integer literal
	//	Integer | double?= // floating point literal
	//	Double | meta?="?" => Integer? // metavariable
	//	| emptyString?="[" // empty token list
	//	"]" | data?="data" | listCat?="[" category=[Ident] list=Exps // list category
	//	"]" | tokenList?="[" String // token list
	//	"]" | record?="{" defList=ListLocDef // record / record type
	//	"}" | tuple?="<" (=> tupleList=ListTupleComp | v=Exp ":" type=Exp) // tuple | type-annotated expression
	//	">" | identity?="(" v=Exp ")";
	public Exp6Elements getExp6Access() {
		return (pExp6 != null) ? pExp6 : (pExp6 = new Exp6Elements());
	}
	
	public ParserRule getExp6Rule() {
		return getExp6Access().getRule();
	}

	//Exp5: // Exp5 . Label | Exp6
	//	v=Exp6 ("." label+=Label)* // projection or qualification
	//;
	public Exp5Elements getExp5Access() {
		return (pExp5 != null) ? pExp5 : (pExp5 = new Exp5Elements());
	}
	
	public ParserRule getExp5Rule() {
		return getExp5Access().getRule();
	}

	//Exp4: //	  e1=Exp4 e2=Exp5		// function application
	//	"table" "{" caseList=ListCase "}" args+=Exp5* //	| 'table' e+=Exp6 '{' lc=ListCase '}'		(e+=Exp5)*
	//	//	| 'table' e+=Exp6 '[' le=ListExp ']'		(e+=Exp5)*
	//	| "table" argType=Exp6 ("{" caseList=ListCase "}" | "[" expList=ListExp "]") args+=Exp5* // course-of-values table
	//	| "case" caseOf=Exp "of" "{" caseList=ListCase "}" args+=Exp5* | "variants" "{" expList=ListExp "}" args+=Exp5* | "pre"
	//	"{" caseList=ListCase "}" args+=Exp5* | "lincat" name=[Ident] args+=Exp5* | "lin" name=[Ident] inner=Exp6 args+=Exp5*
	//	| v=Exp5 args+=Exp5*;
	public Exp4Elements getExp4Access() {
		return (pExp4 != null) ? pExp4 : (pExp4 = new Exp4Elements());
	}
	
	public ParserRule getExp4Rule() {
		return getExp4Access().getRule();
	}

	//Exp3: //	  e1=Exp3 '!' e2=Exp4
	////	| e1=Exp3 '*' e2=Exp4
	////	| e1=Exp3 '**' e2=Exp4
	////	| '#' Patt2
	////	| Exp4
	//	v=Exp4 (("!" | "*" | "**") e+=Exp4)* | "#" v=Patt2 (("!" | "*" | "**") e+=Exp4)*;
	public Exp3Elements getExp3Access() {
		return (pExp3 != null) ? pExp3 : (pExp3 = new Exp3Elements());
	}
	
	public ParserRule getExp3Rule() {
		return getExp3Access().getRule();
	}

	//Exp2: //	  e1=Exp3 '+' e2=Exp2
	////	| Exp3
	//	v=Exp3 ("+" e+=Exp2)?;
	public Exp2Elements getExp2Access() {
		return (pExp2 != null) ? pExp2 : (pExp2 = new Exp2Elements());
	}
	
	public ParserRule getExp2Rule() {
		return getExp2Access().getRule();
	}

	//Exp1: //	  e1=Exp2 '++' e2=Exp1
	////	| Exp2
	//	v=Exp2 ("++" e+=Exp1)?;
	public Exp1Elements getExp1Access() {
		return (pExp1 != null) ? pExp1 : (pExp1 = new Exp1Elements());
	}
	
	public ParserRule getExp1Rule() {
		return getExp1Access().getRule();
	}

	/// *
	// * The following is an amalgamation of:
	// *  Exp3 => Exp
	// * 	Exp3 where { ListLocDef }
	// * 	Exp1
	// *
	//	| e+=Exp3
	//		(
	//			  '=>' e+=Exp
	//			| 'where' '{' e+=ListLocDef '}'
	//			| ('+' e+=Exp2)? ('++' e+=Exp1)?
	//		)
	//		(=> '|' e+=Exp1)*
	//
	// * / //-	| e+=Exp '|' e+=Exp1
	////-	| e+=Exp1										(=> '|' e+=Exp1)*
	//Exp:
	//	"\\" bindList=ListBind "->" v=Exp ("|" e+=Exp1)* //-	| d+=Decl '->' e+=Exp							(=> '|' e+=Exp1)*
	//	//-	| e+=Exp3 '=>' e+=Exp							(=> '|' e+=Exp1)*
	//	//-	| e+=Exp3 'where' '{' e+=ListLocDef '}'			(=> '|' e+=Exp1)*
	//
	//	/ *
	// * The following is (hopefully) an amalgamation of:
	// *	Decl -> Exp
	// *  Exp3 => Exp
	// * 	Exp3 where { ListLocDef }
	// * 	Exp1
	// * / | "\\" "\\" bindList=ListBind "=>" v=Exp ("|" e+=Exp1)* | "let" "{" defList=ListLocDef "}" "in" v=Exp ("|" e+=Exp1)*
	//	| "let" defList=ListLocDef "in" v=Exp ("|" e+=Exp1)* | "(" bindList=ListBind ":" type=Exp ")" "->" v=Exp ("|"
	//	e+=Exp1)* | v=Exp4 ((("!" | "*" | "**") e+=Exp4)* // That makes Exp3
	//	("=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?) | "->" e+=Exp) ("|" e+=Exp1)* | "#"
	//	v=Patt2 (("!" | "*" | "**") e+=Exp4)* // That makes Exp3
	//	("=>" e+=Exp | "where" "{" defList=ListLocDef "}" | ("+" e+=Exp2)? ("++" e+=Exp1)?) ("|" e+=Exp1)*;
	public ExpElements getExpAccess() {
		return (pExp != null) ? pExp : (pExp = new ExpElements());
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}

	//ListExp: // ε | Exp | Exp ';' ListExp
	//	{ListExp} (expressions+=Exp (";" expressions+=Exp)* ";"?)?;
	public ListExpElements getListExpAccess() {
		return (pListExp != null) ? pListExp : (pListExp = new ListExpElements());
	}
	
	public ParserRule getListExpRule() {
		return getListExpAccess().getRule();
	}

	//Exps: // ε | Exp6 Exps
	//	{Exps} expressions+=Exp6*;
	public ExpsElements getExpsAccess() {
		return (pExps != null) ? pExps : (pExps = new ExpsElements());
	}
	
	public ParserRule getExpsRule() {
		return getExpsAccess().getRule();
	}

	//Patt2:
	//	{Patt2} "_" | {Patt2} name=Ident | {Patt2} name=Ident "." label=Ident | {Patt2} Integer | {Patt2} Double | {Patt2}
	//	String | "{" ListPattAss "}" | "<" ListPattTupleComp ">" | {Patt2} "#" name=Ident | {Patt2} "?" | "(" Patt ")";
	public Patt2Elements getPatt2Access() {
		return (pPatt2 != null) ? pPatt2 : (pPatt2 = new Patt2Elements());
	}
	
	public ParserRule getPatt2Rule() {
		return getPatt2Access().getRule();
	}

	////	| Patt2
	//Patt1:
	//	name=Ident value=ListPatt //	| Patt2 '*'
	//	| name=Ident "." label=Ident value=ListPatt | name=Ident "@" value=Patt2 | "-" Patt2 | Patt2 "*"?;
	public Patt1Elements getPatt1Access() {
		return (pPatt1 != null) ? pPatt1 : (pPatt1 = new Patt1Elements());
	}
	
	public ParserRule getPatt1Rule() {
		return getPatt1Access().getRule();
	}

	//Patt: // Patt '|' Patt1 | Patt '+' Patt1 | Patt1
	//	p+=Patt1 (("|" | "+") p+=Patt1)*;
	public PattElements getPattAccess() {
		return (pPatt != null) ? pPatt : (pPatt = new PattElements());
	}
	
	public ParserRule getPattRule() {
		return getPattAccess().getRule();
	}

	//// "Pattern Assignment"
	//PattAss:
	//	name+=Ident ("," name+=Ident)* "=" value=Patt;
	public PattAssElements getPattAssAccess() {
		return (pPattAss != null) ? pPattAss : (pPattAss = new PattAssElements());
	}
	
	public ParserRule getPattAssRule() {
		return getPattAssAccess().getRule();
	}

	//Label:
	//	name=Ident | "$" index=Integer;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Sort:
	//	"Type" | "PType" | "Str" | "Strs";
	public SortElements getSortAccess() {
		return (pSort != null) ? pSort : (pSort = new SortElements());
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}

	//BuiltInCat:
	//	"String" | "Int" | "Ints" | "Float";
	public BuiltInCatElements getBuiltInCatAccess() {
		return (pBuiltInCat != null) ? pBuiltInCat : (pBuiltInCat = new BuiltInCatElements());
	}
	
	public ParserRule getBuiltInCatRule() {
		return getBuiltInCatAccess().getRule();
	}

	//ListPattAss: // ε | PattAss | PattAss ';' ListPattAss
	//	{ListPattAss} (assignments+=PattAss (";" assignments+=PattAss)* ";"?)?;
	public ListPattAssElements getListPattAssAccess() {
		return (pListPattAss != null) ? pListPattAss : (pListPattAss = new ListPattAssElements());
	}
	
	public ParserRule getListPattAssRule() {
		return getListPattAssAccess().getRule();
	}

	//// WARNING If you refactor this, make sure to update GFScopeProvider::getAllDescriptions(), line 137
	//// Patt2 | Patt2 ListPatt
	//ListPatt:
	//	patterns+=Patt2+;
	public ListPattElements getListPattAccess() {
		return (pListPatt != null) ? pListPatt : (pListPatt = new ListPattElements());
	}
	
	public ParserRule getListPattRule() {
		return getListPattAccess().getRule();
	}

	//Bind:
	//	name=Ident | {Bind} "_";
	public BindElements getBindAccess() {
		return (pBind != null) ? pBind : (pBind = new BindElements());
	}
	
	public ParserRule getBindRule() {
		return getBindAccess().getRule();
	}

	//// WARNING If you refactor this, make sure to update GFScopeProvider::getAllDescriptions(), line 142
	//ListBind: // ε | Bind | Bind ',' ListBind
	//	{ListBind} (bindings+=Bind ("," bindings+=Bind)*)?;
	public ListBindElements getListBindAccess() {
		return (pListBind != null) ? pListBind : (pListBind = new ListBindElements());
	}
	
	public ParserRule getListBindRule() {
		return getListBindAccess().getRule();
	}

	/// *
	// * This has now been melted down into Exp
	// * / //Decl :
	////	  '(' lb=ListBind ':' e+=Exp ')'
	////	| e+=Exp4
	////;
	//TupleComp:
	//	Exp;
	public TupleCompElements getTupleCompAccess() {
		return (pTupleComp != null) ? pTupleComp : (pTupleComp = new TupleCompElements());
	}
	
	public ParserRule getTupleCompRule() {
		return getTupleCompAccess().getRule();
	}

	//PattTupleComp:
	//	Patt;
	public PattTupleCompElements getPattTupleCompAccess() {
		return (pPattTupleComp != null) ? pPattTupleComp : (pPattTupleComp = new PattTupleCompElements());
	}
	
	public ParserRule getPattTupleCompRule() {
		return getPattTupleCompAccess().getRule();
	}

	//ListTupleComp: // ε | TupleComp | TupleComp ',' ListTupleComp
	//	{ListTupleComp} (l+=TupleComp ("," l+=TupleComp)*)?;
	public ListTupleCompElements getListTupleCompAccess() {
		return (pListTupleComp != null) ? pListTupleComp : (pListTupleComp = new ListTupleCompElements());
	}
	
	public ParserRule getListTupleCompRule() {
		return getListTupleCompAccess().getRule();
	}

	//ListPattTupleComp: // ε | PattTupleComp | PattTupleComp ',' ListPattTupleComp
	//	{ListPattTupleComp} (l+=PattTupleComp ("," l+=PattTupleComp)*)?;
	public ListPattTupleCompElements getListPattTupleCompAccess() {
		return (pListPattTupleComp != null) ? pListPattTupleComp : (pListPattTupleComp = new ListPattTupleCompElements());
	}
	
	public ParserRule getListPattTupleCompRule() {
		return getListPattTupleCompAccess().getRule();
	}

	//Case:
	//	pattern=Patt "=>" e=Exp;
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//ListCase: // Case | Case ';' ListCase
	//	cases+=Case (";" cases+=Case)*;
	public ListCaseElements getListCaseAccess() {
		return (pListCase != null) ? pListCase : (pListCase = new ListCaseElements());
	}
	
	public ParserRule getListCaseRule() {
		return getListCaseAccess().getRule();
	}

	//DDecl:
	//	"(" bindList=ListBind ":" e=Exp ")" | Exp6;
	public DDeclElements getDDeclAccess() {
		return (pDDecl != null) ? pDDecl : (pDDecl = new DDeclElements());
	}
	
	public ParserRule getDDeclRule() {
		return getDDeclAccess().getRule();
	}

	/// *
	// * Terminals, Comments
	// * 
	// * Based on (but modified from) those from org.eclipse.xtext.common.Terminals
	// * Ref: http://www.eclipse.org/Xtext/documentation/2_0_0/020-grammar-language.php#grammarLanguage_6
	// * / Ident:
	//	s=ID;
	public IdentElements getIdentAccess() {
		return (pIdent != null) ? pIdent : (pIdent = new IdentElements());
	}
	
	public ParserRule getIdentRule() {
		return getIdentAccess().getRule();
	}

	////	('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'\'')*('.'('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'\'')*)?
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "0".."9" | "_" | "\'")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal String:
	//	"\"" ("\\" ("\"" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getStringRule() {
		return (tString != null) ? tString : (tString = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "String"));
	} 

	//terminal Integer returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getIntegerRule() {
		return (tInteger != null) ? tInteger : (tInteger = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Integer"));
	} 

	//terminal Double returns ecore::EDouble:
	//	"0".."9"+ "." "0".."9"+ ("e" "-"? "0".."9"+)?;
	public TerminalRule getDoubleRule() {
		return (tDouble != null) ? tDouble : (tDouble = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Double"));
	} 

	//terminal COMPILER_PRAGMA:
	//	"--#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getCOMPILER_PRAGMARule() {
		return (tCOMPILER_PRAGMA != null) ? tCOMPILER_PRAGMA : (tCOMPILER_PRAGMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMPILER_PRAGMA"));
	} 

	//terminal ML_COMMENT:
	//	"{-"->"-}";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
