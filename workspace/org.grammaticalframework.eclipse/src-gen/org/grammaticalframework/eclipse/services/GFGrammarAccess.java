/*
* generated by Xtext
*/

package org.grammaticalframework.eclipse.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class GFGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncompleteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIncompleteIncompleteKeyword_0_0 = (Keyword)cIncompleteAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeModTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyModBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////SourceModule
		////	: ModDef
		////	| ModHeader
		////;
		//ModDef returns SourceModule:
		//	incomplete?="incomplete"? type=ModType "=" body=ModBody ";"*;
		public ParserRule getRule() { return rule; }

		//incomplete?="incomplete"? type=ModType "=" body=ModBody ";"*
		public Group getGroup() { return cGroup; }

		//incomplete?="incomplete"?
		public Assignment getIncompleteAssignment_0() { return cIncompleteAssignment_0; }

		//"incomplete"
		public Keyword getIncompleteIncompleteKeyword_0_0() { return cIncompleteIncompleteKeyword_0_0; }

		//type=ModType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//ModType
		public RuleCall getTypeModTypeParserRuleCall_1_0() { return cTypeModTypeParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//body=ModBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//ModBody
		public RuleCall getBodyModBodyParserRuleCall_3_0() { return cBodyModBodyParserRuleCall_3_0; }

		//";"*
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ModTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cAbstractAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cAbstractAbstractKeyword_0_0_0 = (Keyword)cAbstractAssignment_0_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cResourceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cResourceResourceKeyword_1_0_0 = (Keyword)cResourceAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cInterfaceAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cInterfaceInterfaceKeyword_2_0_0 = (Keyword)cInterfaceAssignment_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cConcreteAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cConcreteConcreteKeyword_3_0_0 = (Keyword)cConcreteAssignment_3_0.eContents().get(0);
		private final Assignment cNameAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_3_1_0 = (RuleCall)cNameAssignment_3_1.eContents().get(0);
		private final Keyword cOfKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cAbstractNameAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cAbstractNameIdentParserRuleCall_3_3_0 = (RuleCall)cAbstractNameAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cInstanceAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cInstanceInstanceKeyword_4_0_0 = (Keyword)cInstanceAssignment_4_0.eContents().get(0);
		private final Assignment cNameAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_4_1_0 = (RuleCall)cNameAssignment_4_1.eContents().get(0);
		private final Keyword cOfKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cInterfaceIncludeAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cInterfaceIncludeIncludedParserRuleCall_4_3_0 = (RuleCall)cInterfaceIncludeAssignment_4_3.eContents().get(0);
		
		////ModHeader returns SourceModule
		////	: (incomplete?='incomplete')? type=ModType '=' body=ModHeaderBody
		////;
		//// Cross-ref checking of module names is done by Validation, not via grammar
		//ModType:
		//	abstract?="abstract" name=Ident | resource?="resource" name=Ident | interface?="interface" name=Ident |
		//	concrete?="concrete" name=Ident "of" abstractName=Ident | instance?="instance" name=Ident "of"
		//	interfaceInclude=Included;
		public ParserRule getRule() { return rule; }

		//abstract?="abstract" name=Ident | resource?="resource" name=Ident | interface?="interface" name=Ident |
		//concrete?="concrete" name=Ident "of" abstractName=Ident | instance?="instance" name=Ident "of"
		//interfaceInclude=Included
		public Alternatives getAlternatives() { return cAlternatives; }

		//abstract?="abstract" name=Ident
		public Group getGroup_0() { return cGroup_0; }

		//abstract?="abstract"
		public Assignment getAbstractAssignment_0_0() { return cAbstractAssignment_0_0; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_0_0_0() { return cAbstractAbstractKeyword_0_0_0; }

		//name=Ident
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_1_0() { return cNameIdentParserRuleCall_0_1_0; }

		//resource?="resource" name=Ident
		public Group getGroup_1() { return cGroup_1; }

		//resource?="resource"
		public Assignment getResourceAssignment_1_0() { return cResourceAssignment_1_0; }

		//"resource"
		public Keyword getResourceResourceKeyword_1_0_0() { return cResourceResourceKeyword_1_0_0; }

		//name=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//interface?="interface" name=Ident
		public Group getGroup_2() { return cGroup_2; }

		//interface?="interface"
		public Assignment getInterfaceAssignment_2_0() { return cInterfaceAssignment_2_0; }

		//"interface"
		public Keyword getInterfaceInterfaceKeyword_2_0_0() { return cInterfaceInterfaceKeyword_2_0_0; }

		//name=Ident
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_1_0() { return cNameIdentParserRuleCall_2_1_0; }

		//concrete?="concrete" name=Ident "of" abstractName=Ident
		public Group getGroup_3() { return cGroup_3; }

		//concrete?="concrete"
		public Assignment getConcreteAssignment_3_0() { return cConcreteAssignment_3_0; }

		//"concrete"
		public Keyword getConcreteConcreteKeyword_3_0_0() { return cConcreteConcreteKeyword_3_0_0; }

		//name=Ident
		public Assignment getNameAssignment_3_1() { return cNameAssignment_3_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_3_1_0() { return cNameIdentParserRuleCall_3_1_0; }

		//"of"
		public Keyword getOfKeyword_3_2() { return cOfKeyword_3_2; }

		//abstractName=Ident
		public Assignment getAbstractNameAssignment_3_3() { return cAbstractNameAssignment_3_3; }

		//Ident
		public RuleCall getAbstractNameIdentParserRuleCall_3_3_0() { return cAbstractNameIdentParserRuleCall_3_3_0; }

		//instance?="instance" name=Ident "of" interfaceInclude=Included
		public Group getGroup_4() { return cGroup_4; }

		//instance?="instance"
		public Assignment getInstanceAssignment_4_0() { return cInstanceAssignment_4_0; }

		//"instance"
		public Keyword getInstanceInstanceKeyword_4_0_0() { return cInstanceInstanceKeyword_4_0_0; }

		//name=Ident
		public Assignment getNameAssignment_4_1() { return cNameAssignment_4_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_4_1_0() { return cNameIdentParserRuleCall_4_1_0; }

		//"of"
		public Keyword getOfKeyword_4_2() { return cOfKeyword_4_2; }

		//interfaceInclude=Included
		public Assignment getInterfaceIncludeAssignment_4_3() { return cInterfaceIncludeAssignment_4_3; }

		//Included
		public RuleCall getInterfaceIncludeIncludedParserRuleCall_4_3_0() { return cInterfaceIncludeIncludedParserRuleCall_4_3_0; }
	}

	public class ModBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModBody");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExtendListAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExtendListListIncludedParserRuleCall_0_0_0 = (RuleCall)cExtendListAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cFunctorAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cFunctorIncludedParserRuleCall_0_1_1_0 = (RuleCall)cFunctorAssignment_0_1_1.eContents().get(0);
		private final Assignment cFunctorInstantiationAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final Keyword cFunctorInstantiationWithKeyword_0_1_2_0 = (Keyword)cFunctorInstantiationAssignment_0_1_2.eContents().get(0);
		private final Assignment cInstantiationListAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cInstantiationListListInstParserRuleCall_0_1_3_0 = (RuleCall)cInstantiationListAssignment_0_1_3.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cAsteriskAsteriskKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cModContentAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cModContentModContentParserRuleCall_0_2_1_0 = (RuleCall)cModContentAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFunctorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFunctorIncludedParserRuleCall_1_0_0 = (RuleCall)cFunctorAssignment_1_0.eContents().get(0);
		private final Assignment cFunctorInstantiationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cFunctorInstantiationWithKeyword_1_1_0 = (Keyword)cFunctorInstantiationAssignment_1_1.eContents().get(0);
		private final Assignment cInstantiationListAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cInstantiationListListInstParserRuleCall_1_2_0 = (RuleCall)cInstantiationListAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cAsteriskAsteriskKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cModContentAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cModContentModContentParserRuleCall_1_3_1_0 = (RuleCall)cModContentAssignment_1_3_1.eContents().get(0);
		private final Assignment cModContentAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cModContentModContentParserRuleCall_2_0 = (RuleCall)cModContentAssignment_2.eContents().get(0);
		
		////ModHeaderBody returns ModBody :
		////	extendList=ListIncluded
		////	('**' functor=Included functorInstantiation?='with' instantiationList=ListInst)?
		////	('**' modOpen=ModOpen)?
		////|
		////	functor=Included
		////	functorInstantiation?='with' instantiationList=ListInst
		////	('**' modOpen=ModOpen)?
		////|
		////	modOpen=ModOpen
		////;
		////
		////ModOpen
		////	: {ModOpen} ('open' openList=ListOpen)?
		////;
		//ModBody:
		//	extendList=ListIncluded ("**" functor=Included functorInstantiation?="with" instantiationList=ListInst)? ("**"
		//	modContent=ModContent)? | functor=Included functorInstantiation?="with" instantiationList=ListInst ("**"
		//	modContent=ModContent)? | modContent=ModContent;
		public ParserRule getRule() { return rule; }

		//extendList=ListIncluded ("**" functor=Included functorInstantiation?="with" instantiationList=ListInst)? ("**"
		//modContent=ModContent)? | functor=Included functorInstantiation?="with" instantiationList=ListInst ("**"
		//modContent=ModContent)? | modContent=ModContent
		public Alternatives getAlternatives() { return cAlternatives; }

		//extendList=ListIncluded ("**" functor=Included functorInstantiation?="with" instantiationList=ListInst)? ("**"
		//modContent=ModContent)?
		public Group getGroup_0() { return cGroup_0; }

		//extendList=ListIncluded
		public Assignment getExtendListAssignment_0_0() { return cExtendListAssignment_0_0; }

		//ListIncluded
		public RuleCall getExtendListListIncludedParserRuleCall_0_0_0() { return cExtendListListIncludedParserRuleCall_0_0_0; }

		//("**" functor=Included functorInstantiation?="with" instantiationList=ListInst)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_0_1_0() { return cAsteriskAsteriskKeyword_0_1_0; }

		//functor=Included
		public Assignment getFunctorAssignment_0_1_1() { return cFunctorAssignment_0_1_1; }

		//Included
		public RuleCall getFunctorIncludedParserRuleCall_0_1_1_0() { return cFunctorIncludedParserRuleCall_0_1_1_0; }

		//functorInstantiation?="with"
		public Assignment getFunctorInstantiationAssignment_0_1_2() { return cFunctorInstantiationAssignment_0_1_2; }

		//"with"
		public Keyword getFunctorInstantiationWithKeyword_0_1_2_0() { return cFunctorInstantiationWithKeyword_0_1_2_0; }

		//instantiationList=ListInst
		public Assignment getInstantiationListAssignment_0_1_3() { return cInstantiationListAssignment_0_1_3; }

		//ListInst
		public RuleCall getInstantiationListListInstParserRuleCall_0_1_3_0() { return cInstantiationListListInstParserRuleCall_0_1_3_0; }

		//("**" modContent=ModContent)?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_0_2_0() { return cAsteriskAsteriskKeyword_0_2_0; }

		//modContent=ModContent
		public Assignment getModContentAssignment_0_2_1() { return cModContentAssignment_0_2_1; }

		//ModContent
		public RuleCall getModContentModContentParserRuleCall_0_2_1_0() { return cModContentModContentParserRuleCall_0_2_1_0; }

		//functor=Included functorInstantiation?="with" instantiationList=ListInst ("**" modContent=ModContent)?
		public Group getGroup_1() { return cGroup_1; }

		//functor=Included
		public Assignment getFunctorAssignment_1_0() { return cFunctorAssignment_1_0; }

		//Included
		public RuleCall getFunctorIncludedParserRuleCall_1_0_0() { return cFunctorIncludedParserRuleCall_1_0_0; }

		//functorInstantiation?="with"
		public Assignment getFunctorInstantiationAssignment_1_1() { return cFunctorInstantiationAssignment_1_1; }

		//"with"
		public Keyword getFunctorInstantiationWithKeyword_1_1_0() { return cFunctorInstantiationWithKeyword_1_1_0; }

		//instantiationList=ListInst
		public Assignment getInstantiationListAssignment_1_2() { return cInstantiationListAssignment_1_2; }

		//ListInst
		public RuleCall getInstantiationListListInstParserRuleCall_1_2_0() { return cInstantiationListListInstParserRuleCall_1_2_0; }

		//("**" modContent=ModContent)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_3_0() { return cAsteriskAsteriskKeyword_1_3_0; }

		//modContent=ModContent
		public Assignment getModContentAssignment_1_3_1() { return cModContentAssignment_1_3_1; }

		//ModContent
		public RuleCall getModContentModContentParserRuleCall_1_3_1_0() { return cModContentModContentParserRuleCall_1_3_1_0; }

		//modContent=ModContent
		public Assignment getModContentAssignment_2() { return cModContentAssignment_2; }

		//ModContent
		public RuleCall getModContentModContentParserRuleCall_2_0() { return cModContentModContentParserRuleCall_2_0; }
	}

	public class ModContentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModContent");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cModContentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cJudgementsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cJudgementsTopDefParserRuleCall_0_1_1_0 = (RuleCall)cJudgementsAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cOpenKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpenListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpenListListOpenParserRuleCall_1_1_0 = (RuleCall)cOpenListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cInKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cJudgementsAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cJudgementsTopDefParserRuleCall_1_2_2_0 = (RuleCall)cJudgementsAssignment_1_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		
		//// combination of ModOpen & ModContent
		//ModContent:
		//	{ModContent} ("{" judgements+=TopDef* "}")? | "open" openList=ListOpen ("in" "{" judgements+=TopDef* "}")?;
		public ParserRule getRule() { return rule; }

		//{ModContent} ("{" judgements+=TopDef* "}")? | "open" openList=ListOpen ("in" "{" judgements+=TopDef* "}")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//{ModContent} ("{" judgements+=TopDef* "}")?
		public Group getGroup_0() { return cGroup_0; }

		//{ModContent}
		public Action getModContentAction_0_0() { return cModContentAction_0_0; }

		//("{" judgements+=TopDef* "}")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1_0() { return cLeftCurlyBracketKeyword_0_1_0; }

		//judgements+=TopDef*
		public Assignment getJudgementsAssignment_0_1_1() { return cJudgementsAssignment_0_1_1; }

		//TopDef
		public RuleCall getJudgementsTopDefParserRuleCall_0_1_1_0() { return cJudgementsTopDefParserRuleCall_0_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_1_2() { return cRightCurlyBracketKeyword_0_1_2; }

		//"open" openList=ListOpen ("in" "{" judgements+=TopDef* "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"open"
		public Keyword getOpenKeyword_1_0() { return cOpenKeyword_1_0; }

		//openList=ListOpen
		public Assignment getOpenListAssignment_1_1() { return cOpenListAssignment_1_1; }

		//ListOpen
		public RuleCall getOpenListListOpenParserRuleCall_1_1_0() { return cOpenListListOpenParserRuleCall_1_1_0; }

		//("in" "{" judgements+=TopDef* "}")?
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"in"
		public Keyword getInKeyword_1_2_0() { return cInKeyword_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2_1() { return cLeftCurlyBracketKeyword_1_2_1; }

		//judgements+=TopDef*
		public Assignment getJudgementsAssignment_1_2_2() { return cJudgementsAssignment_1_2_2; }

		//TopDef
		public RuleCall getJudgementsTopDefParserRuleCall_1_2_2_0() { return cJudgementsTopDefParserRuleCall_1_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2_3() { return cRightCurlyBracketKeyword_1_2_3; }
	}

	public class ListOpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListOpen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpensAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpensOpenParserRuleCall_0_0 = (RuleCall)cOpensAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOpensAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpensOpenParserRuleCall_1_1_0 = (RuleCall)cOpensAssignment_1_1.eContents().get(0);
		
		//ListOpen:
		//	opens+=Open ("," opens+=Open)*;
		public ParserRule getRule() { return rule; }

		//opens+=Open ("," opens+=Open)*
		public Group getGroup() { return cGroup; }

		//opens+=Open
		public Assignment getOpensAssignment_0() { return cOpensAssignment_0; }

		//Open
		public RuleCall getOpensOpenParserRuleCall_0_0() { return cOpensOpenParserRuleCall_0_0; }

		//("," opens+=Open)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//opens+=Open
		public Assignment getOpensAssignment_1_1() { return cOpensAssignment_1_1; }

		//Open
		public RuleCall getOpensOpenParserRuleCall_1_1_0() { return cOpensOpenParserRuleCall_1_1_0; }
	}

	public class OpenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Open");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAliasIdentParserRuleCall_1_1_0 = (RuleCall)cAliasAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameIdentParserRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Open:
		//	name=Ident | "(" alias=Ident "=" name=Ident ")";
		public ParserRule getRule() { return rule; }

		//name=Ident | "(" alias=Ident "=" name=Ident ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//"(" alias=Ident "=" name=Ident ")"
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//alias=Ident
		public Assignment getAliasAssignment_1_1() { return cAliasAssignment_1_1; }

		//Ident
		public RuleCall getAliasIdentParserRuleCall_1_1_0() { return cAliasIdentParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//name=Ident
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_3_0() { return cNameIdentParserRuleCall_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
	}

	public class ListInstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListInst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInstantiationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInstantiationsInstParserRuleCall_0_0 = (RuleCall)cInstantiationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cInstantiationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cInstantiationsInstParserRuleCall_1_1_0 = (RuleCall)cInstantiationsAssignment_1_1.eContents().get(0);
		
		//ListInst:
		//	instantiations+=Inst ("," instantiations+=Inst)*;
		public ParserRule getRule() { return rule; }

		//instantiations+=Inst ("," instantiations+=Inst)*
		public Group getGroup() { return cGroup; }

		//instantiations+=Inst
		public Assignment getInstantiationsAssignment_0() { return cInstantiationsAssignment_0; }

		//Inst
		public RuleCall getInstantiationsInstParserRuleCall_0_0() { return cInstantiationsInstParserRuleCall_0_0; }

		//("," instantiations+=Inst)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//instantiations+=Inst
		public Assignment getInstantiationsAssignment_1_1() { return cInstantiationsAssignment_1_1; }

		//Inst
		public RuleCall getInstantiationsInstParserRuleCall_1_1_0() { return cInstantiationsInstParserRuleCall_1_1_0; }
	}

	public class InstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Inst");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInterfaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInterfaceIdentParserRuleCall_1_0 = (RuleCall)cInterfaceAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIdentParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Inst:
		//	"(" interface=Ident "=" name=Ident ")";
		public ParserRule getRule() { return rule; }

		//"(" interface=Ident "=" name=Ident ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//interface=Ident
		public Assignment getInterfaceAssignment_1() { return cInterfaceAssignment_1; }

		//Ident
		public RuleCall getInterfaceIdentParserRuleCall_1_0() { return cInterfaceIdentParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//name=Ident
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_3_0() { return cNameIdentParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ListIncludedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListIncluded");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIncludedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIncludedIncludedParserRuleCall_0_0 = (RuleCall)cIncludedAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIncludedAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIncludedIncludedParserRuleCall_1_1_0 = (RuleCall)cIncludedAssignment_1_1.eContents().get(0);
		
		//ListIncluded:
		//	included+=Included ("," included+=Included)*;
		public ParserRule getRule() { return rule; }

		//included+=Included ("," included+=Included)*
		public Group getGroup() { return cGroup; }

		//included+=Included
		public Assignment getIncludedAssignment_0() { return cIncludedAssignment_0; }

		//Included
		public RuleCall getIncludedIncludedParserRuleCall_0_0() { return cIncludedIncludedParserRuleCall_0_0; }

		//("," included+=Included)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//included+=Included
		public Assignment getIncludedAssignment_1_1() { return cIncludedAssignment_1_1; }

		//Included
		public RuleCall getIncludedIncludedParserRuleCall_1_1_0() { return cIncludedIncludedParserRuleCall_1_1_0; }
	}

	public class IncludedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Included");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cInclusiveAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cInclusiveLeftSquareBracketKeyword_1_1_0 = (Keyword)cInclusiveAssignment_1_1.eContents().get(0);
		private final Assignment cIncludesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIncludesIdentParserRuleCall_1_2_0 = (RuleCall)cIncludesAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cIncludesAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cIncludesIdentParserRuleCall_1_3_1_0 = (RuleCall)cIncludesAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cExclusiveAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cExclusiveHyphenMinusKeyword_2_1_0 = (Keyword)cExclusiveAssignment_2_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cExcludesAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExcludesIdentParserRuleCall_2_3_0 = (RuleCall)cExcludesAssignment_2_3.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCommaKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cExcludesAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cExcludesIdentParserRuleCall_2_4_1_0 = (RuleCall)cExcludesAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		
		//Included:
		//	name=Ident | name=Ident inclusive?="[" includes+=Ident ("," includes+=Ident)* "]" | name=Ident exclusive?="-" "["
		//	excludes+=Ident ("," excludes+=Ident)* "]";
		public ParserRule getRule() { return rule; }

		//name=Ident | name=Ident inclusive?="[" includes+=Ident ("," includes+=Ident)* "]" | name=Ident exclusive?="-" "["
		//excludes+=Ident ("," excludes+=Ident)* "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//name=Ident inclusive?="[" includes+=Ident ("," includes+=Ident)* "]"
		public Group getGroup_1() { return cGroup_1; }

		//name=Ident
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_0_0() { return cNameIdentParserRuleCall_1_0_0; }

		//inclusive?="["
		public Assignment getInclusiveAssignment_1_1() { return cInclusiveAssignment_1_1; }

		//"["
		public Keyword getInclusiveLeftSquareBracketKeyword_1_1_0() { return cInclusiveLeftSquareBracketKeyword_1_1_0; }

		//includes+=Ident
		public Assignment getIncludesAssignment_1_2() { return cIncludesAssignment_1_2; }

		//Ident
		public RuleCall getIncludesIdentParserRuleCall_1_2_0() { return cIncludesIdentParserRuleCall_1_2_0; }

		//("," includes+=Ident)*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }

		//includes+=Ident
		public Assignment getIncludesAssignment_1_3_1() { return cIncludesAssignment_1_3_1; }

		//Ident
		public RuleCall getIncludesIdentParserRuleCall_1_3_1_0() { return cIncludesIdentParserRuleCall_1_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_4() { return cRightSquareBracketKeyword_1_4; }

		//name=Ident exclusive?="-" "[" excludes+=Ident ("," excludes+=Ident)* "]"
		public Group getGroup_2() { return cGroup_2; }

		//name=Ident
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_0_0() { return cNameIdentParserRuleCall_2_0_0; }

		//exclusive?="-"
		public Assignment getExclusiveAssignment_2_1() { return cExclusiveAssignment_2_1; }

		//"-"
		public Keyword getExclusiveHyphenMinusKeyword_2_1_0() { return cExclusiveHyphenMinusKeyword_2_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_2() { return cLeftSquareBracketKeyword_2_2; }

		//excludes+=Ident
		public Assignment getExcludesAssignment_2_3() { return cExcludesAssignment_2_3; }

		//Ident
		public RuleCall getExcludesIdentParserRuleCall_2_3_0() { return cExcludesIdentParserRuleCall_2_3_0; }

		//("," excludes+=Ident)*
		public Group getGroup_2_4() { return cGroup_2_4; }

		//","
		public Keyword getCommaKeyword_2_4_0() { return cCommaKeyword_2_4_0; }

		//excludes+=Ident
		public Assignment getExcludesAssignment_2_4_1() { return cExcludesAssignment_2_4_1; }

		//Ident
		public RuleCall getExcludesIdentParserRuleCall_2_4_1_0() { return cExcludesIdentParserRuleCall_2_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_5() { return cRightSquareBracketKeyword_2_5; }
	}

	public class TopDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCatAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cCatCatKeyword_0_0_0 = (Keyword)cCatAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cDefinitionsAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cDefinitionsCatDefParserRuleCall_0_1_0_0 = (RuleCall)cDefinitionsAssignment_0_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFunAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cFunFunKeyword_1_0_0 = (Keyword)cFunAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cDefinitionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cDefinitionsFunDefParserRuleCall_1_1_0_0 = (RuleCall)cDefinitionsAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cDefAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cDefDefKeyword_2_0_0 = (Keyword)cDefAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cDefinitionsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cDefinitionsDefDefParserRuleCall_2_1_0_0 = (RuleCall)cDefinitionsAssignment_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cDataAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cDataDataKeyword_3_0_0 = (Keyword)cDataAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Assignment cDefinitionsAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cDefinitionsDataDefParserRuleCall_3_1_0_0 = (RuleCall)cDefinitionsAssignment_3_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cParamAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cParamParamKeyword_4_0_0 = (Keyword)cParamAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cDefinitionsAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cDefinitionsParamDefParserRuleCall_4_1_0_0 = (RuleCall)cDefinitionsAssignment_4_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cOperAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cOperOperKeyword_5_0_0 = (Keyword)cOperAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Assignment cDefinitionsAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cDefinitionsOperDefParserRuleCall_5_1_0_0 = (RuleCall)cDefinitionsAssignment_5_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cLincatAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cLincatLincatKeyword_6_0_0 = (Keyword)cLincatAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Assignment cDefinitionsAssignment_6_1_0 = (Assignment)cGroup_6_1.eContents().get(0);
		private final RuleCall cDefinitionsTermDefParserRuleCall_6_1_0_0 = (RuleCall)cDefinitionsAssignment_6_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1_1 = (Keyword)cGroup_6_1.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cLindefAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cLindefLindefKeyword_7_0_0 = (Keyword)cLindefAssignment_7_0.eContents().get(0);
		private final Group cGroup_7_1 = (Group)cGroup_7.eContents().get(1);
		private final Assignment cDefinitionsAssignment_7_1_0 = (Assignment)cGroup_7_1.eContents().get(0);
		private final RuleCall cDefinitionsTermDefParserRuleCall_7_1_0_0 = (RuleCall)cDefinitionsAssignment_7_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1_1 = (Keyword)cGroup_7_1.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cLinAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cLinLinKeyword_8_0_0 = (Keyword)cLinAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Assignment cDefinitionsAssignment_8_1_0 = (Assignment)cGroup_8_1.eContents().get(0);
		private final RuleCall cDefinitionsLinDefParserRuleCall_8_1_0_0 = (RuleCall)cDefinitionsAssignment_8_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_1_1 = (Keyword)cGroup_8_1.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cPrintnameAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cPrintnamePrintnameKeyword_9_0_0 = (Keyword)cPrintnameAssignment_9_0.eContents().get(0);
		private final Keyword cCatKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Assignment cDefinitionsAssignment_9_2_0 = (Assignment)cGroup_9_2.eContents().get(0);
		private final RuleCall cDefinitionsTermDefParserRuleCall_9_2_0_0 = (RuleCall)cDefinitionsAssignment_9_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_2_1 = (Keyword)cGroup_9_2.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cPrintnameAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cPrintnamePrintnameKeyword_10_0_0 = (Keyword)cPrintnameAssignment_10_0.eContents().get(0);
		private final Keyword cFunKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Assignment cDefinitionsAssignment_10_2_0 = (Assignment)cGroup_10_2.eContents().get(0);
		private final RuleCall cDefinitionsTermDefParserRuleCall_10_2_0_0 = (RuleCall)cDefinitionsAssignment_10_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_2_1 = (Keyword)cGroup_10_2.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cFlagsAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cFlagsFlagsKeyword_11_0_0 = (Keyword)cFlagsAssignment_11_0.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Assignment cDefinitionsAssignment_11_1_0 = (Assignment)cGroup_11_1.eContents().get(0);
		private final RuleCall cDefinitionsFlagDefParserRuleCall_11_1_0_0 = (RuleCall)cDefinitionsAssignment_11_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1_1 = (Keyword)cGroup_11_1.eContents().get(1);
		
		//TopDef:
		//	cat?="cat" (definitions+=CatDef ";")+ | fun?="fun" (definitions+=FunDef ";")+ | def?="def" (definitions+=DefDef ";")+
		//	| data?="data" (definitions+=DataDef ";")+ | param?="param" (definitions+=ParamDef ";")+ | oper?="oper"
		//	(definitions+=OperDef ";")+ | lincat?="lincat" (definitions+=TermDef ";")+ | lindef?="lindef" (definitions+=TermDef
		//	";")+ | lin?="lin" (definitions+=LinDef ";")+ | printname?="printname" "cat" (definitions+=TermDef ";")+ |
		//	printname?="printname" "fun" (definitions+=TermDef ";")+ | flags?="flags" (definitions+=FlagDef ";")+;
		public ParserRule getRule() { return rule; }

		//cat?="cat" (definitions+=CatDef ";")+ | fun?="fun" (definitions+=FunDef ";")+ | def?="def" (definitions+=DefDef ";")+ |
		//data?="data" (definitions+=DataDef ";")+ | param?="param" (definitions+=ParamDef ";")+ | oper?="oper"
		//(definitions+=OperDef ";")+ | lincat?="lincat" (definitions+=TermDef ";")+ | lindef?="lindef" (definitions+=TermDef
		//";")+ | lin?="lin" (definitions+=LinDef ";")+ | printname?="printname" "cat" (definitions+=TermDef ";")+ |
		//printname?="printname" "fun" (definitions+=TermDef ";")+ | flags?="flags" (definitions+=FlagDef ";")+
		public Alternatives getAlternatives() { return cAlternatives; }

		//cat?="cat" (definitions+=CatDef ";")+
		public Group getGroup_0() { return cGroup_0; }

		//cat?="cat"
		public Assignment getCatAssignment_0_0() { return cCatAssignment_0_0; }

		//"cat"
		public Keyword getCatCatKeyword_0_0_0() { return cCatCatKeyword_0_0_0; }

		//(definitions+=CatDef ";")+
		public Group getGroup_0_1() { return cGroup_0_1; }

		//definitions+=CatDef
		public Assignment getDefinitionsAssignment_0_1_0() { return cDefinitionsAssignment_0_1_0; }

		//CatDef
		public RuleCall getDefinitionsCatDefParserRuleCall_0_1_0_0() { return cDefinitionsCatDefParserRuleCall_0_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1_1() { return cSemicolonKeyword_0_1_1; }

		//fun?="fun" (definitions+=FunDef ";")+
		public Group getGroup_1() { return cGroup_1; }

		//fun?="fun"
		public Assignment getFunAssignment_1_0() { return cFunAssignment_1_0; }

		//"fun"
		public Keyword getFunFunKeyword_1_0_0() { return cFunFunKeyword_1_0_0; }

		//(definitions+=FunDef ";")+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//definitions+=FunDef
		public Assignment getDefinitionsAssignment_1_1_0() { return cDefinitionsAssignment_1_1_0; }

		//FunDef
		public RuleCall getDefinitionsFunDefParserRuleCall_1_1_0_0() { return cDefinitionsFunDefParserRuleCall_1_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }

		//def?="def" (definitions+=DefDef ";")+
		public Group getGroup_2() { return cGroup_2; }

		//def?="def"
		public Assignment getDefAssignment_2_0() { return cDefAssignment_2_0; }

		//"def"
		public Keyword getDefDefKeyword_2_0_0() { return cDefDefKeyword_2_0_0; }

		//(definitions+=DefDef ";")+
		public Group getGroup_2_1() { return cGroup_2_1; }

		//definitions+=DefDef
		public Assignment getDefinitionsAssignment_2_1_0() { return cDefinitionsAssignment_2_1_0; }

		//DefDef
		public RuleCall getDefinitionsDefDefParserRuleCall_2_1_0_0() { return cDefinitionsDefDefParserRuleCall_2_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }

		//data?="data" (definitions+=DataDef ";")+
		public Group getGroup_3() { return cGroup_3; }

		//data?="data"
		public Assignment getDataAssignment_3_0() { return cDataAssignment_3_0; }

		//"data"
		public Keyword getDataDataKeyword_3_0_0() { return cDataDataKeyword_3_0_0; }

		//(definitions+=DataDef ";")+
		public Group getGroup_3_1() { return cGroup_3_1; }

		//definitions+=DataDef
		public Assignment getDefinitionsAssignment_3_1_0() { return cDefinitionsAssignment_3_1_0; }

		//DataDef
		public RuleCall getDefinitionsDataDefParserRuleCall_3_1_0_0() { return cDefinitionsDataDefParserRuleCall_3_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1_1() { return cSemicolonKeyword_3_1_1; }

		//param?="param" (definitions+=ParamDef ";")+
		public Group getGroup_4() { return cGroup_4; }

		//param?="param"
		public Assignment getParamAssignment_4_0() { return cParamAssignment_4_0; }

		//"param"
		public Keyword getParamParamKeyword_4_0_0() { return cParamParamKeyword_4_0_0; }

		//(definitions+=ParamDef ";")+
		public Group getGroup_4_1() { return cGroup_4_1; }

		//definitions+=ParamDef
		public Assignment getDefinitionsAssignment_4_1_0() { return cDefinitionsAssignment_4_1_0; }

		//ParamDef
		public RuleCall getDefinitionsParamDefParserRuleCall_4_1_0_0() { return cDefinitionsParamDefParserRuleCall_4_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1_1() { return cSemicolonKeyword_4_1_1; }

		//oper?="oper" (definitions+=OperDef ";")+
		public Group getGroup_5() { return cGroup_5; }

		//oper?="oper"
		public Assignment getOperAssignment_5_0() { return cOperAssignment_5_0; }

		//"oper"
		public Keyword getOperOperKeyword_5_0_0() { return cOperOperKeyword_5_0_0; }

		//(definitions+=OperDef ";")+
		public Group getGroup_5_1() { return cGroup_5_1; }

		//definitions+=OperDef
		public Assignment getDefinitionsAssignment_5_1_0() { return cDefinitionsAssignment_5_1_0; }

		//OperDef
		public RuleCall getDefinitionsOperDefParserRuleCall_5_1_0_0() { return cDefinitionsOperDefParserRuleCall_5_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1_1() { return cSemicolonKeyword_5_1_1; }

		//lincat?="lincat" (definitions+=TermDef ";")+
		public Group getGroup_6() { return cGroup_6; }

		//lincat?="lincat"
		public Assignment getLincatAssignment_6_0() { return cLincatAssignment_6_0; }

		//"lincat"
		public Keyword getLincatLincatKeyword_6_0_0() { return cLincatLincatKeyword_6_0_0; }

		//(definitions+=TermDef ";")+
		public Group getGroup_6_1() { return cGroup_6_1; }

		//definitions+=TermDef
		public Assignment getDefinitionsAssignment_6_1_0() { return cDefinitionsAssignment_6_1_0; }

		//TermDef
		public RuleCall getDefinitionsTermDefParserRuleCall_6_1_0_0() { return cDefinitionsTermDefParserRuleCall_6_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1_1() { return cSemicolonKeyword_6_1_1; }

		//lindef?="lindef" (definitions+=TermDef ";")+
		public Group getGroup_7() { return cGroup_7; }

		//lindef?="lindef"
		public Assignment getLindefAssignment_7_0() { return cLindefAssignment_7_0; }

		//"lindef"
		public Keyword getLindefLindefKeyword_7_0_0() { return cLindefLindefKeyword_7_0_0; }

		//(definitions+=TermDef ";")+
		public Group getGroup_7_1() { return cGroup_7_1; }

		//definitions+=TermDef
		public Assignment getDefinitionsAssignment_7_1_0() { return cDefinitionsAssignment_7_1_0; }

		//TermDef
		public RuleCall getDefinitionsTermDefParserRuleCall_7_1_0_0() { return cDefinitionsTermDefParserRuleCall_7_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1_1() { return cSemicolonKeyword_7_1_1; }

		//lin?="lin" (definitions+=LinDef ";")+
		public Group getGroup_8() { return cGroup_8; }

		//lin?="lin"
		public Assignment getLinAssignment_8_0() { return cLinAssignment_8_0; }

		//"lin"
		public Keyword getLinLinKeyword_8_0_0() { return cLinLinKeyword_8_0_0; }

		//(definitions+=LinDef ";")+
		public Group getGroup_8_1() { return cGroup_8_1; }

		//definitions+=LinDef
		public Assignment getDefinitionsAssignment_8_1_0() { return cDefinitionsAssignment_8_1_0; }

		//LinDef
		public RuleCall getDefinitionsLinDefParserRuleCall_8_1_0_0() { return cDefinitionsLinDefParserRuleCall_8_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_8_1_1() { return cSemicolonKeyword_8_1_1; }

		//printname?="printname" "cat" (definitions+=TermDef ";")+
		public Group getGroup_9() { return cGroup_9; }

		//printname?="printname"
		public Assignment getPrintnameAssignment_9_0() { return cPrintnameAssignment_9_0; }

		//"printname"
		public Keyword getPrintnamePrintnameKeyword_9_0_0() { return cPrintnamePrintnameKeyword_9_0_0; }

		//"cat"
		public Keyword getCatKeyword_9_1() { return cCatKeyword_9_1; }

		//(definitions+=TermDef ";")+
		public Group getGroup_9_2() { return cGroup_9_2; }

		//definitions+=TermDef
		public Assignment getDefinitionsAssignment_9_2_0() { return cDefinitionsAssignment_9_2_0; }

		//TermDef
		public RuleCall getDefinitionsTermDefParserRuleCall_9_2_0_0() { return cDefinitionsTermDefParserRuleCall_9_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_9_2_1() { return cSemicolonKeyword_9_2_1; }

		//printname?="printname" "fun" (definitions+=TermDef ";")+
		public Group getGroup_10() { return cGroup_10; }

		//printname?="printname"
		public Assignment getPrintnameAssignment_10_0() { return cPrintnameAssignment_10_0; }

		//"printname"
		public Keyword getPrintnamePrintnameKeyword_10_0_0() { return cPrintnamePrintnameKeyword_10_0_0; }

		//"fun"
		public Keyword getFunKeyword_10_1() { return cFunKeyword_10_1; }

		//(definitions+=TermDef ";")+
		public Group getGroup_10_2() { return cGroup_10_2; }

		//definitions+=TermDef
		public Assignment getDefinitionsAssignment_10_2_0() { return cDefinitionsAssignment_10_2_0; }

		//TermDef
		public RuleCall getDefinitionsTermDefParserRuleCall_10_2_0_0() { return cDefinitionsTermDefParserRuleCall_10_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_10_2_1() { return cSemicolonKeyword_10_2_1; }

		//flags?="flags" (definitions+=FlagDef ";")+
		public Group getGroup_11() { return cGroup_11; }

		//flags?="flags"
		public Assignment getFlagsAssignment_11_0() { return cFlagsAssignment_11_0; }

		//"flags"
		public Keyword getFlagsFlagsKeyword_11_0_0() { return cFlagsFlagsKeyword_11_0_0; }

		//(definitions+=FlagDef ";")+
		public Group getGroup_11_1() { return cGroup_11_1; }

		//definitions+=FlagDef
		public Assignment getDefinitionsAssignment_11_1_0() { return cDefinitionsAssignment_11_1_0; }

		//FlagDef
		public RuleCall getDefinitionsFlagDefParserRuleCall_11_1_0_0() { return cDefinitionsFlagDefParserRuleCall_11_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_11_1_1() { return cSemicolonKeyword_11_1_1; }
	}

	public class CatDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CatDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cContextAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cContextDDeclParserRuleCall_0_1_0 = (RuleCall)cContextAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cListLeftSquareBracketKeyword_1_0_0 = (Keyword)cListAssignment_1_0.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cContextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cContextDDeclParserRuleCall_1_2_0 = (RuleCall)cContextAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cSizeAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cSizeIntegerTerminalRuleCall_1_4_1_0 = (RuleCall)cSizeAssignment_1_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4_2 = (Keyword)cGroup_1_4.eContents().get(2);
		
		//CatDef:
		//	name=Ident context+=DDecl* | list?="[" name=Ident context+=DDecl* "]" ("{" size=Integer "}")?;
		public ParserRule getRule() { return rule; }

		//name=Ident context+=DDecl* | list?="[" name=Ident context+=DDecl* "]" ("{" size=Integer "}")?
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident context+=DDecl*
		public Group getGroup_0() { return cGroup_0; }

		//name=Ident
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0_0() { return cNameIdentParserRuleCall_0_0_0; }

		//context+=DDecl*
		public Assignment getContextAssignment_0_1() { return cContextAssignment_0_1; }

		//DDecl
		public RuleCall getContextDDeclParserRuleCall_0_1_0() { return cContextDDeclParserRuleCall_0_1_0; }

		//list?="[" name=Ident context+=DDecl* "]" ("{" size=Integer "}")?
		public Group getGroup_1() { return cGroup_1; }

		//list?="["
		public Assignment getListAssignment_1_0() { return cListAssignment_1_0; }

		//"["
		public Keyword getListLeftSquareBracketKeyword_1_0_0() { return cListLeftSquareBracketKeyword_1_0_0; }

		//name=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//context+=DDecl*
		public Assignment getContextAssignment_1_2() { return cContextAssignment_1_2; }

		//DDecl
		public RuleCall getContextDDeclParserRuleCall_1_2_0() { return cContextDDeclParserRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }

		//("{" size=Integer "}")?
		public Group getGroup_1_4() { return cGroup_1_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_4_0() { return cLeftCurlyBracketKeyword_1_4_0; }

		//size=Integer
		public Assignment getSizeAssignment_1_4_1() { return cSizeAssignment_1_4_1; }

		//Integer
		public RuleCall getSizeIntegerTerminalRuleCall_1_4_1_0() { return cSizeIntegerTerminalRuleCall_1_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_4_2() { return cRightCurlyBracketKeyword_1_4_2; }
	}

	public class FunDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//FunDef:
		//	name+=Ident ("," name+=Ident)* ":" type=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Ident ("," name+=Ident)* ":" type=Exp
		public Group getGroup() { return cGroup; }

		//name+=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//("," name+=Ident)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name+=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=Exp
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_3_0() { return cTypeExpParserRuleCall_3_0; }
	}

	public class DefDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cDefinitionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_0_3_0 = (RuleCall)cDefinitionAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cPatternListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPatternListListPattParserRuleCall_1_1_0 = (RuleCall)cPatternListAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cDefinitionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_1_3_0 = (RuleCall)cDefinitionAssignment_1_3.eContents().get(0);
		
		//DefDef:
		//	name+=Name ("," name+=Name)* "=" definition=Exp | name+=Name patternList=ListPatt "=" definition=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Name ("," name+=Name)* "=" definition=Exp | name+=Name patternList=ListPatt "=" definition=Exp
		public Alternatives getAlternatives() { return cAlternatives; }

		//name+=Name ("," name+=Name)* "=" definition=Exp
		public Group getGroup_0() { return cGroup_0; }

		//name+=Name
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//("," name+=Name)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//name+=Name
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_1_1_0() { return cNameNameParserRuleCall_0_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_0_3() { return cDefinitionAssignment_0_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_0_3_0() { return cDefinitionExpParserRuleCall_0_3_0; }

		//name+=Name patternList=ListPatt "=" definition=Exp
		public Group getGroup_1() { return cGroup_1; }

		//name+=Name
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0() { return cNameNameParserRuleCall_1_0_0; }

		//patternList=ListPatt
		public Assignment getPatternListAssignment_1_1() { return cPatternListAssignment_1_1; }

		//ListPatt
		public RuleCall getPatternListListPattParserRuleCall_1_1_0() { return cPatternListListPattParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_1_3() { return cDefinitionAssignment_1_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_1_3_0() { return cDefinitionExpParserRuleCall_1_3_0; }
	}

	public class DataDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cConstructorsAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cConstructorsIdentParserRuleCall_0_2_0 = (RuleCall)cConstructorsAssignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Keyword cVerticalLineKeyword_0_3_0 = (Keyword)cGroup_0_3.eContents().get(0);
		private final Assignment cConstructorsAssignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cConstructorsIdentParserRuleCall_0_3_1_0 = (RuleCall)cConstructorsAssignment_0_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_1_3_0 = (RuleCall)cTypeAssignment_1_3.eContents().get(0);
		
		//DataDef:
		//	name+=Ident "=" constructors+=Ident ("|" constructors+=Ident)* | name+=Ident ("," name+=Ident)* ":" type=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Ident "=" constructors+=Ident ("|" constructors+=Ident)* | name+=Ident ("," name+=Ident)* ":" type=Exp
		public Alternatives getAlternatives() { return cAlternatives; }

		//name+=Ident "=" constructors+=Ident ("|" constructors+=Ident)*
		public Group getGroup_0() { return cGroup_0; }

		//name+=Ident
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0_0() { return cNameIdentParserRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//constructors+=Ident
		public Assignment getConstructorsAssignment_0_2() { return cConstructorsAssignment_0_2; }

		//Ident
		public RuleCall getConstructorsIdentParserRuleCall_0_2_0() { return cConstructorsIdentParserRuleCall_0_2_0; }

		//("|" constructors+=Ident)*
		public Group getGroup_0_3() { return cGroup_0_3; }

		//"|"
		public Keyword getVerticalLineKeyword_0_3_0() { return cVerticalLineKeyword_0_3_0; }

		//constructors+=Ident
		public Assignment getConstructorsAssignment_0_3_1() { return cConstructorsAssignment_0_3_1; }

		//Ident
		public RuleCall getConstructorsIdentParserRuleCall_0_3_1_0() { return cConstructorsIdentParserRuleCall_0_3_1_0; }

		//name+=Ident ("," name+=Ident)* ":" type=Exp
		public Group getGroup_1() { return cGroup_1; }

		//name+=Ident
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_0_0() { return cNameIdentParserRuleCall_1_0_0; }

		//("," name+=Ident)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//name+=Ident
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_1_0() { return cNameIdentParserRuleCall_1_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//type=Exp
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_1_3_0() { return cTypeExpParserRuleCall_1_3_0; }
	}

	public class ParamDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConstructorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConstructorsParConstrParserRuleCall_1_1_0 = (RuleCall)cConstructorsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cVerticalLineKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cConstructorsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cConstructorsParConstrParserRuleCall_1_2_1_0 = (RuleCall)cConstructorsAssignment_1_2_1.eContents().get(0);
		
		//ParamDef:
		//	name=Ident ("=" constructors+=ParConstr ("|" constructors+=ParConstr)*)?;
		public ParserRule getRule() { return rule; }

		//name=Ident ("=" constructors+=ParConstr ("|" constructors+=ParConstr)*)?
		public Group getGroup() { return cGroup; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//("=" constructors+=ParConstr ("|" constructors+=ParConstr)*)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//constructors+=ParConstr
		public Assignment getConstructorsAssignment_1_1() { return cConstructorsAssignment_1_1; }

		//ParConstr
		public RuleCall getConstructorsParConstrParserRuleCall_1_1_0() { return cConstructorsParConstrParserRuleCall_1_1_0; }

		//("|" constructors+=ParConstr)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"|"
		public Keyword getVerticalLineKeyword_1_2_0() { return cVerticalLineKeyword_1_2_0; }

		//constructors+=ParConstr
		public Assignment getConstructorsAssignment_1_2_1() { return cConstructorsAssignment_1_2_1; }

		//ParConstr
		public RuleCall getConstructorsParConstrParserRuleCall_1_2_1_0() { return cConstructorsParConstrParserRuleCall_1_2_1_0; }
	}

	public class OperDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_0_3_0 = (RuleCall)cTypeAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cEqualsSignKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Alternatives cAlternatives_0_4_1 = (Alternatives)cGroup_0_4.eContents().get(1);
		private final Assignment cDefinitionAssignment_0_4_1_0 = (Assignment)cAlternatives_0_4_1.eContents().get(0);
		private final RuleCall cDefinitionExpParserRuleCall_0_4_1_0_0 = (RuleCall)cDefinitionAssignment_0_4_1_0.eContents().get(0);
		private final Group cGroup_0_4_1_1 = (Group)cAlternatives_0_4_1.eContents().get(1);
		private final Assignment cOverloadAssignment_0_4_1_1_0 = (Assignment)cGroup_0_4_1_1.eContents().get(0);
		private final Keyword cOverloadOverloadKeyword_0_4_1_1_0_0 = (Keyword)cOverloadAssignment_0_4_1_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_4_1_1_1 = (Keyword)cGroup_0_4_1_1.eContents().get(1);
		private final Assignment cOverloadsAssignment_0_4_1_1_2 = (Assignment)cGroup_0_4_1_1.eContents().get(2);
		private final RuleCall cOverloadsOperDefInnerParserRuleCall_0_4_1_1_2_0 = (RuleCall)cOverloadsAssignment_0_4_1_1_2.eContents().get(0);
		private final Group cGroup_0_4_1_1_3 = (Group)cGroup_0_4_1_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_0_4_1_1_3_0 = (Keyword)cGroup_0_4_1_1_3.eContents().get(0);
		private final Assignment cOverloadsAssignment_0_4_1_1_3_1 = (Assignment)cGroup_0_4_1_1_3.eContents().get(1);
		private final RuleCall cOverloadsOperDefInnerParserRuleCall_0_4_1_1_3_1_0 = (RuleCall)cOverloadsAssignment_0_4_1_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_4_1_1_4 = (Keyword)cGroup_0_4_1_1.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_0_4_1_1_5 = (Keyword)cGroup_0_4_1_1.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Assignment cDefinitionAssignment_1_3_0 = (Assignment)cAlternatives_1_3.eContents().get(0);
		private final RuleCall cDefinitionExpParserRuleCall_1_3_0_0 = (RuleCall)cDefinitionAssignment_1_3_0.eContents().get(0);
		private final Group cGroup_1_3_1 = (Group)cAlternatives_1_3.eContents().get(1);
		private final Assignment cOverloadAssignment_1_3_1_0 = (Assignment)cGroup_1_3_1.eContents().get(0);
		private final Keyword cOverloadOverloadKeyword_1_3_1_0_0 = (Keyword)cOverloadAssignment_1_3_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_3_1_1 = (Keyword)cGroup_1_3_1.eContents().get(1);
		private final Assignment cOverloadsAssignment_1_3_1_2 = (Assignment)cGroup_1_3_1.eContents().get(2);
		private final RuleCall cOverloadsOperDefInnerParserRuleCall_1_3_1_2_0 = (RuleCall)cOverloadsAssignment_1_3_1_2.eContents().get(0);
		private final Group cGroup_1_3_1_3 = (Group)cGroup_1_3_1.eContents().get(3);
		private final Keyword cSemicolonKeyword_1_3_1_3_0 = (Keyword)cGroup_1_3_1_3.eContents().get(0);
		private final Assignment cOverloadsAssignment_1_3_1_3_1 = (Assignment)cGroup_1_3_1_3.eContents().get(1);
		private final RuleCall cOverloadsOperDefInnerParserRuleCall_1_3_1_3_1_0 = (RuleCall)cOverloadsAssignment_1_3_1_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3_1_4 = (Keyword)cGroup_1_3_1.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_1_3_1_5 = (Keyword)cGroup_1_3_1.eContents().get(5);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cArgsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_2_1_0 = (RuleCall)cArgsAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cDefinitionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_2_3_0 = (RuleCall)cDefinitionAssignment_2_3.eContents().get(0);
		
		//// Modified to handle "overload" syntax
		////OperDef
		////  : ListName ':' Exp 
		////  | ListName ':' Exp	'=' Exp
		////  | ListName 			'=' Exp
		////  | Name ListArg 		'=' Exp
		//OperDef:
		//	name+=Name ("," name+=Name)* ":" type=Exp ("=" (definition=Exp | overload?="overload" "{" overloads+=OperDefInner (";"
		//	overloads+=OperDefInner)* ";"? "}"))? | name+=Name ("," name+=Name)* "=" (definition=Exp | overload?="overload" "{"
		//	overloads+=OperDefInner (";" overloads+=OperDefInner)* ";"? "}") | name+=Name args+=Arg+ "=" definition=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Name ("," name+=Name)* ":" type=Exp ("=" (definition=Exp | overload?="overload" "{" overloads+=OperDefInner (";"
		//overloads+=OperDefInner)* ";"? "}"))? | name+=Name ("," name+=Name)* "=" (definition=Exp | overload?="overload" "{"
		//overloads+=OperDefInner (";" overloads+=OperDefInner)* ";"? "}") | name+=Name args+=Arg+ "=" definition=Exp
		public Alternatives getAlternatives() { return cAlternatives; }

		//name+=Name ("," name+=Name)* ":" type=Exp ("=" (definition=Exp | overload?="overload" "{" overloads+=OperDefInner (";"
		//overloads+=OperDefInner)* ";"? "}"))?
		public Group getGroup_0() { return cGroup_0; }

		//name+=Name
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//("," name+=Name)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//name+=Name
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_1_1_0() { return cNameNameParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//type=Exp
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_0_3_0() { return cTypeExpParserRuleCall_0_3_0; }

		//("=" (definition=Exp | overload?="overload" "{" overloads+=OperDefInner (";" overloads+=OperDefInner)* ";"? "}"))?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//"="
		public Keyword getEqualsSignKeyword_0_4_0() { return cEqualsSignKeyword_0_4_0; }

		//definition=Exp | overload?="overload" "{" overloads+=OperDefInner (";" overloads+=OperDefInner)* ";"? "}"
		public Alternatives getAlternatives_0_4_1() { return cAlternatives_0_4_1; }

		//definition=Exp
		public Assignment getDefinitionAssignment_0_4_1_0() { return cDefinitionAssignment_0_4_1_0; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_0_4_1_0_0() { return cDefinitionExpParserRuleCall_0_4_1_0_0; }

		//overload?="overload" "{" overloads+=OperDefInner (";" overloads+=OperDefInner)* ";"? "}"
		public Group getGroup_0_4_1_1() { return cGroup_0_4_1_1; }

		//overload?="overload"
		public Assignment getOverloadAssignment_0_4_1_1_0() { return cOverloadAssignment_0_4_1_1_0; }

		//"overload"
		public Keyword getOverloadOverloadKeyword_0_4_1_1_0_0() { return cOverloadOverloadKeyword_0_4_1_1_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_4_1_1_1() { return cLeftCurlyBracketKeyword_0_4_1_1_1; }

		//overloads+=OperDefInner
		public Assignment getOverloadsAssignment_0_4_1_1_2() { return cOverloadsAssignment_0_4_1_1_2; }

		//OperDefInner
		public RuleCall getOverloadsOperDefInnerParserRuleCall_0_4_1_1_2_0() { return cOverloadsOperDefInnerParserRuleCall_0_4_1_1_2_0; }

		//(";" overloads+=OperDefInner)*
		public Group getGroup_0_4_1_1_3() { return cGroup_0_4_1_1_3; }

		//";"
		public Keyword getSemicolonKeyword_0_4_1_1_3_0() { return cSemicolonKeyword_0_4_1_1_3_0; }

		//overloads+=OperDefInner
		public Assignment getOverloadsAssignment_0_4_1_1_3_1() { return cOverloadsAssignment_0_4_1_1_3_1; }

		//OperDefInner
		public RuleCall getOverloadsOperDefInnerParserRuleCall_0_4_1_1_3_1_0() { return cOverloadsOperDefInnerParserRuleCall_0_4_1_1_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_0_4_1_1_4() { return cSemicolonKeyword_0_4_1_1_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4_1_1_5() { return cRightCurlyBracketKeyword_0_4_1_1_5; }

		//name+=Name ("," name+=Name)* "=" (definition=Exp | overload?="overload" "{" overloads+=OperDefInner (";"
		//overloads+=OperDefInner)* ";"? "}")
		public Group getGroup_1() { return cGroup_1; }

		//name+=Name
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0() { return cNameNameParserRuleCall_1_0_0; }

		//("," name+=Name)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//name+=Name
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_1_1_0() { return cNameNameParserRuleCall_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//definition=Exp | overload?="overload" "{" overloads+=OperDefInner (";" overloads+=OperDefInner)* ";"? "}"
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }

		//definition=Exp
		public Assignment getDefinitionAssignment_1_3_0() { return cDefinitionAssignment_1_3_0; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_1_3_0_0() { return cDefinitionExpParserRuleCall_1_3_0_0; }

		//overload?="overload" "{" overloads+=OperDefInner (";" overloads+=OperDefInner)* ";"? "}"
		public Group getGroup_1_3_1() { return cGroup_1_3_1; }

		//overload?="overload"
		public Assignment getOverloadAssignment_1_3_1_0() { return cOverloadAssignment_1_3_1_0; }

		//"overload"
		public Keyword getOverloadOverloadKeyword_1_3_1_0_0() { return cOverloadOverloadKeyword_1_3_1_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_3_1_1() { return cLeftCurlyBracketKeyword_1_3_1_1; }

		//overloads+=OperDefInner
		public Assignment getOverloadsAssignment_1_3_1_2() { return cOverloadsAssignment_1_3_1_2; }

		//OperDefInner
		public RuleCall getOverloadsOperDefInnerParserRuleCall_1_3_1_2_0() { return cOverloadsOperDefInnerParserRuleCall_1_3_1_2_0; }

		//(";" overloads+=OperDefInner)*
		public Group getGroup_1_3_1_3() { return cGroup_1_3_1_3; }

		//";"
		public Keyword getSemicolonKeyword_1_3_1_3_0() { return cSemicolonKeyword_1_3_1_3_0; }

		//overloads+=OperDefInner
		public Assignment getOverloadsAssignment_1_3_1_3_1() { return cOverloadsAssignment_1_3_1_3_1; }

		//OperDefInner
		public RuleCall getOverloadsOperDefInnerParserRuleCall_1_3_1_3_1_0() { return cOverloadsOperDefInnerParserRuleCall_1_3_1_3_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_3_1_4() { return cSemicolonKeyword_1_3_1_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3_1_5() { return cRightCurlyBracketKeyword_1_3_1_5; }

		//name+=Name args+=Arg+ "=" definition=Exp
		public Group getGroup_2() { return cGroup_2; }

		//name+=Name
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0_0() { return cNameNameParserRuleCall_2_0_0; }

		//args+=Arg+
		public Assignment getArgsAssignment_2_1() { return cArgsAssignment_2_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_2_1_0() { return cArgsArgParserRuleCall_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_2_3() { return cDefinitionAssignment_2_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_2_3_0() { return cDefinitionExpParserRuleCall_2_3_0; }
	}

	public class OperDefInnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperDefInner");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_0_3_0 = (RuleCall)cTypeAssignment_0_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cDefinitionAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cDefinitionExpParserRuleCall_0_5_0 = (RuleCall)cDefinitionAssignment_0_5.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cDefinitionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_1_3_0 = (RuleCall)cDefinitionAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Assignment cArgsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_2_1_0 = (RuleCall)cArgsAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cDefinitionAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_2_3_0 = (RuleCall)cDefinitionAssignment_2_3.eContents().get(0);
		
		//OperDefInner returns OperDef:
		//	name+=Name ("," name+=Name)* ":" type=Exp "=" definition=Exp? | name+=Name ("," name+=Name)* "=" definition=Exp |
		//	name+=Name args+=Arg+ "=" definition=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Name ("," name+=Name)* ":" type=Exp "=" definition=Exp? | name+=Name ("," name+=Name)* "=" definition=Exp |
		//name+=Name args+=Arg+ "=" definition=Exp
		public Alternatives getAlternatives() { return cAlternatives; }

		//name+=Name ("," name+=Name)* ":" type=Exp "=" definition=Exp?
		public Group getGroup_0() { return cGroup_0; }

		//name+=Name
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//("," name+=Name)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//name+=Name
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_1_1_0() { return cNameNameParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//type=Exp
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_0_3_0() { return cTypeExpParserRuleCall_0_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_4() { return cEqualsSignKeyword_0_4; }

		//definition=Exp?
		public Assignment getDefinitionAssignment_0_5() { return cDefinitionAssignment_0_5; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_0_5_0() { return cDefinitionExpParserRuleCall_0_5_0; }

		//name+=Name ("," name+=Name)* "=" definition=Exp
		public Group getGroup_1() { return cGroup_1; }

		//name+=Name
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0() { return cNameNameParserRuleCall_1_0_0; }

		//("," name+=Name)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//name+=Name
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_1_1_0() { return cNameNameParserRuleCall_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_1_3() { return cDefinitionAssignment_1_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_1_3_0() { return cDefinitionExpParserRuleCall_1_3_0; }

		//name+=Name args+=Arg+ "=" definition=Exp
		public Group getGroup_2() { return cGroup_2; }

		//name+=Name
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_2_0_0() { return cNameNameParserRuleCall_2_0_0; }

		//args+=Arg+
		public Assignment getArgsAssignment_2_1() { return cArgsAssignment_2_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_2_1_0() { return cArgsArgParserRuleCall_2_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_2() { return cEqualsSignKeyword_2_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_2_3() { return cDefinitionAssignment_2_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_2_3_0() { return cDefinitionExpParserRuleCall_2_3_0; }
	}

	public class LinDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cDefinitionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_0_3_0 = (RuleCall)cDefinitionAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsArgParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cDefinitionAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_1_3_0 = (RuleCall)cDefinitionAssignment_1_3.eContents().get(0);
		
		//LinDef:
		//	name+=Name ("," name+=Name)* "=" definition=Exp | name+=Name args+=Arg+ "=" definition=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Name ("," name+=Name)* "=" definition=Exp | name+=Name args+=Arg+ "=" definition=Exp
		public Alternatives getAlternatives() { return cAlternatives; }

		//name+=Name ("," name+=Name)* "=" definition=Exp
		public Group getGroup_0() { return cGroup_0; }

		//name+=Name
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0_0() { return cNameNameParserRuleCall_0_0_0; }

		//("," name+=Name)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//name+=Name
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_1_1_0() { return cNameNameParserRuleCall_0_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_2() { return cEqualsSignKeyword_0_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_0_3() { return cDefinitionAssignment_0_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_0_3_0() { return cDefinitionExpParserRuleCall_0_3_0; }

		//name+=Name args+=Arg+ "=" definition=Exp
		public Group getGroup_1() { return cGroup_1; }

		//name+=Name
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_0_0() { return cNameNameParserRuleCall_1_0_0; }

		//args+=Arg+
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//Arg
		public RuleCall getArgsArgParserRuleCall_1_1_0() { return cArgsArgParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_1_3() { return cDefinitionAssignment_1_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_1_3_0() { return cDefinitionExpParserRuleCall_1_3_0; }
	}

	public class TermDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TermDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameNameParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefinitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefinitionExpParserRuleCall_3_0 = (RuleCall)cDefinitionAssignment_3.eContents().get(0);
		
		//TermDef:
		//	name+=Name ("," name+=Name)* "=" definition=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Name ("," name+=Name)* "=" definition=Exp
		public Group getGroup() { return cGroup; }

		//name+=Name
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Name
		public RuleCall getNameNameParserRuleCall_0_0() { return cNameNameParserRuleCall_0_0; }

		//("," name+=Name)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name+=Name
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Name
		public RuleCall getNameNameParserRuleCall_1_1_0() { return cNameNameParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//definition=Exp
		public Assignment getDefinitionAssignment_3() { return cDefinitionAssignment_3; }

		//Exp
		public RuleCall getDefinitionExpParserRuleCall_3_0() { return cDefinitionExpParserRuleCall_3_0; }
	}

	public class FlagDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FlagDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueIdentParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cStrValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cStrValueStringTerminalRuleCall_2_1_0 = (RuleCall)cStrValueAssignment_2_1.eContents().get(0);
		
		//FlagDef:
		//	name=Ident "=" (value=Ident | strValue=String);
		public ParserRule getRule() { return rule; }

		//name=Ident "=" (value=Ident | strValue=String)
		public Group getGroup() { return cGroup; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Ident | strValue=String
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=Ident
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//Ident
		public RuleCall getValueIdentParserRuleCall_2_0_0() { return cValueIdentParserRuleCall_2_0_0; }

		//strValue=String
		public Assignment getStrValueAssignment_2_1() { return cStrValueAssignment_2_1; }

		//String
		public RuleCall getStrValueStringTerminalRuleCall_2_1_0() { return cStrValueStringTerminalRuleCall_2_1_0; }
	}

	public class ParConstrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParConstr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cConstructorsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConstructorsDDeclParserRuleCall_1_0 = (RuleCall)cConstructorsAssignment_1.eContents().get(0);
		
		//ParConstr:
		//	name=Ident constructors+=DDecl*;
		public ParserRule getRule() { return rule; }

		//name=Ident constructors+=DDecl*
		public Group getGroup() { return cGroup; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//constructors+=DDecl*
		public Assignment getConstructorsAssignment_1() { return cConstructorsAssignment_1; }

		//DDecl
		public RuleCall getConstructorsDDeclParserRuleCall_1_0() { return cConstructorsDDeclParserRuleCall_1_0; }
	}

	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Name");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Name:
		//	name=Ident | "[" name=Ident "]";
		public ParserRule getRule() { return rule; }

		//name=Ident | "[" name=Ident "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//"[" name=Ident "]"
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//name=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class LocDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LocDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cNameAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_0_1_1_0 = (RuleCall)cNameAssignment_0_1_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cTypeAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTypeExpParserRuleCall_0_3_0 = (RuleCall)cTypeAssignment_0_3.eContents().get(0);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Keyword cEqualsSignKeyword_0_4_0 = (Keyword)cGroup_0_4.eContents().get(0);
		private final Assignment cValueAssignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cValueExpParserRuleCall_0_4_1_0 = (RuleCall)cValueAssignment_0_4_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_1_0 = (RuleCall)cNameAssignment_1_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueExpParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		
		//LocDef:
		//	name+=Ident ("," name+=Ident)* ":" type=Exp ("=" value=Exp)? | name+=Ident ("," name+=Ident)* "=" value=Exp;
		public ParserRule getRule() { return rule; }

		//name+=Ident ("," name+=Ident)* ":" type=Exp ("=" value=Exp)? | name+=Ident ("," name+=Ident)* "=" value=Exp
		public Alternatives getAlternatives() { return cAlternatives; }

		//name+=Ident ("," name+=Ident)* ":" type=Exp ("=" value=Exp)?
		public Group getGroup_0() { return cGroup_0; }

		//name+=Ident
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0_0() { return cNameIdentParserRuleCall_0_0_0; }

		//("," name+=Ident)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//name+=Ident
		public Assignment getNameAssignment_0_1_1() { return cNameAssignment_0_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_1_1_0() { return cNameIdentParserRuleCall_0_1_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//type=Exp
		public Assignment getTypeAssignment_0_3() { return cTypeAssignment_0_3; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_0_3_0() { return cTypeExpParserRuleCall_0_3_0; }

		//("=" value=Exp)?
		public Group getGroup_0_4() { return cGroup_0_4; }

		//"="
		public Keyword getEqualsSignKeyword_0_4_0() { return cEqualsSignKeyword_0_4_0; }

		//value=Exp
		public Assignment getValueAssignment_0_4_1() { return cValueAssignment_0_4_1; }

		//Exp
		public RuleCall getValueExpParserRuleCall_0_4_1_0() { return cValueExpParserRuleCall_0_4_1_0; }

		//name+=Ident ("," name+=Ident)* "=" value=Exp
		public Group getGroup_1() { return cGroup_1; }

		//name+=Ident
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_0_0() { return cNameIdentParserRuleCall_1_0_0; }

		//("," name+=Ident)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//name+=Ident
		public Assignment getNameAssignment_1_1_1() { return cNameAssignment_1_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_1_0() { return cNameIdentParserRuleCall_1_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_2() { return cEqualsSignKeyword_1_2; }

		//value=Exp
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }

		//Exp
		public RuleCall getValueExpParserRuleCall_1_3_0() { return cValueExpParserRuleCall_1_3_0; }
	}

	public class ListLocDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListLocDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListLocDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLocalDefinitionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLocalDefinitionsLocDefParserRuleCall_1_0_0 = (RuleCall)cLocalDefinitionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cLocalDefinitionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cLocalDefinitionsLocDefParserRuleCall_1_1_1_0 = (RuleCall)cLocalDefinitionsAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ListLocDef:
		//	{ListLocDef} (localDefinitions+=LocDef (";" localDefinitions+=LocDef)* ";"?)?;
		public ParserRule getRule() { return rule; }

		//{ListLocDef} (localDefinitions+=LocDef (";" localDefinitions+=LocDef)* ";"?)?
		public Group getGroup() { return cGroup; }

		//{ListLocDef}
		public Action getListLocDefAction_0() { return cListLocDefAction_0; }

		//(localDefinitions+=LocDef (";" localDefinitions+=LocDef)* ";"?)?
		public Group getGroup_1() { return cGroup_1; }

		//localDefinitions+=LocDef
		public Assignment getLocalDefinitionsAssignment_1_0() { return cLocalDefinitionsAssignment_1_0; }

		//LocDef
		public RuleCall getLocalDefinitionsLocDefParserRuleCall_1_0_0() { return cLocalDefinitionsLocDefParserRuleCall_1_0_0; }

		//(";" localDefinitions+=LocDef)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//localDefinitions+=LocDef
		public Assignment getLocalDefinitionsAssignment_1_1_1() { return cLocalDefinitionsAssignment_1_1_1; }

		//LocDef
		public RuleCall getLocalDefinitionsLocDefParserRuleCall_1_1_1_0() { return cLocalDefinitionsLocDefParserRuleCall_1_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpLF_Exp1or3ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFunAbstractionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cFunAbstractionReverseSolidusKeyword_1_0_0 = (Keyword)cFunAbstractionAssignment_1_0.eContents().get(0);
		private final Assignment cBindListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBindListListBindParserRuleCall_1_1_0 = (RuleCall)cBindListAssignment_1_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cRightAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cRightExpParserRuleCall_1_3_0 = (RuleCall)cRightAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTableAbstracttionAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cTableAbstracttionReverseSolidusReverseSolidusKeyword_2_0_0 = (Keyword)cTableAbstracttionAssignment_2_0.eContents().get(0);
		private final Assignment cBindListAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBindListListBindParserRuleCall_2_1_0 = (RuleCall)cBindListAssignment_2_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cRightAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cRightExpParserRuleCall_2_3_0 = (RuleCall)cRightAssignment_2_3.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBindListAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBindListListBindParserRuleCall_3_1_0 = (RuleCall)cBindListAssignment_3_1.eContents().get(0);
		private final Keyword cColonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cDeclAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cDeclExpParserRuleCall_3_3_0 = (RuleCall)cDeclAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cRightAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cRightExpParserRuleCall_3_6_0 = (RuleCall)cRightAssignment_3_6.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cDefListAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cDefListListLocDefParserRuleCall_4_2_0 = (RuleCall)cDefListAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Keyword cInKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cRightAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cRightExpParserRuleCall_4_5_0 = (RuleCall)cRightAssignment_4_5.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLetKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefListAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefListListLocDefParserRuleCall_5_1_0 = (RuleCall)cDefListAssignment_5_1.eContents().get(0);
		private final Keyword cInKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cRightAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cRightExpParserRuleCall_5_3_0 = (RuleCall)cRightAssignment_5_3.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cInKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cLeftAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cLeftExp5ParserRuleCall_6_1_0 = (RuleCall)cLeftAssignment_6_1.eContents().get(0);
		private final Assignment cStrAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cStrStringTerminalRuleCall_6_2_0 = (RuleCall)cStrAssignment_6_2.eContents().get(0);
		
		/// *
		//Exp
		//  : Exp1 '|' Exp 
		//  | '\\'   ListBind '->' Exp
		//  | '\\\\' ListBind '=>' Exp
		//  | Decl '->' Exp
		//  | Exp3 '=>' Exp
		//  | 'let' '{' ListLocDef '}' 'in' Exp
		//  | 'let' ListLocDef 'in' Exp
		//  | Exp3 'where' '{' ListLocDef '}'
		//  | 'in' Exp5 String
		//  | Exp1   
		// * / Exp:
		//	ExpLF_Exp1or3 //	  Exp1 ({Exp.left=current} '|' right=Exp)?
		//	//	| Exp3 {Exp.left=current} right=ExpLF
		//	| funAbstraction?="\\" bindList=ListBind "->" right= // function abstraction (Lamba)
		//	Exp | tableAbstracttion?="\\\\" bindList=ListBind "=>" right= // table abstraction
		//	Exp | "(" bindList=ListBind ":" decl=Exp ")" "->" right= // Decl, part 1
		//	Exp | "let" "{" defList=ListLocDef "}" "in" right=Exp | "let" defList=ListLocDef "in" right=Exp | "in" left=Exp5 str= // rule by example
		//	String;
		public ParserRule getRule() { return rule; }

		//ExpLF_Exp1or3 //	  Exp1 ({Exp.left=current} '|' right=Exp)?
		////	| Exp3 {Exp.left=current} right=ExpLF
		//| funAbstraction?="\\" bindList=ListBind "->" right= // function abstraction (Lamba)
		//Exp | tableAbstracttion?="\\\\" bindList=ListBind "=>" right= // table abstraction
		//Exp | "(" bindList=ListBind ":" decl=Exp ")" "->" right= // Decl, part 1
		//Exp | "let" "{" defList=ListLocDef "}" "in" right=Exp | "let" defList=ListLocDef "in" right=Exp | "in" left=Exp5 str= // rule by example
		//String
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpLF_Exp1or3
		public RuleCall getExpLF_Exp1or3ParserRuleCall_0() { return cExpLF_Exp1or3ParserRuleCall_0; }

		//funAbstraction?="\\" bindList=ListBind "->" right= // function abstraction (Lamba)
		//Exp
		public Group getGroup_1() { return cGroup_1; }

		//funAbstraction?="\\"
		public Assignment getFunAbstractionAssignment_1_0() { return cFunAbstractionAssignment_1_0; }

		//"\\"
		public Keyword getFunAbstractionReverseSolidusKeyword_1_0_0() { return cFunAbstractionReverseSolidusKeyword_1_0_0; }

		//bindList=ListBind
		public Assignment getBindListAssignment_1_1() { return cBindListAssignment_1_1; }

		//ListBind
		public RuleCall getBindListListBindParserRuleCall_1_1_0() { return cBindListListBindParserRuleCall_1_1_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_2() { return cHyphenMinusGreaterThanSignKeyword_1_2; }

		//right= // function abstraction (Lamba)
		//Exp
		public Assignment getRightAssignment_1_3() { return cRightAssignment_1_3; }

		//// function abstraction (Lamba)
		//Exp
		public RuleCall getRightExpParserRuleCall_1_3_0() { return cRightExpParserRuleCall_1_3_0; }

		//tableAbstracttion?="\\\\" bindList=ListBind "=>" right= // table abstraction
		//Exp
		public Group getGroup_2() { return cGroup_2; }

		//tableAbstracttion?="\\\\"
		public Assignment getTableAbstracttionAssignment_2_0() { return cTableAbstracttionAssignment_2_0; }

		//"\\\\"
		public Keyword getTableAbstracttionReverseSolidusReverseSolidusKeyword_2_0_0() { return cTableAbstracttionReverseSolidusReverseSolidusKeyword_2_0_0; }

		//bindList=ListBind
		public Assignment getBindListAssignment_2_1() { return cBindListAssignment_2_1; }

		//ListBind
		public RuleCall getBindListListBindParserRuleCall_2_1_0() { return cBindListListBindParserRuleCall_2_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2_2() { return cEqualsSignGreaterThanSignKeyword_2_2; }

		//right= // table abstraction
		//Exp
		public Assignment getRightAssignment_2_3() { return cRightAssignment_2_3; }

		//// table abstraction
		//Exp
		public RuleCall getRightExpParserRuleCall_2_3_0() { return cRightExpParserRuleCall_2_3_0; }

		//"(" bindList=ListBind ":" decl=Exp ")" "->" right= // Decl, part 1
		//Exp
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//bindList=ListBind
		public Assignment getBindListAssignment_3_1() { return cBindListAssignment_3_1; }

		//ListBind
		public RuleCall getBindListListBindParserRuleCall_3_1_0() { return cBindListListBindParserRuleCall_3_1_0; }

		//":"
		public Keyword getColonKeyword_3_2() { return cColonKeyword_3_2; }

		//decl=Exp
		public Assignment getDeclAssignment_3_3() { return cDeclAssignment_3_3; }

		//Exp
		public RuleCall getDeclExpParserRuleCall_3_3_0() { return cDeclExpParserRuleCall_3_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3_5() { return cHyphenMinusGreaterThanSignKeyword_3_5; }

		//right= // Decl, part 1
		//Exp
		public Assignment getRightAssignment_3_6() { return cRightAssignment_3_6; }

		//// Decl, part 1
		//Exp
		public RuleCall getRightExpParserRuleCall_3_6_0() { return cRightExpParserRuleCall_3_6_0; }

		//"let" "{" defList=ListLocDef "}" "in" right=Exp
		public Group getGroup_4() { return cGroup_4; }

		//"let"
		public Keyword getLetKeyword_4_0() { return cLetKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//defList=ListLocDef
		public Assignment getDefListAssignment_4_2() { return cDefListAssignment_4_2; }

		//ListLocDef
		public RuleCall getDefListListLocDefParserRuleCall_4_2_0() { return cDefListListLocDefParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }

		//"in"
		public Keyword getInKeyword_4_4() { return cInKeyword_4_4; }

		//right=Exp
		public Assignment getRightAssignment_4_5() { return cRightAssignment_4_5; }

		//Exp
		public RuleCall getRightExpParserRuleCall_4_5_0() { return cRightExpParserRuleCall_4_5_0; }

		//"let" defList=ListLocDef "in" right=Exp
		public Group getGroup_5() { return cGroup_5; }

		//"let"
		public Keyword getLetKeyword_5_0() { return cLetKeyword_5_0; }

		//defList=ListLocDef
		public Assignment getDefListAssignment_5_1() { return cDefListAssignment_5_1; }

		//ListLocDef
		public RuleCall getDefListListLocDefParserRuleCall_5_1_0() { return cDefListListLocDefParserRuleCall_5_1_0; }

		//"in"
		public Keyword getInKeyword_5_2() { return cInKeyword_5_2; }

		//right=Exp
		public Assignment getRightAssignment_5_3() { return cRightAssignment_5_3; }

		//Exp
		public RuleCall getRightExpParserRuleCall_5_3_0() { return cRightExpParserRuleCall_5_3_0; }

		//"in" left=Exp5 str= // rule by example
		//String
		public Group getGroup_6() { return cGroup_6; }

		//"in"
		public Keyword getInKeyword_6_0() { return cInKeyword_6_0; }

		//left=Exp5
		public Assignment getLeftAssignment_6_1() { return cLeftAssignment_6_1; }

		//Exp5
		public RuleCall getLeftExp5ParserRuleCall_6_1_0() { return cLeftExp5ParserRuleCall_6_1_0; }

		//str= // rule by example
		//String
		public Assignment getStrAssignment_6_2() { return cStrAssignment_6_2; }

		//// rule by example
		//String
		public RuleCall getStrStringTerminalRuleCall_6_2_0() { return cStrStringTerminalRuleCall_6_2_0; }
	}

	public class ExpLF_Exp1or3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpLF_Exp1or3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExp3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cExpLF13LeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_0_1 = (Alternatives)cGroup_1_0_0.eContents().get(1);
		private final Assignment cTokenListCatAssignment_1_0_0_1_0 = (Assignment)cAlternatives_1_0_0_1.eContents().get(0);
		private final Keyword cTokenListCatPlusSignPlusSignKeyword_1_0_0_1_0_0 = (Keyword)cTokenListCatAssignment_1_0_0_1_0.eContents().get(0);
		private final Assignment cTokenGlueAssignment_1_0_0_1_1 = (Assignment)cAlternatives_1_0_0_1.eContents().get(1);
		private final Keyword cTokenGluePlusSignKeyword_1_0_0_1_1_0 = (Keyword)cTokenGlueAssignment_1_0_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final RuleCall cRightExp3ParserRuleCall_1_0_0_2_0 = (RuleCall)cRightAssignment_1_0_0_2.eContents().get(0);
		private final Group cGroup_1_0_1 = (Group)cGroup_1_0.eContents().get(1);
		private final Action cExpLF13LeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_0_1_2 = (Assignment)cGroup_1_0_1.eContents().get(2);
		private final RuleCall cRightExpParserRuleCall_1_0_1_2_0 = (RuleCall)cRightAssignment_1_0_1_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cExpLF13LeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRightExpLF_AfterExp3ParserRuleCall_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1.eContents().get(0);
		
		//ExpLF_Exp1or3 returns Exp:
		//	Exp3 (({ExpLF13.left=current} (tokenListCat?="++" | tokenGlue?="+") right=Exp3)* ({ExpLF13.left=current} "|"
		//	right=Exp)? // NOTE precedence of +/++ is lost here.
		//	| {ExpLF13.left=current} right=ExpLF_AfterExp3);
		public ParserRule getRule() { return rule; }

		//Exp3 (({ExpLF13.left=current} (tokenListCat?="++" | tokenGlue?="+") right=Exp3)* ({ExpLF13.left=current} "|" right=Exp)? // NOTE precedence of +/++ is lost here.
		//| {ExpLF13.left=current} right=ExpLF_AfterExp3)
		public Group getGroup() { return cGroup; }

		//Exp3
		public RuleCall getExp3ParserRuleCall_0() { return cExp3ParserRuleCall_0; }

		//({ExpLF13.left=current} (tokenListCat?="++" | tokenGlue?="+") right=Exp3)* ({ExpLF13.left=current} "|" right=Exp)? // NOTE precedence of +/++ is lost here.
		//| {ExpLF13.left=current} right=ExpLF_AfterExp3
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//({ExpLF13.left=current} (tokenListCat?="++" | tokenGlue?="+") right=Exp3)* ({ExpLF13.left=current} "|" right=Exp)? // NOTE precedence of +/++ is lost here.
		public Group getGroup_1_0() { return cGroup_1_0; }

		//({ExpLF13.left=current} (tokenListCat?="++" | tokenGlue?="+") right=Exp3)*
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{ExpLF13.left=current}
		public Action getExpLF13LeftAction_1_0_0_0() { return cExpLF13LeftAction_1_0_0_0; }

		//tokenListCat?="++" | tokenGlue?="+"
		public Alternatives getAlternatives_1_0_0_1() { return cAlternatives_1_0_0_1; }

		//tokenListCat?="++"
		public Assignment getTokenListCatAssignment_1_0_0_1_0() { return cTokenListCatAssignment_1_0_0_1_0; }

		//"++"
		public Keyword getTokenListCatPlusSignPlusSignKeyword_1_0_0_1_0_0() { return cTokenListCatPlusSignPlusSignKeyword_1_0_0_1_0_0; }

		//tokenGlue?="+"
		public Assignment getTokenGlueAssignment_1_0_0_1_1() { return cTokenGlueAssignment_1_0_0_1_1; }

		//"+"
		public Keyword getTokenGluePlusSignKeyword_1_0_0_1_1_0() { return cTokenGluePlusSignKeyword_1_0_0_1_1_0; }

		//right=Exp3
		public Assignment getRightAssignment_1_0_0_2() { return cRightAssignment_1_0_0_2; }

		//Exp3
		public RuleCall getRightExp3ParserRuleCall_1_0_0_2_0() { return cRightExp3ParserRuleCall_1_0_0_2_0; }

		//({ExpLF13.left=current} "|" right=Exp)?
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{ExpLF13.left=current}
		public Action getExpLF13LeftAction_1_0_1_0() { return cExpLF13LeftAction_1_0_1_0; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0_1_1() { return cVerticalLineKeyword_1_0_1_1; }

		//right=Exp
		public Assignment getRightAssignment_1_0_1_2() { return cRightAssignment_1_0_1_2; }

		//Exp
		public RuleCall getRightExpParserRuleCall_1_0_1_2_0() { return cRightExpParserRuleCall_1_0_1_2_0; }

		//{ExpLF13.left=current} right=ExpLF_AfterExp3
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{ExpLF13.left=current}
		public Action getExpLF13LeftAction_1_1_0() { return cExpLF13LeftAction_1_1_0; }

		//right=ExpLF_AfterExp3
		public Assignment getRightAssignment_1_1_1() { return cRightAssignment_1_1_1; }

		//ExpLF_AfterExp3
		public RuleCall getRightExpLF_AfterExp3ParserRuleCall_1_1_1_0() { return cRightExpLF_AfterExp3ParserRuleCall_1_1_1_0; }
	}

	public class ExpLF_AfterExp3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpLF_AfterExp3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRightAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRightExpParserRuleCall_0_1_0 = (RuleCall)cRightAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightExpParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cWhereKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cDefListAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDefListListLocDefParserRuleCall_2_2_0 = (RuleCall)cDefListAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//ExpLF_AfterExp3 returns Exp:
		//	"->" right= // Decl, part2 
		//	Exp | "=>" right=Exp | "where" "{" defList=ListLocDef "}";
		public ParserRule getRule() { return rule; }

		//"->" right= // Decl, part2 
		//Exp | "=>" right=Exp | "where" "{" defList=ListLocDef "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"->" right= // Decl, part2 
		//Exp
		public Group getGroup_0() { return cGroup_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_0() { return cHyphenMinusGreaterThanSignKeyword_0_0; }

		//right= // Decl, part2 
		//Exp
		public Assignment getRightAssignment_0_1() { return cRightAssignment_0_1; }

		//// Decl, part2 
		//Exp
		public RuleCall getRightExpParserRuleCall_0_1_0() { return cRightExpParserRuleCall_0_1_0; }

		//"=>" right=Exp
		public Group getGroup_1() { return cGroup_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0() { return cEqualsSignGreaterThanSignKeyword_1_0; }

		//right=Exp
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//Exp
		public RuleCall getRightExpParserRuleCall_1_1_0() { return cRightExpParserRuleCall_1_1_0; }

		//"where" "{" defList=ListLocDef "}"
		public Group getGroup_2() { return cGroup_2; }

		//"where"
		public Keyword getWhereKeyword_2_0() { return cWhereKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//defList=ListLocDef
		public Assignment getDefListAssignment_2_2() { return cDefListAssignment_2_2; }

		//ListLocDef
		public RuleCall getDefListListLocDefParserRuleCall_2_2_0() { return cDefListListLocDefParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class Exp1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExp2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExp1LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTokenListCatAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cTokenListCatPlusSignPlusSignKeyword_1_1_0 = (Keyword)cTokenListCatAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExp2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Exp1 returns Exp:
		//	Exp2 ({Exp1.left=current} tokenListCat?="++" right=Exp2)*;
		public ParserRule getRule() { return rule; }

		//Exp2 ({Exp1.left=current} tokenListCat?="++" right=Exp2)*
		public Group getGroup() { return cGroup; }

		//Exp2
		public RuleCall getExp2ParserRuleCall_0() { return cExp2ParserRuleCall_0; }

		//({Exp1.left=current} tokenListCat?="++" right=Exp2)*
		public Group getGroup_1() { return cGroup_1; }

		//{Exp1.left=current}
		public Action getExp1LeftAction_1_0() { return cExp1LeftAction_1_0; }

		//tokenListCat?="++"
		public Assignment getTokenListCatAssignment_1_1() { return cTokenListCatAssignment_1_1; }

		//"++"
		public Keyword getTokenListCatPlusSignPlusSignKeyword_1_1_0() { return cTokenListCatPlusSignPlusSignKeyword_1_1_0; }

		//right=Exp2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Exp2
		public RuleCall getRightExp2ParserRuleCall_1_2_0() { return cRightExp2ParserRuleCall_1_2_0; }
	}

	public class Exp2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExp3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExp2LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cTokenGlueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cTokenGluePlusSignKeyword_1_1_0 = (Keyword)cTokenGlueAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExp3ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Exp2 returns Exp:
		//	Exp3 ({Exp2.left=current} tokenGlue?="+" right=Exp3)*;
		public ParserRule getRule() { return rule; }

		//Exp3 ({Exp2.left=current} tokenGlue?="+" right=Exp3)*
		public Group getGroup() { return cGroup; }

		//Exp3
		public RuleCall getExp3ParserRuleCall_0() { return cExp3ParserRuleCall_0; }

		//({Exp2.left=current} tokenGlue?="+" right=Exp3)*
		public Group getGroup_1() { return cGroup_1; }

		//{Exp2.left=current}
		public Action getExp2LeftAction_1_0() { return cExp2LeftAction_1_0; }

		//tokenGlue?="+"
		public Assignment getTokenGlueAssignment_1_1() { return cTokenGlueAssignment_1_1; }

		//"+"
		public Keyword getTokenGluePlusSignKeyword_1_1_0() { return cTokenGluePlusSignKeyword_1_1_0; }

		//right=Exp3
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Exp3
		public RuleCall getRightExp3ParserRuleCall_1_2_0() { return cRightExp3ParserRuleCall_1_2_0; }
	}

	public class Exp3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExp3LFParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExp3LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cAsteriskAsteriskKeyword_1_1_2 = (Keyword)cAlternatives_1_1.eContents().get(2);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExp4ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/// *
		//Exp3
		//  : Exp3 '!' Exp4 
		//  | 'table' '{' ListCase '}'
		//  | 'table' Exp6 '{' ListCase '}'
		//  | 'table' Exp6 '[' ListExp ']'
		//  | Exp3 '*'  Exp4
		//  | Exp3 '**' Exp4
		//  | Exp4
		// * / Exp3 returns Exp:
		//	Exp3LF ({Exp3.left=current} ("!" | "*" | "**") right=Exp4)*;
		public ParserRule getRule() { return rule; }

		//Exp3LF ({Exp3.left=current} ("!" | "*" | "**") right=Exp4)*
		public Group getGroup() { return cGroup; }

		//Exp3LF
		public RuleCall getExp3LFParserRuleCall_0() { return cExp3LFParserRuleCall_0; }

		//({Exp3.left=current} ("!" | "*" | "**") right=Exp4)*
		public Group getGroup_1() { return cGroup_1; }

		//{Exp3.left=current}
		public Action getExp3LeftAction_1_0() { return cExp3LeftAction_1_0; }

		//"!" | "*" | "**"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_0() { return cExclamationMarkKeyword_1_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_1() { return cAsteriskKeyword_1_1_1; }

		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_1_2() { return cAsteriskAsteriskKeyword_1_1_2; }

		//right=Exp4
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Exp4
		public RuleCall getRightExp4ParserRuleCall_1_2_0() { return cRightExp4ParserRuleCall_1_2_0; }
	}

	public class Exp3LFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp3LF");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTableKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cCaseListAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cCaseListListCaseParserRuleCall_0_2_0 = (RuleCall)cCaseListAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cTableKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgTypeExp6ParserRuleCall_1_1_0 = (RuleCall)cArgTypeAssignment_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cAlternatives_1_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cCaseListAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cCaseListListCaseParserRuleCall_1_2_0_1_0 = (RuleCall)cCaseListAssignment_1_2_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2_0_2 = (Keyword)cGroup_1_2_0.eContents().get(2);
		private final Group cGroup_1_2_1 = (Group)cAlternatives_1_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cExpListAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final RuleCall cExpListListExpParserRuleCall_1_2_1_1_0 = (RuleCall)cExpListAssignment_1_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_1_2 = (Keyword)cGroup_1_2_1.eContents().get(2);
		private final RuleCall cExp4ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Exp3LF returns Exp:
		//	"table" "{" caseList=ListCase "}" | "table" argType=Exp6 ("{" caseList=ListCase "}" | "[" expList=ListExp "]") | Exp4;
		public ParserRule getRule() { return rule; }

		//"table" "{" caseList=ListCase "}" | "table" argType=Exp6 ("{" caseList=ListCase "}" | "[" expList=ListExp "]") | Exp4
		public Alternatives getAlternatives() { return cAlternatives; }

		//"table" "{" caseList=ListCase "}"
		public Group getGroup_0() { return cGroup_0; }

		//"table"
		public Keyword getTableKeyword_0_0() { return cTableKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//caseList=ListCase
		public Assignment getCaseListAssignment_0_2() { return cCaseListAssignment_0_2; }

		//ListCase
		public RuleCall getCaseListListCaseParserRuleCall_0_2_0() { return cCaseListListCaseParserRuleCall_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }

		//"table" argType=Exp6 ("{" caseList=ListCase "}" | "[" expList=ListExp "]")
		public Group getGroup_1() { return cGroup_1; }

		//"table"
		public Keyword getTableKeyword_1_0() { return cTableKeyword_1_0; }

		//argType=Exp6
		public Assignment getArgTypeAssignment_1_1() { return cArgTypeAssignment_1_1; }

		//Exp6
		public RuleCall getArgTypeExp6ParserRuleCall_1_1_0() { return cArgTypeExp6ParserRuleCall_1_1_0; }

		//"{" caseList=ListCase "}" | "[" expList=ListExp "]"
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }

		//"{" caseList=ListCase "}"
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_2_0_0() { return cLeftCurlyBracketKeyword_1_2_0_0; }

		//caseList=ListCase
		public Assignment getCaseListAssignment_1_2_0_1() { return cCaseListAssignment_1_2_0_1; }

		//ListCase
		public RuleCall getCaseListListCaseParserRuleCall_1_2_0_1_0() { return cCaseListListCaseParserRuleCall_1_2_0_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2_0_2() { return cRightCurlyBracketKeyword_1_2_0_2; }

		//"[" expList=ListExp "]"
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_1_0() { return cLeftSquareBracketKeyword_1_2_1_0; }

		//expList=ListExp
		public Assignment getExpListAssignment_1_2_1_1() { return cExpListAssignment_1_2_1_1; }

		//ListExp
		public RuleCall getExpListListExpParserRuleCall_1_2_1_1_0() { return cExpListListExpParserRuleCall_1_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_1_2() { return cRightSquareBracketKeyword_1_2_1_2; }

		//Exp4
		public RuleCall getExp4ParserRuleCall_2() { return cExp4ParserRuleCall_2; }
	}

	public class Exp4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExp4LFParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExp4LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cRightExp5ParserRuleCall_1_1_0_0 = (RuleCall)cRightAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cRightExpParserRuleCall_1_1_1_1_0 = (RuleCall)cRightAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_1_1_2 = (Keyword)cGroup_1_1_1.eContents().get(2);
		
		/// *
		//Exp4
		//  : Exp4 Exp5
		//  | Exp4 '{' Exp '}' 
		//  | 'case' Exp 'of' '{' ListCase '}'
		//  | 'variants' '{' ListExp '}'
		//  | 'pre' '{' ListCase '}'
		//  | 'pre' '{' String ';' ListAltern '}'
		//  | 'pre' '{' Ident ';' ListAltern '}'
		//  | 'strs' '{' ListExp '}'
		//  | '#' Patt3
		//  | 'pattern' Exp5
		//  | 'lincat' Ident Exp5
		//  | 'lin' Ident Exp5
		//  | Exp5
		// * / Exp4 returns Exp:
		//	Exp4LF ({Exp4.left=current} (right=Exp5 | "{" right=Exp "}"))*;
		public ParserRule getRule() { return rule; }

		//Exp4LF ({Exp4.left=current} (right=Exp5 | "{" right=Exp "}"))*
		public Group getGroup() { return cGroup; }

		//Exp4LF
		public RuleCall getExp4LFParserRuleCall_0() { return cExp4LFParserRuleCall_0; }

		//({Exp4.left=current} (right=Exp5 | "{" right=Exp "}"))*
		public Group getGroup_1() { return cGroup_1; }

		//{Exp4.left=current}
		public Action getExp4LeftAction_1_0() { return cExp4LeftAction_1_0; }

		//right=Exp5 | "{" right=Exp "}"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//right=Exp5
		public Assignment getRightAssignment_1_1_0() { return cRightAssignment_1_1_0; }

		//Exp5
		public RuleCall getRightExp5ParserRuleCall_1_1_0_0() { return cRightExp5ParserRuleCall_1_1_0_0; }

		//"{" right=Exp "}"
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1_1_0() { return cLeftCurlyBracketKeyword_1_1_1_0; }

		//right=Exp
		public Assignment getRightAssignment_1_1_1_1() { return cRightAssignment_1_1_1_1; }

		//Exp
		public RuleCall getRightExpParserRuleCall_1_1_1_1_0() { return cRightExpParserRuleCall_1_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_1_1_2() { return cRightCurlyBracketKeyword_1_1_1_2; }
	}

	public class Exp4LFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp4LF");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cCaseAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cCaseCaseKeyword_0_0_0 = (Keyword)cCaseAssignment_0_0.eContents().get(0);
		private final Assignment cCaseOfAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCaseOfExpParserRuleCall_0_1_0 = (RuleCall)cCaseOfAssignment_0_1.eContents().get(0);
		private final Keyword cOfKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cCaseListAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cCaseListListCaseParserRuleCall_0_4_0 = (RuleCall)cCaseListAssignment_0_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cVariantsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cVariantsVariantsKeyword_1_0_0 = (Keyword)cVariantsAssignment_1_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpListAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpListListExpParserRuleCall_1_2_0 = (RuleCall)cExpListAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPreAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cPrePreKeyword_2_0_0 = (Keyword)cPreAssignment_2_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cCaseListAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cCaseListListCaseParserRuleCall_2_2_0 = (RuleCall)cCaseListAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPreAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cPrePreKeyword_3_0_0 = (Keyword)cPreAssignment_3_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cStrAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cStrStringTerminalRuleCall_3_2_0 = (RuleCall)cStrAssignment_3_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cAltsAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cAltsAlternParserRuleCall_3_4_0 = (RuleCall)cAltsAssignment_3_4.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cGroup_3.eContents().get(5);
		private final Keyword cSemicolonKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cAltsAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cAltsAlternParserRuleCall_3_5_1_0 = (RuleCall)cAltsAssignment_3_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cPreAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cPrePreKeyword_4_0_0 = (Keyword)cPreAssignment_4_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cIdentAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cIdentIdentParserRuleCall_4_2_0 = (RuleCall)cIdentAssignment_4_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cAltsAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cAltsAlternParserRuleCall_4_4_0 = (RuleCall)cAltsAssignment_4_4.eContents().get(0);
		private final Group cGroup_4_5 = (Group)cGroup_4.eContents().get(5);
		private final Keyword cSemicolonKeyword_4_5_0 = (Keyword)cGroup_4_5.eContents().get(0);
		private final Assignment cAltsAssignment_4_5_1 = (Assignment)cGroup_4_5.eContents().get(1);
		private final RuleCall cAltsAlternParserRuleCall_4_5_1_0 = (RuleCall)cAltsAssignment_4_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_6 = (Keyword)cGroup_4.eContents().get(6);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cStrsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cExpListAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cExpListListExpParserRuleCall_5_2_0 = (RuleCall)cExpListAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cNumberSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPatternAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPatternPatt3ParserRuleCall_6_1_0 = (RuleCall)cPatternAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cPatternKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cPatternAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cPatternExp5ParserRuleCall_7_1_0 = (RuleCall)cPatternAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cLinwrapAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cLinwrapLincatKeyword_8_0_0 = (Keyword)cLinwrapAssignment_8_0.eContents().get(0);
		private final Assignment cLinNameAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final CrossReference cLinNameIdentCrossReference_8_1_0 = (CrossReference)cLinNameAssignment_8_1.eContents().get(0);
		private final RuleCall cLinNameIdentIDTerminalRuleCall_8_1_0_1 = (RuleCall)cLinNameIdentCrossReference_8_1_0.eContents().get(1);
		private final Assignment cInnerAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cInnerExp5ParserRuleCall_8_2_0 = (RuleCall)cInnerAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cLinwrapAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cLinwrapLinKeyword_9_0_0 = (Keyword)cLinwrapAssignment_9_0.eContents().get(0);
		private final Assignment cLinNameAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cLinNameIdentCrossReference_9_1_0 = (CrossReference)cLinNameAssignment_9_1.eContents().get(0);
		private final RuleCall cLinNameIdentIDTerminalRuleCall_9_1_0_1 = (RuleCall)cLinNameIdentCrossReference_9_1_0.eContents().get(1);
		private final Assignment cInnerAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cInnerExp5ParserRuleCall_9_2_0 = (RuleCall)cInnerAssignment_9_2.eContents().get(0);
		private final RuleCall cExp5ParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//Exp4LF returns Exp:
		//	case?="case" caseOf=Exp "of" "{" caseList=ListCase "}" | variants?="variants" "{" expList=ListExp "}" | pre?="pre" "{"
		//	caseList=ListCase "}" | pre?="pre" "{" str=String ";" alts+=Altern (";" alts+=Altern)* "}" | pre?="pre" "{"
		//	ident=Ident ";" alts+=Altern (";" alts+=Altern)* "}" | "strs" "{" expList=ListExp "}" | "#" pattern=Patt3 | "pattern"
		//	pattern=Exp5 | linwrap?="lincat" linName=[Ident] inner=Exp5 | linwrap?="lin" linName=[Ident] inner=Exp5 | Exp5;
		public ParserRule getRule() { return rule; }

		//case?="case" caseOf=Exp "of" "{" caseList=ListCase "}" | variants?="variants" "{" expList=ListExp "}" | pre?="pre" "{"
		//caseList=ListCase "}" | pre?="pre" "{" str=String ";" alts+=Altern (";" alts+=Altern)* "}" | pre?="pre" "{" ident=Ident
		//";" alts+=Altern (";" alts+=Altern)* "}" | "strs" "{" expList=ListExp "}" | "#" pattern=Patt3 | "pattern" pattern=Exp5
		//| linwrap?="lincat" linName=[Ident] inner=Exp5 | linwrap?="lin" linName=[Ident] inner=Exp5 | Exp5
		public Alternatives getAlternatives() { return cAlternatives; }

		//case?="case" caseOf=Exp "of" "{" caseList=ListCase "}"
		public Group getGroup_0() { return cGroup_0; }

		//case?="case"
		public Assignment getCaseAssignment_0_0() { return cCaseAssignment_0_0; }

		//"case"
		public Keyword getCaseCaseKeyword_0_0_0() { return cCaseCaseKeyword_0_0_0; }

		//caseOf=Exp
		public Assignment getCaseOfAssignment_0_1() { return cCaseOfAssignment_0_1; }

		//Exp
		public RuleCall getCaseOfExpParserRuleCall_0_1_0() { return cCaseOfExpParserRuleCall_0_1_0; }

		//"of"
		public Keyword getOfKeyword_0_2() { return cOfKeyword_0_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }

		//caseList=ListCase
		public Assignment getCaseListAssignment_0_4() { return cCaseListAssignment_0_4; }

		//ListCase
		public RuleCall getCaseListListCaseParserRuleCall_0_4_0() { return cCaseListListCaseParserRuleCall_0_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_5() { return cRightCurlyBracketKeyword_0_5; }

		//variants?="variants" "{" expList=ListExp "}"
		public Group getGroup_1() { return cGroup_1; }

		//variants?="variants"
		public Assignment getVariantsAssignment_1_0() { return cVariantsAssignment_1_0; }

		//"variants"
		public Keyword getVariantsVariantsKeyword_1_0_0() { return cVariantsVariantsKeyword_1_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//expList=ListExp
		public Assignment getExpListAssignment_1_2() { return cExpListAssignment_1_2; }

		//ListExp
		public RuleCall getExpListListExpParserRuleCall_1_2_0() { return cExpListListExpParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }

		//pre?="pre" "{" caseList=ListCase "}"
		public Group getGroup_2() { return cGroup_2; }

		//pre?="pre"
		public Assignment getPreAssignment_2_0() { return cPreAssignment_2_0; }

		//"pre"
		public Keyword getPrePreKeyword_2_0_0() { return cPrePreKeyword_2_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//caseList=ListCase
		public Assignment getCaseListAssignment_2_2() { return cCaseListAssignment_2_2; }

		//ListCase
		public RuleCall getCaseListListCaseParserRuleCall_2_2_0() { return cCaseListListCaseParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//pre?="pre" "{" str=String ";" alts+=Altern (";" alts+=Altern)* "}"
		public Group getGroup_3() { return cGroup_3; }

		//pre?="pre"
		public Assignment getPreAssignment_3_0() { return cPreAssignment_3_0; }

		//"pre"
		public Keyword getPrePreKeyword_3_0_0() { return cPrePreKeyword_3_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//str=String
		public Assignment getStrAssignment_3_2() { return cStrAssignment_3_2; }

		//String
		public RuleCall getStrStringTerminalRuleCall_3_2_0() { return cStrStringTerminalRuleCall_3_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3_3() { return cSemicolonKeyword_3_3; }

		//alts+=Altern
		public Assignment getAltsAssignment_3_4() { return cAltsAssignment_3_4; }

		//Altern
		public RuleCall getAltsAlternParserRuleCall_3_4_0() { return cAltsAlternParserRuleCall_3_4_0; }

		//(";" alts+=Altern)*
		public Group getGroup_3_5() { return cGroup_3_5; }

		//";"
		public Keyword getSemicolonKeyword_3_5_0() { return cSemicolonKeyword_3_5_0; }

		//alts+=Altern
		public Assignment getAltsAssignment_3_5_1() { return cAltsAssignment_3_5_1; }

		//Altern
		public RuleCall getAltsAlternParserRuleCall_3_5_1_0() { return cAltsAlternParserRuleCall_3_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_6() { return cRightCurlyBracketKeyword_3_6; }

		//pre?="pre" "{" ident=Ident ";" alts+=Altern (";" alts+=Altern)* "}"
		public Group getGroup_4() { return cGroup_4; }

		//pre?="pre"
		public Assignment getPreAssignment_4_0() { return cPreAssignment_4_0; }

		//"pre"
		public Keyword getPrePreKeyword_4_0_0() { return cPrePreKeyword_4_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//ident=Ident
		public Assignment getIdentAssignment_4_2() { return cIdentAssignment_4_2; }

		//Ident
		public RuleCall getIdentIdentParserRuleCall_4_2_0() { return cIdentIdentParserRuleCall_4_2_0; }

		//";"
		public Keyword getSemicolonKeyword_4_3() { return cSemicolonKeyword_4_3; }

		//alts+=Altern
		public Assignment getAltsAssignment_4_4() { return cAltsAssignment_4_4; }

		//Altern
		public RuleCall getAltsAlternParserRuleCall_4_4_0() { return cAltsAlternParserRuleCall_4_4_0; }

		//(";" alts+=Altern)*
		public Group getGroup_4_5() { return cGroup_4_5; }

		//";"
		public Keyword getSemicolonKeyword_4_5_0() { return cSemicolonKeyword_4_5_0; }

		//alts+=Altern
		public Assignment getAltsAssignment_4_5_1() { return cAltsAssignment_4_5_1; }

		//Altern
		public RuleCall getAltsAlternParserRuleCall_4_5_1_0() { return cAltsAlternParserRuleCall_4_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_6() { return cRightCurlyBracketKeyword_4_6; }

		//"strs" "{" expList=ListExp "}"
		public Group getGroup_5() { return cGroup_5; }

		//"strs"
		public Keyword getStrsKeyword_5_0() { return cStrsKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//expList=ListExp
		public Assignment getExpListAssignment_5_2() { return cExpListAssignment_5_2; }

		//ListExp
		public RuleCall getExpListListExpParserRuleCall_5_2_0() { return cExpListListExpParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }

		//"#" pattern=Patt3
		public Group getGroup_6() { return cGroup_6; }

		//"#"
		public Keyword getNumberSignKeyword_6_0() { return cNumberSignKeyword_6_0; }

		//pattern=Patt3
		public Assignment getPatternAssignment_6_1() { return cPatternAssignment_6_1; }

		//Patt3
		public RuleCall getPatternPatt3ParserRuleCall_6_1_0() { return cPatternPatt3ParserRuleCall_6_1_0; }

		//"pattern" pattern=Exp5
		public Group getGroup_7() { return cGroup_7; }

		//"pattern"
		public Keyword getPatternKeyword_7_0() { return cPatternKeyword_7_0; }

		//pattern=Exp5
		public Assignment getPatternAssignment_7_1() { return cPatternAssignment_7_1; }

		//Exp5
		public RuleCall getPatternExp5ParserRuleCall_7_1_0() { return cPatternExp5ParserRuleCall_7_1_0; }

		//linwrap?="lincat" linName=[Ident] inner=Exp5
		public Group getGroup_8() { return cGroup_8; }

		//linwrap?="lincat"
		public Assignment getLinwrapAssignment_8_0() { return cLinwrapAssignment_8_0; }

		//"lincat"
		public Keyword getLinwrapLincatKeyword_8_0_0() { return cLinwrapLincatKeyword_8_0_0; }

		//linName=[Ident]
		public Assignment getLinNameAssignment_8_1() { return cLinNameAssignment_8_1; }

		//[Ident]
		public CrossReference getLinNameIdentCrossReference_8_1_0() { return cLinNameIdentCrossReference_8_1_0; }

		//ID
		public RuleCall getLinNameIdentIDTerminalRuleCall_8_1_0_1() { return cLinNameIdentIDTerminalRuleCall_8_1_0_1; }

		//inner=Exp5
		public Assignment getInnerAssignment_8_2() { return cInnerAssignment_8_2; }

		//Exp5
		public RuleCall getInnerExp5ParserRuleCall_8_2_0() { return cInnerExp5ParserRuleCall_8_2_0; }

		//linwrap?="lin" linName=[Ident] inner=Exp5
		public Group getGroup_9() { return cGroup_9; }

		//linwrap?="lin"
		public Assignment getLinwrapAssignment_9_0() { return cLinwrapAssignment_9_0; }

		//"lin"
		public Keyword getLinwrapLinKeyword_9_0_0() { return cLinwrapLinKeyword_9_0_0; }

		//linName=[Ident]
		public Assignment getLinNameAssignment_9_1() { return cLinNameAssignment_9_1; }

		//[Ident]
		public CrossReference getLinNameIdentCrossReference_9_1_0() { return cLinNameIdentCrossReference_9_1_0; }

		//ID
		public RuleCall getLinNameIdentIDTerminalRuleCall_9_1_0_1() { return cLinNameIdentIDTerminalRuleCall_9_1_0_1; }

		//inner=Exp5
		public Assignment getInnerAssignment_9_2() { return cInnerAssignment_9_2; }

		//Exp5
		public RuleCall getInnerExp5ParserRuleCall_9_2_0() { return cInnerExp5ParserRuleCall_9_2_0; }

		//Exp5
		public RuleCall getExp5ParserRuleCall_10() { return cExp5ParserRuleCall_10; }
	}

	public class Exp5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExp6ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLabelsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLabelsLabelParserRuleCall_1_1_0 = (RuleCall)cLabelsAssignment_1_1.eContents().get(0);
		
		//Exp5 returns Exp:
		//	Exp6 ("." labels+=Label)* // projection or qualification
		//;
		public ParserRule getRule() { return rule; }

		//Exp6 ("." labels+=Label)* // projection or qualification
		public Group getGroup() { return cGroup; }

		//Exp6
		public RuleCall getExp6ParserRuleCall_0() { return cExp6ParserRuleCall_0; }

		//("." labels+=Label)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//labels+=Label
		public Assignment getLabelsAssignment_1_1() { return cLabelsAssignment_1_1; }

		//Label
		public RuleCall getLabelsLabelParserRuleCall_1_1_0() { return cLabelsLabelParserRuleCall_1_1_0; }
	}

	public class Exp6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exp6");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRefIdentCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefIdentIDTerminalRuleCall_0_0_1 = (RuleCall)cRefIdentCrossReference_0_0.eContents().get(1);
		private final Assignment cSortAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSortSortParserRuleCall_1_0 = (RuleCall)cSortAssignment_1.eContents().get(0);
		private final Assignment cStringAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringStringTerminalRuleCall_2_0 = (RuleCall)cStringAssignment_2.eContents().get(0);
		private final Assignment cIntegerAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIntegerIntegerTerminalRuleCall_3_0 = (RuleCall)cIntegerAssignment_3.eContents().get(0);
		private final Assignment cDoubleAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cDoubleDoubleTerminalRuleCall_4_0 = (RuleCall)cDoubleAssignment_4.eContents().get(0);
		private final Assignment cMetaAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cMetaQuestionMarkKeyword_5_0 = (Keyword)cMetaAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cEmptyStringAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cEmptyStringLeftSquareBracketKeyword_6_0_0 = (Keyword)cEmptyStringAssignment_6_0.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cListCatAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cListCatLeftSquareBracketKeyword_7_0_0 = (Keyword)cListCatAssignment_7_0.eContents().get(0);
		private final Assignment cCategoryAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cCategoryIdentCrossReference_7_1_0 = (CrossReference)cCategoryAssignment_7_1.eContents().get(0);
		private final RuleCall cCategoryIdentIDTerminalRuleCall_7_1_0_1 = (RuleCall)cCategoryIdentCrossReference_7_1_0.eContents().get(1);
		private final Assignment cContextAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cContextExpsParserRuleCall_7_2_0 = (RuleCall)cContextAssignment_7_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cTokenListAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cTokenListLeftSquareBracketKeyword_8_0_0 = (Keyword)cTokenListAssignment_8_0.eContents().get(0);
		private final Assignment cStrAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStrStringTerminalRuleCall_8_1_0 = (RuleCall)cStrAssignment_8_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cRecordAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cRecordLeftCurlyBracketKeyword_9_0_0 = (Keyword)cRecordAssignment_9_0.eContents().get(0);
		private final Assignment cDefListAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cDefListListLocDefParserRuleCall_9_1_0 = (RuleCall)cDefListAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cLessThanSignKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Alternatives cAlternatives_10_1 = (Alternatives)cGroup_10.eContents().get(1);
		private final Group cGroup_10_1_0 = (Group)cAlternatives_10_1.eContents().get(0);
		private final Assignment cTupleListAssignment_10_1_0_0 = (Assignment)cGroup_10_1_0.eContents().get(0);
		private final RuleCall cTupleListListTupleCompParserRuleCall_10_1_0_0_0 = (RuleCall)cTupleListAssignment_10_1_0_0.eContents().get(0);
		private final Group cGroup_10_1_1 = (Group)cAlternatives_10_1.eContents().get(1);
		private final Assignment cExpressionAssignment_10_1_1_0 = (Assignment)cGroup_10_1_1.eContents().get(0);
		private final RuleCall cExpressionExpParserRuleCall_10_1_1_0_0 = (RuleCall)cExpressionAssignment_10_1_1_0.eContents().get(0);
		private final Keyword cColonKeyword_10_1_1_1 = (Keyword)cGroup_10_1_1.eContents().get(1);
		private final Assignment cTypeAssignment_10_1_1_2 = (Assignment)cGroup_10_1_1.eContents().get(2);
		private final RuleCall cTypeExpParserRuleCall_10_1_1_2_0 = (RuleCall)cTypeAssignment_10_1_1_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cIdentityAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cIdentityLeftParenthesisKeyword_11_0_0 = (Keyword)cIdentityAssignment_11_0.eContents().get(0);
		private final Assignment cInnerAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cInnerExpParserRuleCall_11_1_0 = (RuleCall)cInnerAssignment_11_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		
		/// *
		//Exp6 
		//  : Ident 
		//  | Sort
		//  | String
		//  | Integer
		//  | Double
		//  | '?'
		//  | '[' ']'
		//  | '[' Ident Exps ']'
		//  | '[' String ']'
		//  | '{' ListLocDef '}'
		//  | '<' ListTupleComp '>'
		//  | '<' Exp ':' Exp '>'
		//  | LString
		//  | '(' Exp ')'
		// * / Exp6 returns Exp:
		//	ref= // constant or variable
		//	[Ident] | sort?= // type of types/param types/strings/token lists
		//	Sort | string?= // string literal
		//	String | integer?= // integer literal
		//	Integer | double?= // floating point literal
		//	Double | meta?= // metavariable
		//	"?" | emptyString?="[" // empty token list
		//	"]" | listCat?="[" category=[Ident] context=Exps // list category
		//	"]" | tokenList?="[" str=String // token list
		//	"]" | record?="{" defList=ListLocDef // record / record type
		//	"}" | "<" (=> (tupleList=ListTupleComp) | expression=Exp ":" type=Exp) // tuple | type-annotated expression
		//	">" | identity?="(" inner=Exp ")";
		public ParserRule getRule() { return rule; }

		//ref= // constant or variable
		//[Ident] | sort?= // type of types/param types/strings/token lists
		//Sort | string?= // string literal
		//String | integer?= // integer literal
		//Integer | double?= // floating point literal
		//Double | meta?= // metavariable
		//"?" | emptyString?="[" // empty token list
		//"]" | listCat?="[" category=[Ident] context=Exps // list category
		//"]" | tokenList?="[" str=String // token list
		//"]" | record?="{" defList=ListLocDef // record / record type
		//"}" | "<" (=> (tupleList=ListTupleComp) | expression=Exp ":" type=Exp) // tuple | type-annotated expression
		//">" | identity?="(" inner=Exp ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ref= // constant or variable
		//[Ident]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//// constant or variable
		//[Ident]
		public CrossReference getRefIdentCrossReference_0_0() { return cRefIdentCrossReference_0_0; }

		//ID
		public RuleCall getRefIdentIDTerminalRuleCall_0_0_1() { return cRefIdentIDTerminalRuleCall_0_0_1; }

		//sort?= // type of types/param types/strings/token lists
		//Sort
		public Assignment getSortAssignment_1() { return cSortAssignment_1; }

		//// type of types/param types/strings/token lists
		//Sort
		public RuleCall getSortSortParserRuleCall_1_0() { return cSortSortParserRuleCall_1_0; }

		//string?= // string literal
		//String
		public Assignment getStringAssignment_2() { return cStringAssignment_2; }

		//// string literal
		//String
		public RuleCall getStringStringTerminalRuleCall_2_0() { return cStringStringTerminalRuleCall_2_0; }

		//integer?= // integer literal
		//Integer
		public Assignment getIntegerAssignment_3() { return cIntegerAssignment_3; }

		//// integer literal
		//Integer
		public RuleCall getIntegerIntegerTerminalRuleCall_3_0() { return cIntegerIntegerTerminalRuleCall_3_0; }

		//double?= // floating point literal
		//Double
		public Assignment getDoubleAssignment_4() { return cDoubleAssignment_4; }

		//// floating point literal
		//Double
		public RuleCall getDoubleDoubleTerminalRuleCall_4_0() { return cDoubleDoubleTerminalRuleCall_4_0; }

		//meta?= // metavariable
		//"?"
		public Assignment getMetaAssignment_5() { return cMetaAssignment_5; }

		//// metavariable
		//"?"
		public Keyword getMetaQuestionMarkKeyword_5_0() { return cMetaQuestionMarkKeyword_5_0; }

		//emptyString?="[" // empty token list
		//"]"
		public Group getGroup_6() { return cGroup_6; }

		//emptyString?="["
		public Assignment getEmptyStringAssignment_6_0() { return cEmptyStringAssignment_6_0; }

		//"["
		public Keyword getEmptyStringLeftSquareBracketKeyword_6_0_0() { return cEmptyStringLeftSquareBracketKeyword_6_0_0; }

		//// empty token list
		//"]"
		public Keyword getRightSquareBracketKeyword_6_1() { return cRightSquareBracketKeyword_6_1; }

		//listCat?="[" category=[Ident] context=Exps // list category
		//"]"
		public Group getGroup_7() { return cGroup_7; }

		//listCat?="["
		public Assignment getListCatAssignment_7_0() { return cListCatAssignment_7_0; }

		//"["
		public Keyword getListCatLeftSquareBracketKeyword_7_0_0() { return cListCatLeftSquareBracketKeyword_7_0_0; }

		//category=[Ident]
		public Assignment getCategoryAssignment_7_1() { return cCategoryAssignment_7_1; }

		//[Ident]
		public CrossReference getCategoryIdentCrossReference_7_1_0() { return cCategoryIdentCrossReference_7_1_0; }

		//ID
		public RuleCall getCategoryIdentIDTerminalRuleCall_7_1_0_1() { return cCategoryIdentIDTerminalRuleCall_7_1_0_1; }

		//context=Exps
		public Assignment getContextAssignment_7_2() { return cContextAssignment_7_2; }

		//Exps
		public RuleCall getContextExpsParserRuleCall_7_2_0() { return cContextExpsParserRuleCall_7_2_0; }

		//// list category
		//"]"
		public Keyword getRightSquareBracketKeyword_7_3() { return cRightSquareBracketKeyword_7_3; }

		//tokenList?="[" str=String // token list
		//"]"
		public Group getGroup_8() { return cGroup_8; }

		//tokenList?="["
		public Assignment getTokenListAssignment_8_0() { return cTokenListAssignment_8_0; }

		//"["
		public Keyword getTokenListLeftSquareBracketKeyword_8_0_0() { return cTokenListLeftSquareBracketKeyword_8_0_0; }

		//str=String
		public Assignment getStrAssignment_8_1() { return cStrAssignment_8_1; }

		//String
		public RuleCall getStrStringTerminalRuleCall_8_1_0() { return cStrStringTerminalRuleCall_8_1_0; }

		//// token list
		//"]"
		public Keyword getRightSquareBracketKeyword_8_2() { return cRightSquareBracketKeyword_8_2; }

		//record?="{" defList=ListLocDef // record / record type
		//"}"
		public Group getGroup_9() { return cGroup_9; }

		//record?="{"
		public Assignment getRecordAssignment_9_0() { return cRecordAssignment_9_0; }

		//"{"
		public Keyword getRecordLeftCurlyBracketKeyword_9_0_0() { return cRecordLeftCurlyBracketKeyword_9_0_0; }

		//defList=ListLocDef
		public Assignment getDefListAssignment_9_1() { return cDefListAssignment_9_1; }

		//ListLocDef
		public RuleCall getDefListListLocDefParserRuleCall_9_1_0() { return cDefListListLocDefParserRuleCall_9_1_0; }

		//// record / record type
		//"}"
		public Keyword getRightCurlyBracketKeyword_9_2() { return cRightCurlyBracketKeyword_9_2; }

		//"<" (=> (tupleList=ListTupleComp) | expression=Exp ":" type=Exp) // tuple | type-annotated expression
		//">"
		public Group getGroup_10() { return cGroup_10; }

		//"<"
		public Keyword getLessThanSignKeyword_10_0() { return cLessThanSignKeyword_10_0; }

		//=> (tupleList=ListTupleComp) | expression=Exp ":" type=Exp
		public Alternatives getAlternatives_10_1() { return cAlternatives_10_1; }

		//=> (tupleList=ListTupleComp)
		public Group getGroup_10_1_0() { return cGroup_10_1_0; }

		//tupleList=ListTupleComp
		public Assignment getTupleListAssignment_10_1_0_0() { return cTupleListAssignment_10_1_0_0; }

		//ListTupleComp
		public RuleCall getTupleListListTupleCompParserRuleCall_10_1_0_0_0() { return cTupleListListTupleCompParserRuleCall_10_1_0_0_0; }

		//expression=Exp ":" type=Exp
		public Group getGroup_10_1_1() { return cGroup_10_1_1; }

		//expression=Exp
		public Assignment getExpressionAssignment_10_1_1_0() { return cExpressionAssignment_10_1_1_0; }

		//Exp
		public RuleCall getExpressionExpParserRuleCall_10_1_1_0_0() { return cExpressionExpParserRuleCall_10_1_1_0_0; }

		//":"
		public Keyword getColonKeyword_10_1_1_1() { return cColonKeyword_10_1_1_1; }

		//type=Exp
		public Assignment getTypeAssignment_10_1_1_2() { return cTypeAssignment_10_1_1_2; }

		//Exp
		public RuleCall getTypeExpParserRuleCall_10_1_1_2_0() { return cTypeExpParserRuleCall_10_1_1_2_0; }

		//// tuple | type-annotated expression
		//">"
		public Keyword getGreaterThanSignKeyword_10_2() { return cGreaterThanSignKeyword_10_2; }

		//identity?="(" inner=Exp ")"
		public Group getGroup_11() { return cGroup_11; }

		//identity?="("
		public Assignment getIdentityAssignment_11_0() { return cIdentityAssignment_11_0; }

		//"("
		public Keyword getIdentityLeftParenthesisKeyword_11_0_0() { return cIdentityLeftParenthesisKeyword_11_0_0; }

		//inner=Exp
		public Assignment getInnerAssignment_11_1() { return cInnerAssignment_11_1; }

		//Exp
		public RuleCall getInnerExpParserRuleCall_11_1_0() { return cInnerExpParserRuleCall_11_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11_2() { return cRightParenthesisKeyword_11_2; }
	}

	public class ListExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListExp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListExpAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionsExpParserRuleCall_1_0_0 = (RuleCall)cExpressionsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionsExpParserRuleCall_1_1_1_0 = (RuleCall)cExpressionsAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ListExp:
		//	{ListExp} (expressions+=Exp (";" expressions+=Exp)* ";"?)?;
		public ParserRule getRule() { return rule; }

		//{ListExp} (expressions+=Exp (";" expressions+=Exp)* ";"?)?
		public Group getGroup() { return cGroup; }

		//{ListExp}
		public Action getListExpAction_0() { return cListExpAction_0; }

		//(expressions+=Exp (";" expressions+=Exp)* ";"?)?
		public Group getGroup_1() { return cGroup_1; }

		//expressions+=Exp
		public Assignment getExpressionsAssignment_1_0() { return cExpressionsAssignment_1_0; }

		//Exp
		public RuleCall getExpressionsExpParserRuleCall_1_0_0() { return cExpressionsExpParserRuleCall_1_0_0; }

		//(";" expressions+=Exp)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//expressions+=Exp
		public Assignment getExpressionsAssignment_1_1_1() { return cExpressionsAssignment_1_1_1; }

		//Exp
		public RuleCall getExpressionsExpParserRuleCall_1_1_1_0() { return cExpressionsExpParserRuleCall_1_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class ExpsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Exps");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cExpsAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cExpressionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionsExp6ParserRuleCall_1_0 = (RuleCall)cExpressionsAssignment_1.eContents().get(0);
		
		//Exps:
		//	{Exps} expressions+=Exp6*;
		public ParserRule getRule() { return rule; }

		//{Exps} expressions+=Exp6*
		public Group getGroup() { return cGroup; }

		//{Exps}
		public Action getExpsAction_0() { return cExpsAction_0; }

		//expressions+=Exp6*
		public Assignment getExpressionsAssignment_1() { return cExpressionsAssignment_1; }

		//Exp6
		public RuleCall getExpressionsExp6ParserRuleCall_1_0() { return cExpressionsExp6ParserRuleCall_1_0; }
	}

	public class PattElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Patt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPatt1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPattLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cOrAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final Keyword cOrVerticalLineKeyword_1_1_0_0 = (Keyword)cOrAssignment_1_1_0.eContents().get(0);
		private final Assignment cAndAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cAndPlusSignKeyword_1_1_1_0 = (Keyword)cAndAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPatt1ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Patt:
		//	Patt1 ({Patt.left=current} (or?="|" | and?="+") right=Patt1)*;
		public ParserRule getRule() { return rule; }

		//Patt1 ({Patt.left=current} (or?="|" | and?="+") right=Patt1)*
		public Group getGroup() { return cGroup; }

		//Patt1
		public RuleCall getPatt1ParserRuleCall_0() { return cPatt1ParserRuleCall_0; }

		//({Patt.left=current} (or?="|" | and?="+") right=Patt1)*
		public Group getGroup_1() { return cGroup_1; }

		//{Patt.left=current}
		public Action getPattLeftAction_1_0() { return cPattLeftAction_1_0; }

		//or?="|" | and?="+"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//or?="|"
		public Assignment getOrAssignment_1_1_0() { return cOrAssignment_1_1_0; }

		//"|"
		public Keyword getOrVerticalLineKeyword_1_1_0_0() { return cOrVerticalLineKeyword_1_1_0_0; }

		//and?="+"
		public Assignment getAndAssignment_1_1_1() { return cAndAssignment_1_1_1; }

		//"+"
		public Keyword getAndPlusSignKeyword_1_1_1_0() { return cAndPlusSignKeyword_1_1_1_0; }

		//right=Patt1
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Patt1
		public RuleCall getRightPatt1ParserRuleCall_1_2_0() { return cRightPatt1ParserRuleCall_1_2_0; }
	}

	public class Patt1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Patt1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueListPattParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLabelAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLabelIdentParserRuleCall_1_2_0 = (RuleCall)cLabelAssignment_1_2.eContents().get(0);
		private final Assignment cValueAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cValueListPattParserRuleCall_1_3_0 = (RuleCall)cValueAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cPatt3ParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final RuleCall cPatt2LFParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		////	| Patt2
		//Patt1 returns Patt:
		//	name=Ident value=ListPatt | name=Ident "." label=Ident value=ListPatt | Patt3 "*"? | Patt2LF;
		public ParserRule getRule() { return rule; }

		//name=Ident value=ListPatt | name=Ident "." label=Ident value=ListPatt | Patt3 "*"? | Patt2LF
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident value=ListPatt
		public Group getGroup_0() { return cGroup_0; }

		//name=Ident
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0_0() { return cNameIdentParserRuleCall_0_0_0; }

		//value=ListPatt
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//ListPatt
		public RuleCall getValueListPattParserRuleCall_0_1_0() { return cValueListPattParserRuleCall_0_1_0; }

		//name=Ident "." label=Ident value=ListPatt
		public Group getGroup_1() { return cGroup_1; }

		//name=Ident
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_0_0() { return cNameIdentParserRuleCall_1_0_0; }

		//"."
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }

		//label=Ident
		public Assignment getLabelAssignment_1_2() { return cLabelAssignment_1_2; }

		//Ident
		public RuleCall getLabelIdentParserRuleCall_1_2_0() { return cLabelIdentParserRuleCall_1_2_0; }

		//value=ListPatt
		public Assignment getValueAssignment_1_3() { return cValueAssignment_1_3; }

		//ListPatt
		public RuleCall getValueListPattParserRuleCall_1_3_0() { return cValueListPattParserRuleCall_1_3_0; }

		//Patt3 "*"?
		public Group getGroup_2() { return cGroup_2; }

		//Patt3
		public RuleCall getPatt3ParserRuleCall_2_0() { return cPatt3ParserRuleCall_2_0; }

		//"*"?
		public Keyword getAsteriskKeyword_2_1() { return cAsteriskKeyword_2_1; }

		//Patt2LF
		public RuleCall getPatt2LFParserRuleCall_3() { return cPatt2LFParserRuleCall_3; }
	}

	public class Patt2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Patt2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatt2LFParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPatt3ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Left-factoring of `Patt1 -> Patt2` above and `Patt2 -> Patt3` below
		//Patt2 returns Patt:
		//	Patt2LF | Patt3;
		public ParserRule getRule() { return rule; }

		//Patt2LF | Patt3
		public Alternatives getAlternatives() { return cAlternatives; }

		//Patt2LF
		public RuleCall getPatt2LFParserRuleCall_0() { return cPatt2LFParserRuleCall_0; }

		//Patt3
		public RuleCall getPatt3ParserRuleCall_1() { return cPatt3ParserRuleCall_1; }
	}

	public class Patt2LFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Patt2LF");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cBindToAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cBindToIdentParserRuleCall_0_0_0 = (RuleCall)cBindToAssignment_0_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValuePatt3ParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNegativeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNegativeHyphenMinusKeyword_1_0_0 = (Keyword)cNegativeAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuePatt3ParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cInaccessibleAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cInaccessibleTildeKeyword_2_0_0 = (Keyword)cInaccessibleAssignment_2_0.eContents().get(0);
		private final Assignment cPatternAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPatternExp6ParserRuleCall_2_1_0 = (RuleCall)cPatternAssignment_2_1.eContents().get(0);
		
		////	| Patt3
		//Patt2LF returns Patt:
		//	bindTo=Ident "@" value=Patt3 | negative?="-" value=Patt3 | inaccessible?="~" pattern=Exp6;
		public ParserRule getRule() { return rule; }

		//bindTo=Ident "@" value=Patt3 | negative?="-" value=Patt3 | inaccessible?="~" pattern=Exp6
		public Alternatives getAlternatives() { return cAlternatives; }

		//bindTo=Ident "@" value=Patt3
		public Group getGroup_0() { return cGroup_0; }

		//bindTo=Ident
		public Assignment getBindToAssignment_0_0() { return cBindToAssignment_0_0; }

		//Ident
		public RuleCall getBindToIdentParserRuleCall_0_0_0() { return cBindToIdentParserRuleCall_0_0_0; }

		//"@"
		public Keyword getCommercialAtKeyword_0_1() { return cCommercialAtKeyword_0_1; }

		//value=Patt3
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//Patt3
		public RuleCall getValuePatt3ParserRuleCall_0_2_0() { return cValuePatt3ParserRuleCall_0_2_0; }

		//negative?="-" value=Patt3
		public Group getGroup_1() { return cGroup_1; }

		//negative?="-"
		public Assignment getNegativeAssignment_1_0() { return cNegativeAssignment_1_0; }

		//"-"
		public Keyword getNegativeHyphenMinusKeyword_1_0_0() { return cNegativeHyphenMinusKeyword_1_0_0; }

		//value=Patt3
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//Patt3
		public RuleCall getValuePatt3ParserRuleCall_1_1_0() { return cValuePatt3ParserRuleCall_1_1_0; }

		//inaccessible?="~" pattern=Exp6
		public Group getGroup_2() { return cGroup_2; }

		//inaccessible?="~"
		public Assignment getInaccessibleAssignment_2_0() { return cInaccessibleAssignment_2_0; }

		//"~"
		public Keyword getInaccessibleTildeKeyword_2_0_0() { return cInaccessibleTildeKeyword_2_0_0; }

		//pattern=Exp6
		public Assignment getPatternAssignment_2_1() { return cPatternAssignment_2_1; }

		//Exp6
		public RuleCall getPatternExp6ParserRuleCall_2_1_0() { return cPatternExp6ParserRuleCall_2_1_0; }
	}

	public class Patt3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Patt3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMetaAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cMetaQuestionMarkKeyword_0_0 = (Keyword)cMetaAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cTokenListAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cTokenListLeftSquareBracketKeyword_1_0_0 = (Keyword)cTokenListAssignment_1_0.eContents().get(0);
		private final Assignment cStrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStrStringTerminalRuleCall_1_1_0 = (RuleCall)cStrAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cNumberSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPatternNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPatternNameIdentParserRuleCall_2_1_0 = (RuleCall)cPatternNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cFullStopKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cLabelIdentParserRuleCall_2_2_1_0 = (RuleCall)cLabelAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cRefAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final CrossReference cRefIdentCrossReference_3_0_0 = (CrossReference)cRefAssignment_3_0.eContents().get(0);
		private final RuleCall cRefIdentIDTerminalRuleCall_3_0_0_1 = (RuleCall)cRefIdentCrossReference_3_0_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cFullStopKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cLabelAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cLabelIdentParserRuleCall_3_1_1_0 = (RuleCall)cLabelAssignment_3_1_1.eContents().get(0);
		private final Assignment cWildcardAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cWildcard_Keyword_4_0 = (Keyword)cWildcardAssignment_4.eContents().get(0);
		private final Assignment cIntegerAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cIntegerIntegerTerminalRuleCall_5_0 = (RuleCall)cIntegerAssignment_5.eContents().get(0);
		private final Assignment cDoubleAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cDoubleDoubleTerminalRuleCall_6_0 = (RuleCall)cDoubleAssignment_6.eContents().get(0);
		private final Assignment cStringAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cStringStringTerminalRuleCall_7_0 = (RuleCall)cStringAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cListPattAssParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Keyword cLessThanSignKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cListPattTupleCompParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cPattParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		
		//Patt3 returns Patt:
		//	meta?="?" | tokenList?="[" str=String "]" | "#" patternName=Ident ("." label=Ident)? | ref=[Ident] ("." label=Ident)?
		//	| wildcard?="_" | integer?=Integer | double?=Double | string?=String | "{" ListPattAss "}" | "<" ListPattTupleComp ">"
		//	| "(" Patt ")";
		public ParserRule getRule() { return rule; }

		//meta?="?" | tokenList?="[" str=String "]" | "#" patternName=Ident ("." label=Ident)? | ref=[Ident] ("." label=Ident)? |
		//wildcard?="_" | integer?=Integer | double?=Double | string?=String | "{" ListPattAss "}" | "<" ListPattTupleComp ">" |
		//"(" Patt ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//meta?="?"
		public Assignment getMetaAssignment_0() { return cMetaAssignment_0; }

		//"?"
		public Keyword getMetaQuestionMarkKeyword_0_0() { return cMetaQuestionMarkKeyword_0_0; }

		//tokenList?="[" str=String "]"
		public Group getGroup_1() { return cGroup_1; }

		//tokenList?="["
		public Assignment getTokenListAssignment_1_0() { return cTokenListAssignment_1_0; }

		//"["
		public Keyword getTokenListLeftSquareBracketKeyword_1_0_0() { return cTokenListLeftSquareBracketKeyword_1_0_0; }

		//str=String
		public Assignment getStrAssignment_1_1() { return cStrAssignment_1_1; }

		//String
		public RuleCall getStrStringTerminalRuleCall_1_1_0() { return cStrStringTerminalRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//"#" patternName=Ident ("." label=Ident)?
		public Group getGroup_2() { return cGroup_2; }

		//"#"
		public Keyword getNumberSignKeyword_2_0() { return cNumberSignKeyword_2_0; }

		//patternName=Ident
		public Assignment getPatternNameAssignment_2_1() { return cPatternNameAssignment_2_1; }

		//Ident
		public RuleCall getPatternNameIdentParserRuleCall_2_1_0() { return cPatternNameIdentParserRuleCall_2_1_0; }

		//("." label=Ident)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"."
		public Keyword getFullStopKeyword_2_2_0() { return cFullStopKeyword_2_2_0; }

		//label=Ident
		public Assignment getLabelAssignment_2_2_1() { return cLabelAssignment_2_2_1; }

		//Ident
		public RuleCall getLabelIdentParserRuleCall_2_2_1_0() { return cLabelIdentParserRuleCall_2_2_1_0; }

		//ref=[Ident] ("." label=Ident)?
		public Group getGroup_3() { return cGroup_3; }

		//ref=[Ident]
		public Assignment getRefAssignment_3_0() { return cRefAssignment_3_0; }

		//[Ident]
		public CrossReference getRefIdentCrossReference_3_0_0() { return cRefIdentCrossReference_3_0_0; }

		//ID
		public RuleCall getRefIdentIDTerminalRuleCall_3_0_0_1() { return cRefIdentIDTerminalRuleCall_3_0_0_1; }

		//("." label=Ident)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"."
		public Keyword getFullStopKeyword_3_1_0() { return cFullStopKeyword_3_1_0; }

		//label=Ident
		public Assignment getLabelAssignment_3_1_1() { return cLabelAssignment_3_1_1; }

		//Ident
		public RuleCall getLabelIdentParserRuleCall_3_1_1_0() { return cLabelIdentParserRuleCall_3_1_1_0; }

		//wildcard?="_"
		public Assignment getWildcardAssignment_4() { return cWildcardAssignment_4; }

		//"_"
		public Keyword getWildcard_Keyword_4_0() { return cWildcard_Keyword_4_0; }

		//integer?=Integer
		public Assignment getIntegerAssignment_5() { return cIntegerAssignment_5; }

		//Integer
		public RuleCall getIntegerIntegerTerminalRuleCall_5_0() { return cIntegerIntegerTerminalRuleCall_5_0; }

		//double?=Double
		public Assignment getDoubleAssignment_6() { return cDoubleAssignment_6; }

		//Double
		public RuleCall getDoubleDoubleTerminalRuleCall_6_0() { return cDoubleDoubleTerminalRuleCall_6_0; }

		//string?=String
		public Assignment getStringAssignment_7() { return cStringAssignment_7; }

		//String
		public RuleCall getStringStringTerminalRuleCall_7_0() { return cStringStringTerminalRuleCall_7_0; }

		//"{" ListPattAss "}"
		public Group getGroup_8() { return cGroup_8; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_0() { return cLeftCurlyBracketKeyword_8_0; }

		//ListPattAss
		public RuleCall getListPattAssParserRuleCall_8_1() { return cListPattAssParserRuleCall_8_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_2() { return cRightCurlyBracketKeyword_8_2; }

		//"<" ListPattTupleComp ">"
		public Group getGroup_9() { return cGroup_9; }

		//"<"
		public Keyword getLessThanSignKeyword_9_0() { return cLessThanSignKeyword_9_0; }

		//ListPattTupleComp
		public RuleCall getListPattTupleCompParserRuleCall_9_1() { return cListPattTupleCompParserRuleCall_9_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_9_2() { return cGreaterThanSignKeyword_9_2; }

		//"(" Patt ")"
		public Group getGroup_10() { return cGroup_10; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_0() { return cLeftParenthesisKeyword_10_0; }

		//Patt
		public RuleCall getPattParserRuleCall_10_1() { return cPattParserRuleCall_10_1; }

		//")"
		public Keyword getRightParenthesisKeyword_10_2() { return cRightParenthesisKeyword_10_2; }
	}

	public class PattAssElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PattAss");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePattParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//PattAss:
		//	name+=Ident ("," name+=Ident)* "=" value=Patt;
		public ParserRule getRule() { return rule; }

		//name+=Ident ("," name+=Ident)* "=" value=Patt
		public Group getGroup() { return cGroup; }

		//name+=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//("," name+=Ident)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//name+=Ident
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_1_1_0() { return cNameIdentParserRuleCall_1_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Patt
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Patt
		public RuleCall getValuePattParserRuleCall_3_0() { return cValuePattParserRuleCall_3_0; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDollarSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexIntegerTerminalRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		
		//Label:
		//	name=Ident | "$" index=Integer;
		public ParserRule getRule() { return rule; }

		//name=Ident | "$" index=Integer
		public Alternatives getAlternatives() { return cAlternatives; }

		//name=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//"$" index=Integer
		public Group getGroup_1() { return cGroup_1; }

		//"$"
		public Keyword getDollarSignKeyword_1_0() { return cDollarSignKeyword_1_0; }

		//index=Integer
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }

		//Integer
		public RuleCall getIndexIntegerTerminalRuleCall_1_1_0() { return cIndexIntegerTerminalRuleCall_1_1_0; }
	}

	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sort");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPTypeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cTokKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStrKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cStrsKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//Sort:
		//	"Type" | "PType" | "Tok" | "Str" | "Strs";
		public ParserRule getRule() { return rule; }

		//"Type" | "PType" | "Tok" | "Str" | "Strs"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//"PType"
		public Keyword getPTypeKeyword_1() { return cPTypeKeyword_1; }

		//"Tok"
		public Keyword getTokKeyword_2() { return cTokKeyword_2; }

		//"Str"
		public Keyword getStrKeyword_3() { return cStrKeyword_3; }

		//"Strs"
		public Keyword getStrsKeyword_4() { return cStrsKeyword_4; }
	}

	public class ListPattAssElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListPattAss");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListPattAssAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAssignmentsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAssignmentsPattAssParserRuleCall_1_0_0 = (RuleCall)cAssignmentsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cAssignmentsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cAssignmentsPattAssParserRuleCall_1_1_1_0 = (RuleCall)cAssignmentsAssignment_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		////BuiltInCat :
		////	  'String'
		////	| 'Int'
		////	| 'Ints'
		////	| 'Float'
		////;
		//ListPattAss:
		//	{ListPattAss} (assignments+=PattAss (";" assignments+=PattAss)* ";"?)?;
		public ParserRule getRule() { return rule; }

		//{ListPattAss} (assignments+=PattAss (";" assignments+=PattAss)* ";"?)?
		public Group getGroup() { return cGroup; }

		//{ListPattAss}
		public Action getListPattAssAction_0() { return cListPattAssAction_0; }

		//(assignments+=PattAss (";" assignments+=PattAss)* ";"?)?
		public Group getGroup_1() { return cGroup_1; }

		//assignments+=PattAss
		public Assignment getAssignmentsAssignment_1_0() { return cAssignmentsAssignment_1_0; }

		//PattAss
		public RuleCall getAssignmentsPattAssParserRuleCall_1_0_0() { return cAssignmentsPattAssParserRuleCall_1_0_0; }

		//(";" assignments+=PattAss)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//";"
		public Keyword getSemicolonKeyword_1_1_0() { return cSemicolonKeyword_1_1_0; }

		//assignments+=PattAss
		public Assignment getAssignmentsAssignment_1_1_1() { return cAssignmentsAssignment_1_1_1; }

		//PattAss
		public RuleCall getAssignmentsPattAssParserRuleCall_1_1_1_0() { return cAssignmentsPattAssParserRuleCall_1_1_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_1_2() { return cSemicolonKeyword_1_2; }
	}

	public class ListPattElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListPatt");
		private final Assignment cPatternsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cPatternsPattArgParserRuleCall_0 = (RuleCall)cPatternsAssignment.eContents().get(0);
		
		//ListPatt:
		//	patterns+=PattArg+;
		public ParserRule getRule() { return rule; }

		//patterns+=PattArg+
		public Assignment getPatternsAssignment() { return cPatternsAssignment; }

		//PattArg
		public RuleCall getPatternsPattArgParserRuleCall_0() { return cPatternsPattArgParserRuleCall_0; }
	}

	public class PattArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PattArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPatt2ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPattParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PattArg returns Patt:
		//	Patt2 | "{" Patt "}";
		public ParserRule getRule() { return rule; }

		//Patt2 | "{" Patt "}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Patt2
		public RuleCall getPatt2ParserRuleCall_0() { return cPatt2ParserRuleCall_0; }

		//"{" Patt "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//Patt
		public RuleCall getPattParserRuleCall_1_1() { return cPattParserRuleCall_1_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class ArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cWildcardAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cWildcard_Keyword_1_0 = (Keyword)cWildcardAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Arg:
		//	name+=Ident | wildcard?="_" | "{" name+=Ident+ // ListIdent2
		//	"}";
		public ParserRule getRule() { return rule; }

		//name+=Ident | wildcard?="_" | "{" name+=Ident+ // ListIdent2
		//"}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name+=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//wildcard?="_"
		public Assignment getWildcardAssignment_1() { return cWildcardAssignment_1; }

		//"_"
		public Keyword getWildcard_Keyword_1_0() { return cWildcard_Keyword_1_0; }

		//"{" name+=Ident+ // ListIdent2
		//"}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//name+=Ident+
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_1_0() { return cNameIdentParserRuleCall_2_1_0; }

		//// ListIdent2
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class BindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameIdentParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cWildcardAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cWildcard_Keyword_1_0 = (Keyword)cWildcardAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cNameAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cNameIdentParserRuleCall_2_2_1_0 = (RuleCall)cNameAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Bind:
		//	name+=Ident | wildcard?="_" | "{" name+=Ident ("," name+=Ident)* // ListIdent
		//	"}";
		public ParserRule getRule() { return rule; }

		//name+=Ident | wildcard?="_" | "{" name+=Ident ("," name+=Ident)* // ListIdent
		//"}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name+=Ident
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_0_0() { return cNameIdentParserRuleCall_0_0; }

		//wildcard?="_"
		public Assignment getWildcardAssignment_1() { return cWildcardAssignment_1; }

		//"_"
		public Keyword getWildcard_Keyword_1_0() { return cWildcard_Keyword_1_0; }

		//"{" name+=Ident ("," name+=Ident)* // ListIdent
		//"}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//name+=Ident
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_1_0() { return cNameIdentParserRuleCall_2_1_0; }

		//("," name+=Ident)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//name+=Ident
		public Assignment getNameAssignment_2_2_1() { return cNameAssignment_2_2_1; }

		//Ident
		public RuleCall getNameIdentParserRuleCall_2_2_1_0() { return cNameIdentParserRuleCall_2_2_1_0; }

		//// ListIdent
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class ListBindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListBind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindingsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBindingsBindParserRuleCall_0_0 = (RuleCall)cBindingsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBindingsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBindingsBindParserRuleCall_1_1_0 = (RuleCall)cBindingsAssignment_1_1.eContents().get(0);
		
		//ListBind:
		//	bindings+=Bind ("," bindings+=Bind)*;
		public ParserRule getRule() { return rule; }

		//bindings+=Bind ("," bindings+=Bind)*
		public Group getGroup() { return cGroup; }

		//bindings+=Bind
		public Assignment getBindingsAssignment_0() { return cBindingsAssignment_0; }

		//Bind
		public RuleCall getBindingsBindParserRuleCall_0_0() { return cBindingsBindParserRuleCall_0_0; }

		//("," bindings+=Bind)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//bindings+=Bind
		public Assignment getBindingsAssignment_1_1() { return cBindingsAssignment_1_1; }

		//Bind
		public RuleCall getBindingsBindParserRuleCall_1_1_0() { return cBindingsBindParserRuleCall_1_1_0; }
	}

	public class ListTupleCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListTupleComp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListTupleCompAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cElementsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cElementsExpParserRuleCall_1_0_0 = (RuleCall)cElementsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cElementsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cElementsExpParserRuleCall_1_1_1_0 = (RuleCall)cElementsAssignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		////Decl :
		////	  '(' bindings+=Bind (',' bindings+=Bind)* ':' e=Exp ')'
		////	| e=Exp3
		////;
		//ListTupleComp:
		//	{ListTupleComp} (elements+=Exp ("," elements+=Exp)* ","?)?;
		public ParserRule getRule() { return rule; }

		//{ListTupleComp} (elements+=Exp ("," elements+=Exp)* ","?)?
		public Group getGroup() { return cGroup; }

		//{ListTupleComp}
		public Action getListTupleCompAction_0() { return cListTupleCompAction_0; }

		//(elements+=Exp ("," elements+=Exp)* ","?)?
		public Group getGroup_1() { return cGroup_1; }

		//elements+=Exp
		public Assignment getElementsAssignment_1_0() { return cElementsAssignment_1_0; }

		//Exp
		public RuleCall getElementsExpParserRuleCall_1_0_0() { return cElementsExpParserRuleCall_1_0_0; }

		//("," elements+=Exp)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//elements+=Exp
		public Assignment getElementsAssignment_1_1_1() { return cElementsAssignment_1_1_1; }

		//Exp
		public RuleCall getElementsExpParserRuleCall_1_1_1_0() { return cElementsExpParserRuleCall_1_1_1_0; }

		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
	}

	public class ListPattTupleCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListPattTupleComp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListPattTupleCompAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPatternsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPatternsPattParserRuleCall_1_0_0 = (RuleCall)cPatternsAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cPatternsAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cPatternsPattParserRuleCall_1_1_1_0 = (RuleCall)cPatternsAssignment_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ListPattTupleComp:
		//	{ListPattTupleComp} (patterns+=Patt ("," patterns+=Patt)* ","?)?;
		public ParserRule getRule() { return rule; }

		//{ListPattTupleComp} (patterns+=Patt ("," patterns+=Patt)* ","?)?
		public Group getGroup() { return cGroup; }

		//{ListPattTupleComp}
		public Action getListPattTupleCompAction_0() { return cListPattTupleCompAction_0; }

		//(patterns+=Patt ("," patterns+=Patt)* ","?)?
		public Group getGroup_1() { return cGroup_1; }

		//patterns+=Patt
		public Assignment getPatternsAssignment_1_0() { return cPatternsAssignment_1_0; }

		//Patt
		public RuleCall getPatternsPattParserRuleCall_1_0_0() { return cPatternsPattParserRuleCall_1_0_0; }

		//("," patterns+=Patt)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }

		//patterns+=Patt
		public Assignment getPatternsAssignment_1_1_1() { return cPatternsAssignment_1_1_1; }

		//Patt
		public RuleCall getPatternsPattParserRuleCall_1_1_1_0() { return cPatternsPattParserRuleCall_1_1_1_0; }

		//","?
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
	}

	public class CaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Case");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternPattParserRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightExpParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Case:
		//	pattern=Patt "=>" right=Exp;
		public ParserRule getRule() { return rule; }

		//pattern=Patt "=>" right=Exp
		public Group getGroup() { return cGroup; }

		//pattern=Patt
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }

		//Patt
		public RuleCall getPatternPattParserRuleCall_0_0() { return cPatternPattParserRuleCall_0_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1() { return cEqualsSignGreaterThanSignKeyword_1; }

		//right=Exp
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }

		//Exp
		public RuleCall getRightExpParserRuleCall_2_0() { return cRightExpParserRuleCall_2_0; }
	}

	public class ListCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ListCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCasesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCasesCaseParserRuleCall_0_0 = (RuleCall)cCasesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCasesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cCasesCaseParserRuleCall_1_1_0 = (RuleCall)cCasesAssignment_1_1.eContents().get(0);
		
		//ListCase:
		//	cases+=Case (";" cases+=Case)*;
		public ParserRule getRule() { return rule; }

		//cases+=Case (";" cases+=Case)*
		public Group getGroup() { return cGroup; }

		//cases+=Case
		public Assignment getCasesAssignment_0() { return cCasesAssignment_0; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_0_0() { return cCasesCaseParserRuleCall_0_0; }

		//(";" cases+=Case)*
		public Group getGroup_1() { return cGroup_1; }

		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }

		//cases+=Case
		public Assignment getCasesAssignment_1_1() { return cCasesAssignment_1_1; }

		//Case
		public RuleCall getCasesCaseParserRuleCall_1_1_0() { return cCasesCaseParserRuleCall_1_1_0; }
	}

	public class AlternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Altern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAlt1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAlt1ExpParserRuleCall_0_0 = (RuleCall)cAlt1Assignment_0.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAlt2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlt2ExpParserRuleCall_2_0 = (RuleCall)cAlt2Assignment_2.eContents().get(0);
		
		//Altern:
		//	alt1=Exp "/" alt2=Exp;
		public ParserRule getRule() { return rule; }

		//alt1=Exp "/" alt2=Exp
		public Group getGroup() { return cGroup; }

		//alt1=Exp
		public Assignment getAlt1Assignment_0() { return cAlt1Assignment_0; }

		//Exp
		public RuleCall getAlt1ExpParserRuleCall_0_0() { return cAlt1ExpParserRuleCall_0_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//alt2=Exp
		public Assignment getAlt2Assignment_2() { return cAlt2Assignment_2; }

		//Exp
		public RuleCall getAlt2ExpParserRuleCall_2_0() { return cAlt2ExpParserRuleCall_2_0; }
	}

	public class DDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cBindListAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBindListListBindParserRuleCall_0_1_0 = (RuleCall)cBindListAssignment_0_1.eContents().get(0);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cEAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEExpParserRuleCall_0_3_0 = (RuleCall)cEAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cExp6ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DDecl:
		//	"(" bindList=ListBind ":" e=Exp ")" | Exp6;
		public ParserRule getRule() { return rule; }

		//"(" bindList=ListBind ":" e=Exp ")" | Exp6
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" bindList=ListBind ":" e=Exp ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//bindList=ListBind
		public Assignment getBindListAssignment_0_1() { return cBindListAssignment_0_1; }

		//ListBind
		public RuleCall getBindListListBindParserRuleCall_0_1_0() { return cBindListListBindParserRuleCall_0_1_0; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//e=Exp
		public Assignment getEAssignment_0_3() { return cEAssignment_0_3; }

		//Exp
		public RuleCall getEExpParserRuleCall_0_3_0() { return cEExpParserRuleCall_0_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }

		//Exp6
		public RuleCall getExp6ParserRuleCall_1() { return cExp6ParserRuleCall_1; }
	}

	public class IdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Ident");
		private final Assignment cSAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSIDTerminalRuleCall_0 = (RuleCall)cSAssignment.eContents().get(0);
		
		/// *
		// * Terminals, Comments
		// * 
		// * Based on (but modified from) those from org.eclipse.xtext.common.Terminals
		// * Ref: http://www.eclipse.org/Xtext/documentation/2_0_0/020-grammar-language.php#grammarLanguage_6
		// * / Ident:
		//	s=ID;
		public ParserRule getRule() { return rule; }

		//s=ID
		public Assignment getSAssignment() { return cSAssignment; }

		//ID
		public RuleCall getSIDTerminalRuleCall_0() { return cSIDTerminalRuleCall_0; }
	}
	
	
	private ModDefElements pModDef;
	private ModTypeElements pModType;
	private ModBodyElements pModBody;
	private ModContentElements pModContent;
	private ListOpenElements pListOpen;
	private OpenElements pOpen;
	private ListInstElements pListInst;
	private InstElements pInst;
	private ListIncludedElements pListIncluded;
	private IncludedElements pIncluded;
	private TopDefElements pTopDef;
	private CatDefElements pCatDef;
	private FunDefElements pFunDef;
	private DefDefElements pDefDef;
	private DataDefElements pDataDef;
	private ParamDefElements pParamDef;
	private OperDefElements pOperDef;
	private OperDefInnerElements pOperDefInner;
	private LinDefElements pLinDef;
	private TermDefElements pTermDef;
	private FlagDefElements pFlagDef;
	private ParConstrElements pParConstr;
	private NameElements pName;
	private LocDefElements pLocDef;
	private ListLocDefElements pListLocDef;
	private ExpElements pExp;
	private ExpLF_Exp1or3Elements pExpLF_Exp1or3;
	private ExpLF_AfterExp3Elements pExpLF_AfterExp3;
	private Exp1Elements pExp1;
	private Exp2Elements pExp2;
	private Exp3Elements pExp3;
	private Exp3LFElements pExp3LF;
	private Exp4Elements pExp4;
	private Exp4LFElements pExp4LF;
	private Exp5Elements pExp5;
	private Exp6Elements pExp6;
	private ListExpElements pListExp;
	private ExpsElements pExps;
	private PattElements pPatt;
	private Patt1Elements pPatt1;
	private Patt2Elements pPatt2;
	private Patt2LFElements pPatt2LF;
	private Patt3Elements pPatt3;
	private PattAssElements pPattAss;
	private LabelElements pLabel;
	private SortElements pSort;
	private ListPattAssElements pListPattAss;
	private ListPattElements pListPatt;
	private PattArgElements pPattArg;
	private ArgElements pArg;
	private BindElements pBind;
	private ListBindElements pListBind;
	private ListTupleCompElements pListTupleComp;
	private ListPattTupleCompElements pListPattTupleComp;
	private CaseElements pCase;
	private ListCaseElements pListCase;
	private AlternElements pAltern;
	private DDeclElements pDDecl;
	private IdentElements pIdent;
	private TerminalRule tID;
	private TerminalRule tString;
	private TerminalRule tInteger;
	private TerminalRule tDouble;
	private TerminalRule tCOMPILER_PRAGMA;
	private TerminalRule tGF_DOC;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	private TerminalRule tANY_OTHER;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public GFGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	////SourceModule
	////	: ModDef
	////	| ModHeader
	////;
	//ModDef returns SourceModule:
	//	incomplete?="incomplete"? type=ModType "=" body=ModBody ";"*;
	public ModDefElements getModDefAccess() {
		return (pModDef != null) ? pModDef : (pModDef = new ModDefElements());
	}
	
	public ParserRule getModDefRule() {
		return getModDefAccess().getRule();
	}

	////ModHeader returns SourceModule
	////	: (incomplete?='incomplete')? type=ModType '=' body=ModHeaderBody
	////;
	//// Cross-ref checking of module names is done by Validation, not via grammar
	//ModType:
	//	abstract?="abstract" name=Ident | resource?="resource" name=Ident | interface?="interface" name=Ident |
	//	concrete?="concrete" name=Ident "of" abstractName=Ident | instance?="instance" name=Ident "of"
	//	interfaceInclude=Included;
	public ModTypeElements getModTypeAccess() {
		return (pModType != null) ? pModType : (pModType = new ModTypeElements());
	}
	
	public ParserRule getModTypeRule() {
		return getModTypeAccess().getRule();
	}

	////ModHeaderBody returns ModBody :
	////	extendList=ListIncluded
	////	('**' functor=Included functorInstantiation?='with' instantiationList=ListInst)?
	////	('**' modOpen=ModOpen)?
	////|
	////	functor=Included
	////	functorInstantiation?='with' instantiationList=ListInst
	////	('**' modOpen=ModOpen)?
	////|
	////	modOpen=ModOpen
	////;
	////
	////ModOpen
	////	: {ModOpen} ('open' openList=ListOpen)?
	////;
	//ModBody:
	//	extendList=ListIncluded ("**" functor=Included functorInstantiation?="with" instantiationList=ListInst)? ("**"
	//	modContent=ModContent)? | functor=Included functorInstantiation?="with" instantiationList=ListInst ("**"
	//	modContent=ModContent)? | modContent=ModContent;
	public ModBodyElements getModBodyAccess() {
		return (pModBody != null) ? pModBody : (pModBody = new ModBodyElements());
	}
	
	public ParserRule getModBodyRule() {
		return getModBodyAccess().getRule();
	}

	//// combination of ModOpen & ModContent
	//ModContent:
	//	{ModContent} ("{" judgements+=TopDef* "}")? | "open" openList=ListOpen ("in" "{" judgements+=TopDef* "}")?;
	public ModContentElements getModContentAccess() {
		return (pModContent != null) ? pModContent : (pModContent = new ModContentElements());
	}
	
	public ParserRule getModContentRule() {
		return getModContentAccess().getRule();
	}

	//ListOpen:
	//	opens+=Open ("," opens+=Open)*;
	public ListOpenElements getListOpenAccess() {
		return (pListOpen != null) ? pListOpen : (pListOpen = new ListOpenElements());
	}
	
	public ParserRule getListOpenRule() {
		return getListOpenAccess().getRule();
	}

	//Open:
	//	name=Ident | "(" alias=Ident "=" name=Ident ")";
	public OpenElements getOpenAccess() {
		return (pOpen != null) ? pOpen : (pOpen = new OpenElements());
	}
	
	public ParserRule getOpenRule() {
		return getOpenAccess().getRule();
	}

	//ListInst:
	//	instantiations+=Inst ("," instantiations+=Inst)*;
	public ListInstElements getListInstAccess() {
		return (pListInst != null) ? pListInst : (pListInst = new ListInstElements());
	}
	
	public ParserRule getListInstRule() {
		return getListInstAccess().getRule();
	}

	//Inst:
	//	"(" interface=Ident "=" name=Ident ")";
	public InstElements getInstAccess() {
		return (pInst != null) ? pInst : (pInst = new InstElements());
	}
	
	public ParserRule getInstRule() {
		return getInstAccess().getRule();
	}

	//ListIncluded:
	//	included+=Included ("," included+=Included)*;
	public ListIncludedElements getListIncludedAccess() {
		return (pListIncluded != null) ? pListIncluded : (pListIncluded = new ListIncludedElements());
	}
	
	public ParserRule getListIncludedRule() {
		return getListIncludedAccess().getRule();
	}

	//Included:
	//	name=Ident | name=Ident inclusive?="[" includes+=Ident ("," includes+=Ident)* "]" | name=Ident exclusive?="-" "["
	//	excludes+=Ident ("," excludes+=Ident)* "]";
	public IncludedElements getIncludedAccess() {
		return (pIncluded != null) ? pIncluded : (pIncluded = new IncludedElements());
	}
	
	public ParserRule getIncludedRule() {
		return getIncludedAccess().getRule();
	}

	//TopDef:
	//	cat?="cat" (definitions+=CatDef ";")+ | fun?="fun" (definitions+=FunDef ";")+ | def?="def" (definitions+=DefDef ";")+
	//	| data?="data" (definitions+=DataDef ";")+ | param?="param" (definitions+=ParamDef ";")+ | oper?="oper"
	//	(definitions+=OperDef ";")+ | lincat?="lincat" (definitions+=TermDef ";")+ | lindef?="lindef" (definitions+=TermDef
	//	";")+ | lin?="lin" (definitions+=LinDef ";")+ | printname?="printname" "cat" (definitions+=TermDef ";")+ |
	//	printname?="printname" "fun" (definitions+=TermDef ";")+ | flags?="flags" (definitions+=FlagDef ";")+;
	public TopDefElements getTopDefAccess() {
		return (pTopDef != null) ? pTopDef : (pTopDef = new TopDefElements());
	}
	
	public ParserRule getTopDefRule() {
		return getTopDefAccess().getRule();
	}

	//CatDef:
	//	name=Ident context+=DDecl* | list?="[" name=Ident context+=DDecl* "]" ("{" size=Integer "}")?;
	public CatDefElements getCatDefAccess() {
		return (pCatDef != null) ? pCatDef : (pCatDef = new CatDefElements());
	}
	
	public ParserRule getCatDefRule() {
		return getCatDefAccess().getRule();
	}

	//FunDef:
	//	name+=Ident ("," name+=Ident)* ":" type=Exp;
	public FunDefElements getFunDefAccess() {
		return (pFunDef != null) ? pFunDef : (pFunDef = new FunDefElements());
	}
	
	public ParserRule getFunDefRule() {
		return getFunDefAccess().getRule();
	}

	//DefDef:
	//	name+=Name ("," name+=Name)* "=" definition=Exp | name+=Name patternList=ListPatt "=" definition=Exp;
	public DefDefElements getDefDefAccess() {
		return (pDefDef != null) ? pDefDef : (pDefDef = new DefDefElements());
	}
	
	public ParserRule getDefDefRule() {
		return getDefDefAccess().getRule();
	}

	//DataDef:
	//	name+=Ident "=" constructors+=Ident ("|" constructors+=Ident)* | name+=Ident ("," name+=Ident)* ":" type=Exp;
	public DataDefElements getDataDefAccess() {
		return (pDataDef != null) ? pDataDef : (pDataDef = new DataDefElements());
	}
	
	public ParserRule getDataDefRule() {
		return getDataDefAccess().getRule();
	}

	//ParamDef:
	//	name=Ident ("=" constructors+=ParConstr ("|" constructors+=ParConstr)*)?;
	public ParamDefElements getParamDefAccess() {
		return (pParamDef != null) ? pParamDef : (pParamDef = new ParamDefElements());
	}
	
	public ParserRule getParamDefRule() {
		return getParamDefAccess().getRule();
	}

	//// Modified to handle "overload" syntax
	////OperDef
	////  : ListName ':' Exp 
	////  | ListName ':' Exp	'=' Exp
	////  | ListName 			'=' Exp
	////  | Name ListArg 		'=' Exp
	//OperDef:
	//	name+=Name ("," name+=Name)* ":" type=Exp ("=" (definition=Exp | overload?="overload" "{" overloads+=OperDefInner (";"
	//	overloads+=OperDefInner)* ";"? "}"))? | name+=Name ("," name+=Name)* "=" (definition=Exp | overload?="overload" "{"
	//	overloads+=OperDefInner (";" overloads+=OperDefInner)* ";"? "}") | name+=Name args+=Arg+ "=" definition=Exp;
	public OperDefElements getOperDefAccess() {
		return (pOperDef != null) ? pOperDef : (pOperDef = new OperDefElements());
	}
	
	public ParserRule getOperDefRule() {
		return getOperDefAccess().getRule();
	}

	//OperDefInner returns OperDef:
	//	name+=Name ("," name+=Name)* ":" type=Exp "=" definition=Exp? | name+=Name ("," name+=Name)* "=" definition=Exp |
	//	name+=Name args+=Arg+ "=" definition=Exp;
	public OperDefInnerElements getOperDefInnerAccess() {
		return (pOperDefInner != null) ? pOperDefInner : (pOperDefInner = new OperDefInnerElements());
	}
	
	public ParserRule getOperDefInnerRule() {
		return getOperDefInnerAccess().getRule();
	}

	//LinDef:
	//	name+=Name ("," name+=Name)* "=" definition=Exp | name+=Name args+=Arg+ "=" definition=Exp;
	public LinDefElements getLinDefAccess() {
		return (pLinDef != null) ? pLinDef : (pLinDef = new LinDefElements());
	}
	
	public ParserRule getLinDefRule() {
		return getLinDefAccess().getRule();
	}

	//TermDef:
	//	name+=Name ("," name+=Name)* "=" definition=Exp;
	public TermDefElements getTermDefAccess() {
		return (pTermDef != null) ? pTermDef : (pTermDef = new TermDefElements());
	}
	
	public ParserRule getTermDefRule() {
		return getTermDefAccess().getRule();
	}

	//FlagDef:
	//	name=Ident "=" (value=Ident | strValue=String);
	public FlagDefElements getFlagDefAccess() {
		return (pFlagDef != null) ? pFlagDef : (pFlagDef = new FlagDefElements());
	}
	
	public ParserRule getFlagDefRule() {
		return getFlagDefAccess().getRule();
	}

	//ParConstr:
	//	name=Ident constructors+=DDecl*;
	public ParConstrElements getParConstrAccess() {
		return (pParConstr != null) ? pParConstr : (pParConstr = new ParConstrElements());
	}
	
	public ParserRule getParConstrRule() {
		return getParConstrAccess().getRule();
	}

	//Name:
	//	name=Ident | "[" name=Ident "]";
	public NameElements getNameAccess() {
		return (pName != null) ? pName : (pName = new NameElements());
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}

	//LocDef:
	//	name+=Ident ("," name+=Ident)* ":" type=Exp ("=" value=Exp)? | name+=Ident ("," name+=Ident)* "=" value=Exp;
	public LocDefElements getLocDefAccess() {
		return (pLocDef != null) ? pLocDef : (pLocDef = new LocDefElements());
	}
	
	public ParserRule getLocDefRule() {
		return getLocDefAccess().getRule();
	}

	//ListLocDef:
	//	{ListLocDef} (localDefinitions+=LocDef (";" localDefinitions+=LocDef)* ";"?)?;
	public ListLocDefElements getListLocDefAccess() {
		return (pListLocDef != null) ? pListLocDef : (pListLocDef = new ListLocDefElements());
	}
	
	public ParserRule getListLocDefRule() {
		return getListLocDefAccess().getRule();
	}

	/// *
	//Exp
	//  : Exp1 '|' Exp 
	//  | '\\'   ListBind '->' Exp
	//  | '\\\\' ListBind '=>' Exp
	//  | Decl '->' Exp
	//  | Exp3 '=>' Exp
	//  | 'let' '{' ListLocDef '}' 'in' Exp
	//  | 'let' ListLocDef 'in' Exp
	//  | Exp3 'where' '{' ListLocDef '}'
	//  | 'in' Exp5 String
	//  | Exp1   
	// * / Exp:
	//	ExpLF_Exp1or3 //	  Exp1 ({Exp.left=current} '|' right=Exp)?
	//	//	| Exp3 {Exp.left=current} right=ExpLF
	//	| funAbstraction?="\\" bindList=ListBind "->" right= // function abstraction (Lamba)
	//	Exp | tableAbstracttion?="\\\\" bindList=ListBind "=>" right= // table abstraction
	//	Exp | "(" bindList=ListBind ":" decl=Exp ")" "->" right= // Decl, part 1
	//	Exp | "let" "{" defList=ListLocDef "}" "in" right=Exp | "let" defList=ListLocDef "in" right=Exp | "in" left=Exp5 str= // rule by example
	//	String;
	public ExpElements getExpAccess() {
		return (pExp != null) ? pExp : (pExp = new ExpElements());
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}

	//ExpLF_Exp1or3 returns Exp:
	//	Exp3 (({ExpLF13.left=current} (tokenListCat?="++" | tokenGlue?="+") right=Exp3)* ({ExpLF13.left=current} "|"
	//	right=Exp)? // NOTE precedence of +/++ is lost here.
	//	| {ExpLF13.left=current} right=ExpLF_AfterExp3);
	public ExpLF_Exp1or3Elements getExpLF_Exp1or3Access() {
		return (pExpLF_Exp1or3 != null) ? pExpLF_Exp1or3 : (pExpLF_Exp1or3 = new ExpLF_Exp1or3Elements());
	}
	
	public ParserRule getExpLF_Exp1or3Rule() {
		return getExpLF_Exp1or3Access().getRule();
	}

	//ExpLF_AfterExp3 returns Exp:
	//	"->" right= // Decl, part2 
	//	Exp | "=>" right=Exp | "where" "{" defList=ListLocDef "}";
	public ExpLF_AfterExp3Elements getExpLF_AfterExp3Access() {
		return (pExpLF_AfterExp3 != null) ? pExpLF_AfterExp3 : (pExpLF_AfterExp3 = new ExpLF_AfterExp3Elements());
	}
	
	public ParserRule getExpLF_AfterExp3Rule() {
		return getExpLF_AfterExp3Access().getRule();
	}

	//Exp1 returns Exp:
	//	Exp2 ({Exp1.left=current} tokenListCat?="++" right=Exp2)*;
	public Exp1Elements getExp1Access() {
		return (pExp1 != null) ? pExp1 : (pExp1 = new Exp1Elements());
	}
	
	public ParserRule getExp1Rule() {
		return getExp1Access().getRule();
	}

	//Exp2 returns Exp:
	//	Exp3 ({Exp2.left=current} tokenGlue?="+" right=Exp3)*;
	public Exp2Elements getExp2Access() {
		return (pExp2 != null) ? pExp2 : (pExp2 = new Exp2Elements());
	}
	
	public ParserRule getExp2Rule() {
		return getExp2Access().getRule();
	}

	/// *
	//Exp3
	//  : Exp3 '!' Exp4 
	//  | 'table' '{' ListCase '}'
	//  | 'table' Exp6 '{' ListCase '}'
	//  | 'table' Exp6 '[' ListExp ']'
	//  | Exp3 '*'  Exp4
	//  | Exp3 '**' Exp4
	//  | Exp4
	// * / Exp3 returns Exp:
	//	Exp3LF ({Exp3.left=current} ("!" | "*" | "**") right=Exp4)*;
	public Exp3Elements getExp3Access() {
		return (pExp3 != null) ? pExp3 : (pExp3 = new Exp3Elements());
	}
	
	public ParserRule getExp3Rule() {
		return getExp3Access().getRule();
	}

	//Exp3LF returns Exp:
	//	"table" "{" caseList=ListCase "}" | "table" argType=Exp6 ("{" caseList=ListCase "}" | "[" expList=ListExp "]") | Exp4;
	public Exp3LFElements getExp3LFAccess() {
		return (pExp3LF != null) ? pExp3LF : (pExp3LF = new Exp3LFElements());
	}
	
	public ParserRule getExp3LFRule() {
		return getExp3LFAccess().getRule();
	}

	/// *
	//Exp4
	//  : Exp4 Exp5
	//  | Exp4 '{' Exp '}' 
	//  | 'case' Exp 'of' '{' ListCase '}'
	//  | 'variants' '{' ListExp '}'
	//  | 'pre' '{' ListCase '}'
	//  | 'pre' '{' String ';' ListAltern '}'
	//  | 'pre' '{' Ident ';' ListAltern '}'
	//  | 'strs' '{' ListExp '}'
	//  | '#' Patt3
	//  | 'pattern' Exp5
	//  | 'lincat' Ident Exp5
	//  | 'lin' Ident Exp5
	//  | Exp5
	// * / Exp4 returns Exp:
	//	Exp4LF ({Exp4.left=current} (right=Exp5 | "{" right=Exp "}"))*;
	public Exp4Elements getExp4Access() {
		return (pExp4 != null) ? pExp4 : (pExp4 = new Exp4Elements());
	}
	
	public ParserRule getExp4Rule() {
		return getExp4Access().getRule();
	}

	//Exp4LF returns Exp:
	//	case?="case" caseOf=Exp "of" "{" caseList=ListCase "}" | variants?="variants" "{" expList=ListExp "}" | pre?="pre" "{"
	//	caseList=ListCase "}" | pre?="pre" "{" str=String ";" alts+=Altern (";" alts+=Altern)* "}" | pre?="pre" "{"
	//	ident=Ident ";" alts+=Altern (";" alts+=Altern)* "}" | "strs" "{" expList=ListExp "}" | "#" pattern=Patt3 | "pattern"
	//	pattern=Exp5 | linwrap?="lincat" linName=[Ident] inner=Exp5 | linwrap?="lin" linName=[Ident] inner=Exp5 | Exp5;
	public Exp4LFElements getExp4LFAccess() {
		return (pExp4LF != null) ? pExp4LF : (pExp4LF = new Exp4LFElements());
	}
	
	public ParserRule getExp4LFRule() {
		return getExp4LFAccess().getRule();
	}

	//Exp5 returns Exp:
	//	Exp6 ("." labels+=Label)* // projection or qualification
	//;
	public Exp5Elements getExp5Access() {
		return (pExp5 != null) ? pExp5 : (pExp5 = new Exp5Elements());
	}
	
	public ParserRule getExp5Rule() {
		return getExp5Access().getRule();
	}

	/// *
	//Exp6 
	//  : Ident 
	//  | Sort
	//  | String
	//  | Integer
	//  | Double
	//  | '?'
	//  | '[' ']'
	//  | '[' Ident Exps ']'
	//  | '[' String ']'
	//  | '{' ListLocDef '}'
	//  | '<' ListTupleComp '>'
	//  | '<' Exp ':' Exp '>'
	//  | LString
	//  | '(' Exp ')'
	// * / Exp6 returns Exp:
	//	ref= // constant or variable
	//	[Ident] | sort?= // type of types/param types/strings/token lists
	//	Sort | string?= // string literal
	//	String | integer?= // integer literal
	//	Integer | double?= // floating point literal
	//	Double | meta?= // metavariable
	//	"?" | emptyString?="[" // empty token list
	//	"]" | listCat?="[" category=[Ident] context=Exps // list category
	//	"]" | tokenList?="[" str=String // token list
	//	"]" | record?="{" defList=ListLocDef // record / record type
	//	"}" | "<" (=> (tupleList=ListTupleComp) | expression=Exp ":" type=Exp) // tuple | type-annotated expression
	//	">" | identity?="(" inner=Exp ")";
	public Exp6Elements getExp6Access() {
		return (pExp6 != null) ? pExp6 : (pExp6 = new Exp6Elements());
	}
	
	public ParserRule getExp6Rule() {
		return getExp6Access().getRule();
	}

	//ListExp:
	//	{ListExp} (expressions+=Exp (";" expressions+=Exp)* ";"?)?;
	public ListExpElements getListExpAccess() {
		return (pListExp != null) ? pListExp : (pListExp = new ListExpElements());
	}
	
	public ParserRule getListExpRule() {
		return getListExpAccess().getRule();
	}

	//Exps:
	//	{Exps} expressions+=Exp6*;
	public ExpsElements getExpsAccess() {
		return (pExps != null) ? pExps : (pExps = new ExpsElements());
	}
	
	public ParserRule getExpsRule() {
		return getExpsAccess().getRule();
	}

	//Patt:
	//	Patt1 ({Patt.left=current} (or?="|" | and?="+") right=Patt1)*;
	public PattElements getPattAccess() {
		return (pPatt != null) ? pPatt : (pPatt = new PattElements());
	}
	
	public ParserRule getPattRule() {
		return getPattAccess().getRule();
	}

	////	| Patt2
	//Patt1 returns Patt:
	//	name=Ident value=ListPatt | name=Ident "." label=Ident value=ListPatt | Patt3 "*"? | Patt2LF;
	public Patt1Elements getPatt1Access() {
		return (pPatt1 != null) ? pPatt1 : (pPatt1 = new Patt1Elements());
	}
	
	public ParserRule getPatt1Rule() {
		return getPatt1Access().getRule();
	}

	//// Left-factoring of `Patt1 -> Patt2` above and `Patt2 -> Patt3` below
	//Patt2 returns Patt:
	//	Patt2LF | Patt3;
	public Patt2Elements getPatt2Access() {
		return (pPatt2 != null) ? pPatt2 : (pPatt2 = new Patt2Elements());
	}
	
	public ParserRule getPatt2Rule() {
		return getPatt2Access().getRule();
	}

	////	| Patt3
	//Patt2LF returns Patt:
	//	bindTo=Ident "@" value=Patt3 | negative?="-" value=Patt3 | inaccessible?="~" pattern=Exp6;
	public Patt2LFElements getPatt2LFAccess() {
		return (pPatt2LF != null) ? pPatt2LF : (pPatt2LF = new Patt2LFElements());
	}
	
	public ParserRule getPatt2LFRule() {
		return getPatt2LFAccess().getRule();
	}

	//Patt3 returns Patt:
	//	meta?="?" | tokenList?="[" str=String "]" | "#" patternName=Ident ("." label=Ident)? | ref=[Ident] ("." label=Ident)?
	//	| wildcard?="_" | integer?=Integer | double?=Double | string?=String | "{" ListPattAss "}" | "<" ListPattTupleComp ">"
	//	| "(" Patt ")";
	public Patt3Elements getPatt3Access() {
		return (pPatt3 != null) ? pPatt3 : (pPatt3 = new Patt3Elements());
	}
	
	public ParserRule getPatt3Rule() {
		return getPatt3Access().getRule();
	}

	//PattAss:
	//	name+=Ident ("," name+=Ident)* "=" value=Patt;
	public PattAssElements getPattAssAccess() {
		return (pPattAss != null) ? pPattAss : (pPattAss = new PattAssElements());
	}
	
	public ParserRule getPattAssRule() {
		return getPattAssAccess().getRule();
	}

	//Label:
	//	name=Ident | "$" index=Integer;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Sort:
	//	"Type" | "PType" | "Tok" | "Str" | "Strs";
	public SortElements getSortAccess() {
		return (pSort != null) ? pSort : (pSort = new SortElements());
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}

	////BuiltInCat :
	////	  'String'
	////	| 'Int'
	////	| 'Ints'
	////	| 'Float'
	////;
	//ListPattAss:
	//	{ListPattAss} (assignments+=PattAss (";" assignments+=PattAss)* ";"?)?;
	public ListPattAssElements getListPattAssAccess() {
		return (pListPattAss != null) ? pListPattAss : (pListPattAss = new ListPattAssElements());
	}
	
	public ParserRule getListPattAssRule() {
		return getListPattAssAccess().getRule();
	}

	//ListPatt:
	//	patterns+=PattArg+;
	public ListPattElements getListPattAccess() {
		return (pListPatt != null) ? pListPatt : (pListPatt = new ListPattElements());
	}
	
	public ParserRule getListPattRule() {
		return getListPattAccess().getRule();
	}

	//PattArg returns Patt:
	//	Patt2 | "{" Patt "}";
	public PattArgElements getPattArgAccess() {
		return (pPattArg != null) ? pPattArg : (pPattArg = new PattArgElements());
	}
	
	public ParserRule getPattArgRule() {
		return getPattArgAccess().getRule();
	}

	//Arg:
	//	name+=Ident | wildcard?="_" | "{" name+=Ident+ // ListIdent2
	//	"}";
	public ArgElements getArgAccess() {
		return (pArg != null) ? pArg : (pArg = new ArgElements());
	}
	
	public ParserRule getArgRule() {
		return getArgAccess().getRule();
	}

	//Bind:
	//	name+=Ident | wildcard?="_" | "{" name+=Ident ("," name+=Ident)* // ListIdent
	//	"}";
	public BindElements getBindAccess() {
		return (pBind != null) ? pBind : (pBind = new BindElements());
	}
	
	public ParserRule getBindRule() {
		return getBindAccess().getRule();
	}

	//ListBind:
	//	bindings+=Bind ("," bindings+=Bind)*;
	public ListBindElements getListBindAccess() {
		return (pListBind != null) ? pListBind : (pListBind = new ListBindElements());
	}
	
	public ParserRule getListBindRule() {
		return getListBindAccess().getRule();
	}

	////Decl :
	////	  '(' bindings+=Bind (',' bindings+=Bind)* ':' e=Exp ')'
	////	| e=Exp3
	////;
	//ListTupleComp:
	//	{ListTupleComp} (elements+=Exp ("," elements+=Exp)* ","?)?;
	public ListTupleCompElements getListTupleCompAccess() {
		return (pListTupleComp != null) ? pListTupleComp : (pListTupleComp = new ListTupleCompElements());
	}
	
	public ParserRule getListTupleCompRule() {
		return getListTupleCompAccess().getRule();
	}

	//ListPattTupleComp:
	//	{ListPattTupleComp} (patterns+=Patt ("," patterns+=Patt)* ","?)?;
	public ListPattTupleCompElements getListPattTupleCompAccess() {
		return (pListPattTupleComp != null) ? pListPattTupleComp : (pListPattTupleComp = new ListPattTupleCompElements());
	}
	
	public ParserRule getListPattTupleCompRule() {
		return getListPattTupleCompAccess().getRule();
	}

	//Case:
	//	pattern=Patt "=>" right=Exp;
	public CaseElements getCaseAccess() {
		return (pCase != null) ? pCase : (pCase = new CaseElements());
	}
	
	public ParserRule getCaseRule() {
		return getCaseAccess().getRule();
	}

	//ListCase:
	//	cases+=Case (";" cases+=Case)*;
	public ListCaseElements getListCaseAccess() {
		return (pListCase != null) ? pListCase : (pListCase = new ListCaseElements());
	}
	
	public ParserRule getListCaseRule() {
		return getListCaseAccess().getRule();
	}

	//Altern:
	//	alt1=Exp "/" alt2=Exp;
	public AlternElements getAlternAccess() {
		return (pAltern != null) ? pAltern : (pAltern = new AlternElements());
	}
	
	public ParserRule getAlternRule() {
		return getAlternAccess().getRule();
	}

	//DDecl:
	//	"(" bindList=ListBind ":" e=Exp ")" | Exp6;
	public DDeclElements getDDeclAccess() {
		return (pDDecl != null) ? pDDecl : (pDDecl = new DDeclElements());
	}
	
	public ParserRule getDDeclRule() {
		return getDDeclAccess().getRule();
	}

	/// *
	// * Terminals, Comments
	// * 
	// * Based on (but modified from) those from org.eclipse.xtext.common.Terminals
	// * Ref: http://www.eclipse.org/Xtext/documentation/2_0_0/020-grammar-language.php#grammarLanguage_6
	// * / Ident:
	//	s=ID;
	public IdentElements getIdentAccess() {
		return (pIdent != null) ? pIdent : (pIdent = new IdentElements());
	}
	
	public ParserRule getIdentRule() {
		return getIdentAccess().getRule();
	}

	////	('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'\'')*('.'('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'0'..'9'|'_'|'\'')*)?
	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "0".."9" | "_" | "\'")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal String:
	//	"\"" ("\\" ("\"" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getStringRule() {
		return (tString != null) ? tString : (tString = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "String"));
	} 

	//terminal Integer returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getIntegerRule() {
		return (tInteger != null) ? tInteger : (tInteger = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Integer"));
	} 

	//terminal Double returns ecore::EDouble:
	//	"0".."9"+ "." "0".."9"+ ("e" "-"? "0".."9"+)?;
	public TerminalRule getDoubleRule() {
		return (tDouble != null) ? tDouble : (tDouble = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Double"));
	} 

	//terminal COMPILER_PRAGMA:
	//	"--#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getCOMPILER_PRAGMARule() {
		return (tCOMPILER_PRAGMA != null) ? tCOMPILER_PRAGMA : (tCOMPILER_PRAGMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "COMPILER_PRAGMA"));
	} 

	//terminal GF_DOC:
	//	("--%" | "--:") !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getGF_DOCRule() {
		return (tGF_DOC != null) ? tGF_DOC : (tGF_DOC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "GF_DOC"));
	} 

	//terminal ML_COMMENT:
	//	"{-"->"-}";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return (tANY_OTHER != null) ? tANY_OTHER : (tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER"));
	} 
}
