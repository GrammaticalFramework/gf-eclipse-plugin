package org.grammaticalframework.eclipse.scoping;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.grammaticalframework.eclipse.builder.GFBuilder;

/**
 * For resolving GF library modules and their exported definitions
 * 
 * @author John J. Camilleri
 *
 */
public class GFLibraryAgent {
	
	private String getHeaderPath(Resource context, String moduleName) {
		String ctx = context.getURI().lastSegment();
		if (ctx.endsWith(".gfh")) {
			// Go a level up
			ctx = ctx.substring(0, ctx.length()-1);
		}
		return GFBuilder.BUILD_FOLDER
				+ java.io.File.separator
				+ ctx
				+ java.io.File.separator
				+ moduleName + ".gfh";
	}
	
	/**
	 * Check if a module exists
	 * 
	 * @param context
	 * @param moduleName
	 * @return
	 */
	public URI getModuleURI(Resource context, String moduleName) {
		URI uri = URI.createURI( getHeaderPath(context, moduleName) ); // Create it as relative
		if (EcoreUtil2.isValidUri(context, uri)) {
			return uri.resolve(context.getURI()); // return it as absolute
		} else {
			return null;
		}
	}
	
	
	public Resource getModuleResource(Resource context, String moduleName) {
		URI uri = getModuleURI(context, moduleName);
		try {
			return EcoreUtil2.getResource(context, uri.toString() );
		} catch (NullPointerException e) {
			return null;
		}
	}
	
	/**
	 * Check if a module exists
	 * 
	 * @param context
	 * @param moduleName
	 * @return
	 */
	public boolean moduleExists(Resource context, String moduleName) {
		return (getModuleURI(context, moduleName) != null);
	}
}
