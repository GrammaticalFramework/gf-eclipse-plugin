package org.grammaticalframework.eclipse.scoping;

import java.net.MalformedURLException;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.EcoreUtil2;
import org.grammaticalframework.eclipse.builder.GFBuilder;

/**
 * For resolving GF library modules and their exported definitions
 * 
 * @author John J. Camilleri
 *
 */
public class GFLibraryAgent {
	
	private String getHeaderPath(String moduleName, boolean includeLeadingSlash) {
		if (includeLeadingSlash)
			return java.io.File.separator + java.io.File.separator + GFBuilder.BUILD_FOLDER + java.io.File.separator + moduleName + ".gfh";
		else
			return GFBuilder.BUILD_FOLDER + java.io.File.separator + moduleName + ".gfh";
	}
	
	/**
	 * Check if a module exists
	 * 
	 * @param context
	 * @param moduleName
	 * @return
	 */
	public URI getModuleURI(Resource context, String moduleName) {
		URI uri = URI.createURI( getHeaderPath(moduleName, false) ); // Create it as relative
		if (EcoreUtil2.isValidUri(context, uri)) {
			return uri.resolve(context.getURI()); // return it as absolute
		} else {
			return null;
		}
	}
	
	
	public Resource getModuleResource(Resource context, String moduleName) {
		URI uri = getModuleURI(context, moduleName);
		// If r is null then soemthing is wrong! :(
		Resource r = EcoreUtil2.getResource(context, uri.toString() );
		return r;
	}
	
	/**
	 * Check if a module exists
	 * 
	 * @param context
	 * @param moduleName
	 * @return
	 */
	public boolean moduleExists(Resource context, String moduleName) {
		return (getModuleURI(context, moduleName) != null);
	}
}
