/**
 * GF Eclipse Plugin
 * http://www.grammaticalframework.org/eclipse/
 * John J. Camilleri, 2012
 * 
 * The research leading to these results has received funding from the
 * European Union's Seventh Framework Programme (FP7/2007-2013) under
 * grant agreement no. FP7-ICT-247914.
 */
package org.grammaticalframework.eclipse.ui.views;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.jface.viewers.ITreeContentProvider;
import org.eclipse.jface.viewers.Viewer;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScope;
import org.grammaticalframework.eclipse.gF.GFPackage;
import org.grammaticalframework.eclipse.scoping.TagEntry;

import com.google.inject.Inject;

public class GFScopeContentProvider implements ITreeContentProvider {
	
	class ModuleItem {
		private String name;

		public ModuleItem(String name) {
			super();
			this.name = name;
		}

		public String getName() {
			return name;
		}
		
		/* Code below auto-generated by Eclipse */

		@Override
		public int hashCode() {
			final int prime = 31;
			int result = 1;
			result = prime * result + getOuterType().hashCode();
			result = prime * result + ((name == null) ? 0 : name.hashCode());
			return result;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			ModuleItem other = (ModuleItem) obj;
			if (!getOuterType().equals(other.getOuterType()))
				return false;
			if (name == null) {
				if (other.name != null)
					return false;
			} else if (!name.equals(other.name))
				return false;
			return true;
		}

		private GFScopeContentProvider getOuterType() {
			return GFScopeContentProvider.this;
		}

	}
	
	@Inject
	IGlobalScopeProvider scopeProvider;
	
	private Map<ModuleItem, List<IEObjectDescription>> tagMap;

	public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
		tagMap = new HashMap<ModuleItem, List<IEObjectDescription>>();
		
		if (newInput == null)
			return;
		
		// Get scope
		Resource resource = (Resource)newInput;
		IScope scope = scopeProvider.getScope(resource, GFPackage.Literals.EXP__IDENT, null);
		Iterable<IEObjectDescription> items = scope.getAllElements();
		
		// Organise into modules
		for (IEObjectDescription ieObjectDescription : items) {
			ModuleItem module = new ModuleItem(ieObjectDescription.getUserData(TagEntry.USER_DATA_KEY_MODULENAME));
			if (!tagMap.containsKey(module)) {
				tagMap.put(module, new ArrayList<IEObjectDescription>());
			}
			
			// Ignore certain stuff
			String type = ieObjectDescription.getUserData(TagEntry.USER_DATA_KEY_TYPE);
			if (type.equals("oper-def"))
				continue;
				
			tagMap.get(module).add(ieObjectDescription);
		}
		
	}

	/**
	 * Get list module names in the scope
	 */
	public Object[] getElements(Object inputElement) {
		return tagMap.keySet().toArray();
	}

	/**
	 * Get the children of any module in the scope
	 */
	public Object[] getChildren(Object parentElement) {
		if (parentElement instanceof ModuleItem) {
			List<IEObjectDescription> items = tagMap.get(parentElement);
			return items.toArray();
		} else {
			return null;
		}
	}

	public Object getParent(Object element) {
		// We don't really need this
		return null;
	}

	public boolean hasChildren(Object element) {
		return (element instanceof ModuleItem);
	}

	public void dispose() {
		tagMap = null;
	}
	
}
