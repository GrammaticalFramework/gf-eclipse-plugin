concrete CatGer of Cat = CommonX - [Tense,Temp] ** open (ResGer = ResGer),(Prelude = Prelude) in {
  flags
    coding = "latin1" ;
  lincat A = {s : ParamX.Degree => ResGer.AForm => Str} ;
  lincat A2 = {s : ParamX.Degree => ResGer.AForm => Str;
               c2 : {s : Str; c : ResGer.PCase}} ;
  lincat AP = {s : ResGer.AForm => Str; isPre : Prelude.Bool} ;
  -- ind AdA = CommonX ;
  -- ind AdN = CommonX ;
  -- ind AdV = CommonX ;
  -- ind Adv = CommonX ;
  -- ind Ant = CommonX ;
  -- ind CAdv = CommonX ;
  lincat CN = {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
               g : ResGer.Gender} ;
  lincat Card = {s : ResGer.Gender => ResGer.Case => Str;
                 n : ParamX.Number} ;
  lincat Cl = {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str} ;
  lincat ClSlash = {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                    c2 : {s : Str; c : ResGer.PCase}} ;
  lincat Comp = {s : ResGer.Agr => Str} ;
  lincat Conj = {n : ParamX.Number; s1 : Str; s2 : Str} ;
  lincat Det = {s : ResGer.Gender => ResGer.PCase => Str;
                a : ResGer.Adjf; n : ParamX.Number;
                sp : ResGer.Gender => ResGer.PCase => Str} ;
  lincat Digits = {s : ResGer.CardOrd => Str; n : ParamX.Number} ;
  -- ind IAdv = CommonX ;
  lincat IComp = {s : ResGer.Agr => Str} ;
  lincat IDet = {s : ResGer.Gender => ResGer.Case => Str;
                 n : ParamX.Number} ;
  lincat IP = {s : ResGer.Case => Str; n : ParamX.Number} ;
  lincat IQuant = {s : ParamX.Number => ResGer.Gender => ResGer.Case => Str} ;
  lincat Imp = {s : ParamX.Polarity => ParamX.ImpForm => Str} ;
  -- ind Interj = CommonX ;
  lincat N = {s : ParamX.Number => ResGer.Case => Str;
              g : ResGer.Gender} ;
  lincat N2 = {s : ParamX.Number => ResGer.Case => Str;
               c2 : {s : Str; c : ResGer.PCase}; g : ResGer.Gender} ;
  lincat N3 = {s : ParamX.Number => ResGer.Case => Str;
               c2 : {s : Str; c : ResGer.PCase}; c3 : {s : Str; c : ResGer.PCase};
               g : ResGer.Gender} ;
  lincat NP = {s : ResGer.PCase => Str; a : ResGer.Agr;
               isPron : Prelude.Bool} ;
  lincat Num = {s : ResGer.Gender => ResGer.Case => Str;
                isNum : Prelude.Bool; n : ParamX.Number} ;
  lincat Numeral = {s : ResGer.CardOrd => Str; n : ParamX.Number} ;
  lincat Ord = {s : ResGer.AForm => Str} ;
  -- ind PConj = CommonX ;
  lincat PN = {s : ResGer.Case => Str} ;
  -- ind Phr = CommonX ;
  -- ind Pol = CommonX ;
  lincat Predet = {s : ParamX.Number => ResGer.Gender => ResGer.PCase => Str;
                   a : ResGer.PredetAgr; c : {k : ResGer.PredetCase; p : Str}} ;
  lincat Prep = {s : Str; c : ResGer.PCase} ;
  lincat Pron = {s : ResGer.NPForm => Str; a : ResGer.Agr} ;
  lincat QCl = {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ParamX.QForm => Str} ;
  lincat QS = {s : ParamX.QForm => Str} ;
  lincat Quant = {s : Prelude.Bool => ParamX.Number => ResGer.Gender => ResGer.PCase => Str;
                  a : ResGer.Adjf;
                  sp : ParamX.Number => ResGer.Gender => ResGer.PCase => Str} ;
  lincat RCl = {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.GenNum => Str;
                c : ResGer.Case} ;
  lincat RP = {s : ResGer.GenNum => ResGer.Case => Str;
               a : ResGer.RAgr} ;
  lincat RS = {s : ResGer.GenNum => Str; c : ResGer.Case} ;
  lincat S = {s : ResGer.Order => Str} ;
  -- ind SC = CommonX ;
  lincat SSlash = {s : ResGer.Order => Str;
                   c2 : {s : Str; c : ResGer.PCase}} ;
  lincat Subj = {s : Str} ;
  lincat Temp = {s : Str; a : ParamX.Anteriority; m : ResGer.Mood;
                 t : ParamX.Tense} ;
  lincat Tense = {s : Str; m : ResGer.Mood; t : ParamX.Tense} ;
  -- ind Text = CommonX ;
  -- ind Utt = CommonX ;
  lincat V = {s : ResGer.VForm => Str; aux : ResGer.VAux;
              prefix : Str; vtype : ResGer.VType} ;
  lincat V2 = {s : ResGer.VForm => Str; aux : ResGer.VAux;
               c2 : {s : Str; c : ResGer.PCase}; prefix : Str;
               vtype : ResGer.VType} ;
  lincat V2A = {s : ResGer.VForm => Str; aux : ResGer.VAux;
                c2 : {s : Str; c : ResGer.PCase}; prefix : Str;
                vtype : ResGer.VType} ;
  lincat V2Q = {s : ResGer.VForm => Str; aux : ResGer.VAux;
                c2 : {s : Str; c : ResGer.PCase}; prefix : Str;
                vtype : ResGer.VType} ;
  lincat V2S = {s : ResGer.VForm => Str; aux : ResGer.VAux;
                c2 : {s : Str; c : ResGer.PCase}; prefix : Str;
                vtype : ResGer.VType} ;
  lincat V2V = {s : ResGer.VForm => Str; aux : ResGer.VAux;
                c2 : {s : Str; c : ResGer.PCase}; isAux : Prelude.Bool;
                prefix : Str; vtype : ResGer.VType} ;
  lincat V3 = {s : ResGer.VForm => Str; aux : ResGer.VAux;
               c2 : {s : Str; c : ResGer.PCase}; c3 : {s : Str; c : ResGer.PCase};
               prefix : Str; vtype : ResGer.VType} ;
  lincat VA = {s : ResGer.VForm => Str; aux : ResGer.VAux;
               prefix : Str; vtype : ResGer.VType} ;
  lincat VP = {s : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                    prefix : Str; vtype : ResGer.VType};
               a1 : ParamX.Polarity => Str; a2 : Str; ext : Str; inf : Str;
               isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
               n2 : ResGer.Agr => Str} ;
  lincat VPSlash = {s : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                         prefix : Str; vtype : ResGer.VType};
                    a1 : ParamX.Polarity => Str; a2 : Str;
                    c2 : {s : Str; c : ResGer.PCase}; ext : Str; inf : Str;
                    isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                    n2 : ResGer.Agr => Str} ;
  lincat VQ = {s : ResGer.VForm => Str; aux : ResGer.VAux;
               prefix : Str; vtype : ResGer.VType} ;
  lincat VS = {s : ResGer.VForm => Str; aux : ResGer.VAux;
               prefix : Str; vtype : ResGer.VType} ;
  lincat VV = {s : ResGer.VForm => Str; aux : ResGer.VAux;
               isAux : Prelude.Bool; prefix : Str; vtype : ResGer.VType} ;
  -- ind Voc = CommonX ;
}