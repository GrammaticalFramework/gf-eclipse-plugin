resource ResGer = ParamX ** open (Prelude = Prelude) in {
  flags
    coding = "latin1" ;
  param AForm = APred | AMod ResGer.GenNum ResGer.Case ;
  oper Adjective : Type ;
  param Adjf = Strong | Weak ;
  param Agr = Ag ResGer.Gender ParamX.Number ParamX.Person ;
  -- ind Anteriority = canonical ParamX ;
  param CPrep = CAnDat | CInAcc | CInDat | CZuDat ;
  param CardOrd = NCard ResGer.Gender ResGer.Case |
                  NOrd ResGer.AForm ;
  param Case = Nom | Acc | Dat | Gen ;
  oper Clause : Type ;
  -- ind Compar = canonical ParamX ;
  param DForm = DUnit | DTeen | DTen ;
  -- ind DTail = canonical ParamX ;
  -- ind Degree = canonical ParamX ;
  param GenNum = GSg ResGer.Gender | GPl ;
  param Gender = Masc | Fem | Neutr ;
  -- ind ImpF = canonical ParamX ;
  -- ind ImpForm = canonical ParamX ;
  param Mood = MIndic | MConjunct ;
  param NPForm = NPCase ResGer.Case |
                 NPPoss ResGer.GenNum ResGer.Case ;
  oper NPNom : ResGer.PCase ;
  -- ind Neg = canonical ParamX ;
  oper Noun : Type ;
  -- ind Number = canonical ParamX ;
  param Order = Main | Inv | Sub ;
  -- ind P1 = canonical ParamX ;
  -- ind P2 = canonical ParamX ;
  -- ind P3 = canonical ParamX ;
  param PCase = NPC ResGer.Case | NPP ResGer.CPrep ;
  -- ind Person = canonical ParamX ;
  -- ind Pl = canonical ParamX ;
  -- ind Polarity = canonical ParamX ;
  -- ind Pos = canonical ParamX ;
  -- ind Posit = canonical ParamX ;
  param PredetAgr = PAg ParamX.Number | PAgNone ;
  param PredetCase = NoCase | PredCase ResGer.PCase ;
  oper Preposition : Type ;
  -- ind Pres = canonical ParamX ;
  -- ind QDir = canonical ParamX ;
  -- ind QForm = canonical ParamX ;
  -- ind QIndir = canonical ParamX ;
  param RAgr = RNoAg | RAg ParamX.Number ParamX.Person ;
  -- ind Sg = canonical ParamX ;
  -- ind Simul = canonical ParamX ;
  -- ind Superl = canonical ParamX ;
  -- ind T1 = canonical ParamX ;
  -- ind T2 = canonical ParamX ;
  -- ind T3 = canonical ParamX ;
  -- ind Tense = canonical ParamX ;
  param VAux = VHaben | VSein ;
  param VForm = VInf Prelude.Bool | VFin Prelude.Bool ResGer.VFormFin
                | VImper ParamX.Number | VPresPart ResGer.AForm |
                VPastPart ResGer.AForm ;
  param VFormFin = VPresInd ParamX.Number ParamX.Person |
                   VPresSubj ParamX.Number ParamX.Person ;
  oper VP : Type ;
  oper VPC : Type ;
  param VPForm = VPFinite ResGer.Mood ParamX.Tense ParamX.Anteriority
                 | VPImperat Prelude.Bool | VPInfinit ParamX.Anteriority ;
  param VType = VAct | VRefl ResGer.Case ;
  oper Verb : Type ;
  oper adjForms : (x1 : Str) -> (x2 : Str) -> ResGer.AForm => Str ;
  oper adjfCase : ResGer.Adjf -> ResGer.Case -> ResGer.Adjf ;
  oper agrAdj : ResGer.Gender -> ResGer.Adjf -> ParamX.Number -> ResGer.Case -> ResGer.AForm ;
  oper agrP3 : ParamX.Number -> ResGer.Agr ;
  oper agrgP3 : ResGer.Gender -> ParamX.Number -> ResGer.Agr ;
  oper appAdj : {s : ParamX.Degree => ResGer.AForm => Str} -> ParamX.Number => ResGer.Gender => ResGer.PCase => Str ;
  oper appPrep : {s : Str;
                  c : ResGer.PCase} -> (ResGer.PCase => Str) -> Str ;
  oper artDef : ResGer.GenNum => ResGer.Case => Str ;
  oper artDefContr : ResGer.GenNum -> ResGer.PCase -> Str ;
  oper auxPerfect : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                     prefix : Str; vtype : ResGer.VType} -> ResGer.VForm => Str ;
  oper auxVV : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                prefix : Str; vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                                        aux : ResGer.VAux; isAux : Prelude.Bool;
                                                        prefix : Str; vtype : ResGer.VType} ;
  oper caselist : (x1 : Str) -> Str -> Str -> (x4 : Str) -> ResGer.Case => Str ;
  oper conjAgr : ResGer.Agr -> ResGer.Agr -> ResGer.Agr ;
  -- ind conjNumber = ParamX ;
  -- ind conjPerson = ParamX ;
  oper conjThan : Str ;
  oper conjThat : Str ;
  oper genderAgr : ResGer.Agr -> ResGer.Gender ;
  oper gennum : ResGer.Gender -> ParamX.Number -> ResGer.GenNum ;
  oper haben_V : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                  prefix : Str; vtype : ResGer.VType} ;
  oper heavyNP : {s : ResGer.PCase => Str;
                  a : ResGer.Agr} -> {s : ResGer.PCase => Str; a : ResGer.Agr;
                                      isPron : Prelude.Bool} ;
  oper infPart : Prelude.Bool -> Str ;
  oper infVP : Prelude.Bool -> {s : {s : ResGer.VForm => Str;
                                     aux : ResGer.VAux; prefix : Str; vtype : ResGer.VType};
                                a1 : ParamX.Polarity => Str; a2 : Str; ext : Str; inf : Str;
                                isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                                n2 : ResGer.Agr => Str} -> {p1 : ResGer.Agr => Str; p2 : Str;
                                                            p3 : Str} ;
  oper insertAdV : Str -> {s : {s : ResGer.VForm => Str;
                                aux : ResGer.VAux; prefix : Str; vtype : ResGer.VType};
                           a1 : ParamX.Polarity => Str; a2 : Str; ext : Str; inf : Str;
                           isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                           n2 : ResGer.Agr => Str} -> {s : {s : ResGer.VForm => Str;
                                                            aux : ResGer.VAux; prefix : Str;
                                                            vtype : ResGer.VType};
                                                       a1 : ParamX.Polarity => Str; a2 : Str;
                                                       ext : Str; inf : Str; isAux : Prelude.Bool;
                                                       n0 : ResGer.Agr => Str;
                                                       n2 : ResGer.Agr => Str} ;
  oper insertAdv : Str -> {s : {s : ResGer.VForm => Str;
                                aux : ResGer.VAux; prefix : Str; vtype : ResGer.VType};
                           a1 : ParamX.Polarity => Str; a2 : Str; ext : Str; inf : Str;
                           isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                           n2 : ResGer.Agr => Str} -> {s : {s : ResGer.VForm => Str;
                                                            aux : ResGer.VAux; prefix : Str;
                                                            vtype : ResGer.VType};
                                                       a1 : ParamX.Polarity => Str; a2 : Str;
                                                       ext : Str; inf : Str; isAux : Prelude.Bool;
                                                       n0 : ResGer.Agr => Str;
                                                       n2 : ResGer.Agr => Str} ;
  oper insertExtrapos : Str -> {s : {s : ResGer.VForm => Str;
                                     aux : ResGer.VAux; prefix : Str; vtype : ResGer.VType};
                                a1 : ParamX.Polarity => Str; a2 : Str; ext : Str; inf : Str;
                                isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                                n2 : ResGer.Agr => Str} -> {s : {s : ResGer.VForm => Str;
                                                                 aux : ResGer.VAux; prefix : Str;
                                                                 vtype : ResGer.VType};
                                                            a1 : ParamX.Polarity => Str; a2 : Str;
                                                            ext : Str; inf : Str;
                                                            isAux : Prelude.Bool;
                                                            n0 : ResGer.Agr => Str;
                                                            n2 : ResGer.Agr => Str} ;
  oper insertInf : Str -> {s : {s : ResGer.VForm => Str;
                                aux : ResGer.VAux; prefix : Str; vtype : ResGer.VType};
                           a1 : ParamX.Polarity => Str; a2 : Str; ext : Str; inf : Str;
                           isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                           n2 : ResGer.Agr => Str} -> {s : {s : ResGer.VForm => Str;
                                                            aux : ResGer.VAux; prefix : Str;
                                                            vtype : ResGer.VType};
                                                       a1 : ParamX.Polarity => Str; a2 : Str;
                                                       ext : Str; inf : Str; isAux : Prelude.Bool;
                                                       n0 : ResGer.Agr => Str;
                                                       n2 : ResGer.Agr => Str} ;
  oper insertObj : (ResGer.Agr => Str) -> {s : {s : ResGer.VForm => Str;
                                                aux : ResGer.VAux; prefix : Str;
                                                vtype : ResGer.VType};
                                           a1 : ParamX.Polarity => Str; a2 : Str; ext : Str;
                                           inf : Str; isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                                           n2 : ResGer.Agr => Str} -> {s : {s : ResGer.VForm => Str;
                                                                            aux : ResGer.VAux;
                                                                            prefix : Str;
                                                                            vtype : ResGer.VType};
                                                                       a1 : ParamX.Polarity => Str;
                                                                       a2 : Str; ext : Str;
                                                                       inf : Str;
                                                                       isAux : Prelude.Bool;
                                                                       n0 : ResGer.Agr => Str;
                                                                       n2 : ResGer.Agr => Str} ;
  oper insertObjNP : Prelude.Bool -> (ResGer.Agr => Str) -> {s : {s : ResGer.VForm => Str;
                                                                  aux : ResGer.VAux; prefix : Str;
                                                                  vtype : ResGer.VType};
                                                             a1 : ParamX.Polarity => Str; a2 : Str;
                                                             ext : Str; inf : Str;
                                                             isAux : Prelude.Bool;
                                                             n0 : ResGer.Agr => Str;
                                                             n2 : ResGer.Agr => Str} -> {s : {s : ResGer.VForm => Str;
                                                                                              aux : ResGer.VAux;
                                                                                              prefix : Str;
                                                                                              vtype : ResGer.VType};
                                                                                         a1 : ParamX.Polarity => Str;
                                                                                         a2 : Str;
                                                                                         ext : Str;
                                                                                         inf : Str;
                                                                                         isAux : Prelude.Bool;
                                                                                         n0 : ResGer.Agr => Str;
                                                                                         n2 : ResGer.Agr => Str} ;
  oper mkA : (x1 : Str) -> Str -> Str -> (x4 : Str) -> {s : ParamX.Degree => ResGer.AForm => Str} ;
  oper mkAgr : {g : ResGer.Gender; n : ParamX.Number;
                p : ParamX.Person} -> ResGer.Agr ;
  oper mkClause : Str -> ResGer.Agr -> {s : {s : ResGer.VForm => Str;
                                             aux : ResGer.VAux; prefix : Str; vtype : ResGer.VType};
                                        a1 : ParamX.Polarity => Str; a2 : Str; ext : Str; inf : Str;
                                        isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                                        n2 : ResGer.Agr => Str} -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str} ;
  oper mkN : (x1 : Str) -> Str -> Str -> Str -> Str -> (x6 : Str) -> ResGer.Gender -> {s : ParamX.Number => ResGer.Case => Str;
                                                                                       g : ResGer.Gender} ;
  oper mkN4 : (x1 : Str) -> Str -> Str -> (x4 : Str) -> ResGer.Gender -> {s : ParamX.Number => ResGer.Case => Str;
                                                                          g : ResGer.Gender} ;
  oper mkPronPers : (x1 : Str) -> Str -> Str -> Str -> (x5 : Str) -> ResGer.Gender -> ParamX.Number -> ParamX.Person -> {s : ResGer.NPForm => Str;
                                                                                                                         a : ResGer.Agr} ;
  oper mkV : (x1 : Str) -> Str -> Str -> Str -> Str -> Str -> Str -> Str -> Str -> Str -> Str -> (x12 : Str) -> Str -> ResGer.VAux -> {s : ResGer.VForm => Str;
                                                                                                                                       aux : ResGer.VAux;
                                                                                                                                       prefix : Str;
                                                                                                                                       vtype : ResGer.VType} ;
  oper negation : ParamX.Polarity => Str ;
  oper noCase : {k : ResGer.PredetCase; p : Str} ;
  oper noPreposition : ResGer.Case -> {s : Str; c : ResGer.PCase} ;
  oper numGenNum : ResGer.GenNum -> ParamX.Number ;
  -- ind numImp = ParamX ;
  oper numberAgr : ResGer.Agr -> ParamX.Number ;
  oper personAgr : ResGer.Agr -> ParamX.Person ;
  -- ind polCases = ParamX ;
  oper predV : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                prefix : Str;
                vtype : ResGer.VType} -> {s : {s : ResGer.VForm => Str;
                                               aux : ResGer.VAux; prefix : Str;
                                               vtype : ResGer.VType};
                                          a1 : ParamX.Polarity => Str; a2 : Str; ext : Str;
                                          inf : Str; isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                                          n2 : ResGer.Agr => Str} ;
  oper predVGen : Prelude.Bool -> {s : ResGer.VForm => Str;
                                   aux : ResGer.VAux; prefix : Str;
                                   vtype : ResGer.VType} -> {s : {s : ResGer.VForm => Str;
                                                                  aux : ResGer.VAux; prefix : Str;
                                                                  vtype : ResGer.VType};
                                                             a1 : ParamX.Polarity => Str; a2 : Str;
                                                             ext : Str; inf : Str;
                                                             isAux : Prelude.Bool;
                                                             n0 : ResGer.Agr => Str;
                                                             n2 : ResGer.Agr => Str} ;
  oper prefixV : Str -> {s : ResGer.VForm => Str; aux : ResGer.VAux;
                         prefix : Str; vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                                                 aux : ResGer.VAux; prefix : Str;
                                                                 vtype : ResGer.VType} ;
  oper prepC : ResGer.PCase -> {s : Str; c : ResGer.Case} ;
  oper pronEnding : ResGer.GenNum => ResGer.Case => Str ;
  oper reflPron : ResGer.Agr => ResGer.Case => Str ;
  oper regA : Str -> {s : ParamX.Degree => ResGer.AForm => Str} ;
  oper regV : Str -> {s : ResGer.VForm => Str; aux : ResGer.VAux;
                      prefix : Str; vtype : ResGer.VType} ;
  oper sein_V : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                 prefix : Str; vtype : ResGer.VType} ;
  oper useInfVP : Prelude.Bool -> {s : {s : ResGer.VForm => Str;
                                        aux : ResGer.VAux; prefix : Str; vtype : ResGer.VType};
                                   a1 : ParamX.Polarity => Str; a2 : Str; ext : Str; inf : Str;
                                   isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                                   n2 : ResGer.Agr => Str} -> Str ;
  oper usePrepC : ResGer.PCase -> (ResGer.Case -> Str) -> Str ;
  oper useVP : {s : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                     prefix : Str; vtype : ResGer.VType};
                a1 : ParamX.Polarity => Str; a2 : Str; ext : Str; inf : Str;
                isAux : Prelude.Bool; n0 : ResGer.Agr => Str;
                n2 : ResGer.Agr => Str} -> {s : Prelude.Bool => ResGer.Agr => ResGer.VPForm => {fin : Str;
                                                                                                inf : Str}} ;
  oper vFin : Prelude.Bool -> ResGer.Mood -> ParamX.Tense -> ResGer.Agr -> ResGer.VForm ;
  oper werdenPass : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                     prefix : Str; vtype : ResGer.VType} ;
  oper werden_V : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                   prefix : Str; vtype : ResGer.VType} ;
}