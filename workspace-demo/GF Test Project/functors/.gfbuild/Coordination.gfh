resource Coordination = open (Prelude = Prelude) in {
  flags
    coding = "latin1" ;
  oper Conjunction : Type ;
  oper ConjunctionDistr : Type ;
  param ListSize = TwoElem | ManyElem ;
  oper ListTable : Type -> Type ;
  oper ListTable2 : Type -> Type -> Type ;
  oper ListTable3 : Type -> Type -> Type -> Type ;
  oper ListTable4 : Type -> Type -> Type -> Type -> Type ;
  oper ListX : Type ;
  oper comma : Str ;
  oper conjunctDistrSS : {s1 : Str; s2 : Str} -> {s1 : Str;
                                                  s2 : Str} -> {s : Str} ;
  oper conjunctDistrTable : (P : Type) -> {s1 : Str;
                                           s2 : Str} -> {s1 : P => Str;
                                                         s2 : P => Str} -> {s : P => Str} ;
  oper conjunctDistrTable2 : (P : Type) -> (Q : Type) -> {s1 : Str;
                                                          s2 : Str} -> {s1 : P => Q => Str;
                                                                        s2 : P => Q => Str} -> {s : P => Q => Str} ;
  oper conjunctDistrTable3 : (P : Type) -> (Q : Type) -> (R : Type) -> {s1 : Str;
                                                                        s2 : Str} -> {s1 : P => Q => R => Str;
                                                                                      s2 : P => Q => R => Str} -> {s : P => Q => R => Str} ;
  oper conjunctDistrTable4 : (P : Type) -> (Q : Type) -> (R : Type) -> (T : Type) -> {s1 : Str;
                                                                                      s2 : Str} -> {s1 : P => Q => R => T => Str;
                                                                                                    s2 : P => Q => R => T => Str} -> {s : P => Q => R => T => Str} ;
  oper conjunctDistrX : {s1 : Str; s2 : Str} -> {s1 : Str;
                                                 s2 : Str} -> Str ;
  oper conjunctSS : {s : Str} -> {s1 : Str; s2 : Str} -> {s : Str} ;
  oper conjunctTable : (P : Type) -> {s : Str} -> {s1 : P => Str;
                                                   s2 : P => Str} -> {s : P => Str} ;
  oper conjunctTable2 : (P : Type) -> (Q : Type) -> {s : Str} -> {s1 : P => Q => Str;
                                                                  s2 : P => Q => Str} -> {s : P => Q => Str} ;
  oper conjunctTable3 : (P : Type) -> (Q : Type) -> (R : Type) -> {s : Str} -> {s1 : P => Q => R => Str;
                                                                                s2 : P => Q => R => Str} -> {s : P => Q => R => Str} ;
  oper conjunctTable4 : (P : Type) -> (Q : Type) -> (R : Type) -> (T : Type) -> {s : Str} -> {s1 : P => Q => R => T => Str;
                                                                                              s2 : P => Q => R => T => Str} -> {s : P => Q => R => T => Str} ;
  oper conjunctX : {s : Str} -> {s1 : Str; s2 : Str} -> Str ;
  oper consSS : Str -> {s1 : Str;
                        s2 : Str} -> {s : Str} -> {s1 : Str; s2 : Str} ;
  oper consStr : Str -> {s1 : Str; s2 : Str} -> Str -> {s1 : Str;
                                                        s2 : Str} ;
  oper consTable : (P : Type) -> Str -> {s1 : P => Str;
                                         s2 : P => Str} -> {s : P => Str} -> {s1 : P => Str;
                                                                              s2 : P => Str} ;
  oper consTable2 : (P : Type) -> (Q : Type) -> Str -> {s1 : P => Q => Str;
                                                        s2 : P => Q => Str} -> {s : P => Q => Str} -> {s1 : P => Q => Str;
                                                                                                       s2 : P => Q => Str} ;
  oper consTable3 : (P : Type) -> (Q : Type) -> (R : Type) -> Str -> {s1 : P => Q => R => Str;
                                                                      s2 : P => Q => R => Str} -> {s : P => Q => R => Str} -> {s1 : P => Q => R => Str;
                                                                                                                               s2 : P => Q => R => Str} ;
  oper consTable4 : (P : Type) -> (Q : Type) -> (R : Type) -> (T : Type) -> Str -> {s1 : P => Q => R => T => Str;
                                                                                    s2 : P => Q => R => T => Str} -> {s : P => Q => R => T => Str} -> {s1 : P => Q => R => T => Str;
                                                                                                                                                       s2 : P => Q => R => T => Str} ;
  oper consrSS : Str -> {s : Str} -> {s1 : Str;
                                      s2 : Str} -> {s1 : Str; s2 : Str} ;
  oper consrStr : Str -> Str -> {s1 : Str; s2 : Str} -> {s1 : Str;
                                                         s2 : Str} ;
  oper consrTable : (P : Type) -> Str -> {s : P => Str} -> {s1 : P => Str;
                                                            s2 : P => Str} -> {s1 : P => Str;
                                                                               s2 : P => Str} ;
  oper consrTable2 : (P : Type) -> (Q : Type) -> Str -> {s : P => Q => Str} -> {s1 : P => Q => Str;
                                                                                s2 : P => Q => Str} -> {s1 : P => Q => Str;
                                                                                                        s2 : P => Q => Str} ;
  oper consrTable3 : (P : Type) -> (Q : Type) -> (R : Type) -> Str -> {s : P => Q => R => Str} -> {s1 : P => Q => R => Str;
                                                                                                   s2 : P => Q => R => Str} -> {s1 : P => Q => R => Str;
                                                                                                                                s2 : P => Q => R => Str} ;
  oper consrTable4 : (P : Type) -> (Q : Type) -> (R : Type) -> (T : Type) -> Str -> {s : P => Q => R => T => Str} -> {s1 : P => Q => R => T => Str;
                                                                                                                      s2 : P => Q => R => T => Str} -> {s1 : P => Q => R => T => Str;
                                                                                                                                                        s2 : P => Q => R => T => Str} ;
  oper twoSS : {s : Str} -> {s : Str} -> {s1 : Str; s2 : Str} ;
  oper twoStr : (x : Str) -> (y : Str) -> {s1 : Str; s2 : Str} ;
  oper twoTable : (P : Type) -> {s : P => Str} -> {s : P => Str} -> {s1 : P => Str;
                                                                     s2 : P => Str} ;
  oper twoTable2 : (P : Type) -> (Q : Type) -> {s : P => Q => Str} -> {s : P => Q => Str} -> {s1 : P => Q => Str;
                                                                                              s2 : P => Q => Str} ;
  oper twoTable3 : (P : Type) -> (Q : Type) -> (R : Type) -> {s : P => Q => R => Str} -> {s : P => Q => R => Str} -> {s1 : P => Q => R => Str;
                                                                                                                      s2 : P => Q => R => Str} ;
  oper twoTable4 : (P : Type) -> (Q : Type) -> (R : Type) -> (T : Type) -> {s : P => Q => R => T => Str} -> {s : P => Q => R => T => Str} -> {s1 : P => Q => R => T => Str;
                                                                                                                                              s2 : P => Q => R => T => Str} ;
}