resource ParadigmsGer = open (Predef = Predef),(Prelude = Prelude),(MorphoGer = MorphoGer),(CatGer = CatGer) in {
  flags
    coding = "latin1" ;
  oper A2S : Type ;
  oper A2V : Type ;
  oper AS : Type ;
  oper AV : Type ;
  oper Case : Type ;
  oper Gender : Type ;
  oper Number : Type ;
  oper V0 : Type ;
  oper accPrep : {s : Str; c : ResGer.PCase; lock_Prep : {}} ;
  oper accdatV3 : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                   lock_V : {}; prefix : Str;
                   vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                             aux : ResGer.VAux; c2 : {s : Str; c : ResGer.PCase};
                                             c3 : {s : Str; c : ResGer.PCase}; lock_V3 : {};
                                             prefix : Str; vtype : ResGer.VType} ;
  oper accusative : ResGer.PCase ;
  oper anDat_Case : ResGer.PCase ;
  oper anDat_Prep : {s : Str; c : ResGer.PCase; lock_Prep : {}} ;
  oper datPrep : {s : Str; c : ResGer.PCase; lock_Prep : {}} ;
  oper datV2 : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                lock_V : {}; prefix : Str;
                vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                          aux : ResGer.VAux; c2 : {s : Str; c : ResGer.PCase};
                                          lock_V2 : {}; prefix : Str; vtype : ResGer.VType} ;
  oper dative : ResGer.PCase ;
  oper dirV2 : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                lock_V : {}; prefix : Str;
                vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                          aux : ResGer.VAux; c2 : {s : Str; c : ResGer.PCase};
                                          lock_V2 : {}; prefix : Str; vtype : ResGer.VType} ;
  oper dirV3 : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                lock_V : {}; prefix : Str; vtype : ResGer.VType} -> {s : Str;
                                                                     c : ResGer.PCase;
                                                                     lock_Prep : {}} -> {s : ResGer.VForm => Str;
                                                                                         aux : ResGer.VAux;
                                                                                         c2 : {s : Str;
                                                                                               c : ResGer.PCase};
                                                                                         c3 : {s : Str;
                                                                                               c : ResGer.PCase};
                                                                                         lock_V3 : {};
                                                                                         prefix : Str;
                                                                                         vtype : ResGer.VType} ;
  oper feminine : ResGer.Gender ;
  oper fixprefixV : Str -> {s : ResGer.VForm => Str;
                            aux : ResGer.VAux; lock_V : {}; prefix : Str;
                            vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                                      aux : ResGer.VAux; lock_V : {}; prefix : Str;
                                                      vtype : ResGer.VType} ;
  oper genPrep : {s : Str; c : ResGer.PCase; lock_Prep : {}} ;
  oper genitive : ResGer.PCase ;
  oper habenV : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                 lock_V : {}; prefix : Str;
                 vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                           aux : ResGer.VAux; lock_V : {}; prefix : Str;
                                           vtype : ResGer.VType} ;
  oper haben_V : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                  lock_V : {}; prefix : Str; vtype : ResGer.VType} ;
  oper inAcc_Case : ResGer.PCase ;
  oper inAcc_Prep : {s : Str; c : ResGer.PCase; lock_Prep : {}} ;
  oper inDat_Case : ResGer.PCase ;
  oper inDat_Prep : {s : Str; c : ResGer.PCase; lock_Prep : {}} ;
  oper invarA : Str -> {s : ParamX.Degree => ResGer.AForm => Str;
                        lock_A : {}} ;
  oper irregV : (x1 : Str) -> Str -> Str -> Str -> (x5 : Str) -> {s : ResGer.VForm => Str;
                                                                  aux : ResGer.VAux; lock_V : {};
                                                                  prefix : Str;
                                                                  vtype : ResGer.VType} ;
  oper masculine : ResGer.Gender ;
  oper mk2PN : (karolus : Str) -> (karoli : Str) -> {s : ResGer.Case => Str;
                                                     lock_PN : {}} ;
  oper mk3A : (gut : Str) -> (besser : Str) -> (beste : Str) -> {s : ParamX.Degree => ResGer.AForm => Str;
                                                                 lock_A : {}} ;
  oper mk4A : (gut : Str) -> (gute : Str) -> (besser : Str) -> (beste : Str) -> {s : ParamX.Degree => ResGer.AForm => Str;
                                                                                 lock_A : {}} ;
  oper mk6N : (x1 : Str) -> Str -> Str -> Str -> Str -> (x6 : Str) -> ResGer.Gender -> {s : ParamX.Number => ResGer.Case => Str;
                                                                                        g : ResGer.Gender;
                                                                                        lock_N : {}} ;
  oper mk6V : (x1 : Str) -> Str -> Str -> Str -> Str -> (x6 : Str) -> {s : ResGer.VForm => Str;
                                                                       aux : ResGer.VAux;
                                                                       lock_V : {}; prefix : Str;
                                                                       vtype : ResGer.VType} ;
  oper mkA = overload {
               mkA : Str -> {s : ParamX.Degree => ResGer.AForm => Str;
                             lock_A : {}}
                   = 0 ;
               mkA : (gut : Str) -> (besser : Str) -> (beste : Str) -> {s : ParamX.Degree => ResGer.AForm => Str;
                                                                        lock_A : {}}
                   = 0 ;
               mkA : (gut : Str) -> (gute : Str) -> (besser : Str) -> (beste : Str) -> {s : ParamX.Degree => ResGer.AForm => Str;
                                                                                        lock_A : {}}
                   = 0 ;
             } ;
  oper mkA2 : {s : ParamX.Degree => ResGer.AForm => Str;
               lock_A : {}} -> {s : Str; c : ResGer.PCase;
                                lock_Prep : {}} -> {s : ParamX.Degree => ResGer.AForm => Str;
                                                    c2 : {s : Str; c : ResGer.PCase};
                                                    lock_A2 : {}} ;
  oper mkA2S : {s : ParamX.Degree => ResGer.AForm => Str;
                lock_A : {}} -> {s : Str; c : ResGer.PCase;
                                 lock_Prep : {}} -> {s : ParamX.Degree => ResGer.AForm => Str;
                                                     lock_A : {}} ;
  oper mkA2V : {s : ParamX.Degree => ResGer.AForm => Str;
                lock_A : {}} -> {s : Str; c : ResGer.PCase;
                                 lock_Prep : {}} -> {s : ParamX.Degree => ResGer.AForm => Str;
                                                     c2 : {s : Str; c : ResGer.PCase};
                                                     lock_A2 : {}} ;
  oper mkAS : {s : ParamX.Degree => ResGer.AForm => Str;
               lock_A : {}} -> {s : ParamX.Degree => ResGer.AForm => Str;
                                lock_A : {}} ;
  oper mkAV : {s : ParamX.Degree => ResGer.AForm => Str;
               lock_A : {}} -> {s : ParamX.Degree => ResGer.AForm => Str;
                                lock_A : {}} ;
  oper mkAdv : Str -> {s : Str; lock_Adv : {}} ;
  oper mkN = overload {
               mkN : Str -> {s : ParamX.Number => ResGer.Case => Str;
                             g : ResGer.Gender; lock_N : {}}
                   = 0 ;
               mkN : (x1 : Str) -> (x2 : Str) -> ResGer.Gender -> {s : ParamX.Number => ResGer.Case => Str;
                                                                   g : ResGer.Gender; lock_N : {}}
                   = 0 ;
               mkN : (x1 : Str) -> Str -> Str -> Str -> Str -> (x6 : Str) -> ResGer.Gender -> {s : ParamX.Number => ResGer.Case => Str;
                                                                                               g : ResGer.Gender;
                                                                                               lock_N : {}}
                   = 0 ;
             } ;
  oper mkN2 = overload {
                mkN2 : (s : Str) -> {s : ParamX.Number => ResGer.Case => Str;
                                     c2 : {s : Str; c : ResGer.PCase}; g : ResGer.Gender;
                                     lock_N2 : {}}
                     = 0 ;
                mkN2 : {s : ParamX.Number => ResGer.Case => Str; g : ResGer.Gender;
                        lock_N : {}} -> {s : ParamX.Number => ResGer.Case => Str;
                                         c2 : {s : Str; c : ResGer.PCase}; g : ResGer.Gender;
                                         lock_N2 : {}}
                     = 0 ;
                mkN2 : {s : ParamX.Number => ResGer.Case => Str; g : ResGer.Gender;
                        lock_N : {}} -> {s : Str; c : ResGer.PCase;
                                         lock_Prep : {}} -> {s : ParamX.Number => ResGer.Case => Str;
                                                             c2 : {s : Str; c : ResGer.PCase};
                                                             g : ResGer.Gender; lock_N2 : {}}
                     = 0 ;
              } ;
  oper mkN3 : {s : ParamX.Number => ResGer.Case => Str;
               g : ResGer.Gender; lock_N : {}} -> {s : Str; c : ResGer.PCase;
                                                   lock_Prep : {}} -> {s : Str; c : ResGer.PCase;
                                                                       lock_Prep : {}} -> {s : ParamX.Number => ResGer.Case => Str;
                                                                                           c2 : {s : Str;
                                                                                                 c : ResGer.PCase};
                                                                                           c3 : {s : Str;
                                                                                                 c : ResGer.PCase};
                                                                                           g : ResGer.Gender;
                                                                                           lock_N3 : {}} ;
  oper mkPN = overload {
                mkPN : Str -> {s : ResGer.Case => Str; lock_PN : {}}
                     = 0 ;
                mkPN : (nom : Str) -> (gen : Str) -> {s : ResGer.Case => Str;
                                                      lock_PN : {}}
                     = 0 ;
                mkPN : (nom : Str) -> (acc : Str) -> (dat : Str) -> (gen : Str) -> {s : ResGer.Case => Str;
                                                                                    lock_PN : {}}
                     = 0 ;
              } ;
  oper mkPrep : Str -> ResGer.PCase -> {s : Str; c : ResGer.PCase;
                                        lock_Prep : {}} ;
  oper mkV = overload {
               mkV : Str -> {s : ResGer.VForm => Str; aux : ResGer.VAux;
                             lock_V : {}; prefix : Str; vtype : ResGer.VType}
                   = 0 ;
               mkV : (x1 : Str) -> Str -> Str -> Str -> (x5 : Str) -> {s : ResGer.VForm => Str;
                                                                       aux : ResGer.VAux;
                                                                       lock_V : {}; prefix : Str;
                                                                       vtype : ResGer.VType}
                   = 0 ;
               mkV : (x1 : Str) -> Str -> Str -> Str -> Str -> (x6 : Str) -> {s : ResGer.VForm => Str;
                                                                              aux : ResGer.VAux;
                                                                              lock_V : {};
                                                                              prefix : Str;
                                                                              vtype : ResGer.VType}
                   = 0 ;
               mkV : Str -> {s : ResGer.VForm => Str; aux : ResGer.VAux;
                             lock_V : {}; prefix : Str;
                             vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                                       aux : ResGer.VAux; lock_V : {}; prefix : Str;
                                                       vtype : ResGer.VType}
                   = 0 ;
             } ;
  oper mkV0 : {s : ResGer.VForm => Str; aux : ResGer.VAux;
               lock_V : {}; prefix : Str;
               vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                         aux : ResGer.VAux; lock_V : {}; prefix : Str;
                                         vtype : ResGer.VType} ;
  oper mkV2 = overload {
                mkV2 : (s : Str) -> {s : ResGer.VForm => Str; aux : ResGer.VAux;
                                     c2 : {s : Str; c : ResGer.PCase}; lock_V2 : {}; prefix : Str;
                                     vtype : ResGer.VType}
                     = 0 ;
                mkV2 : {s : ResGer.VForm => Str; aux : ResGer.VAux; lock_V : {};
                        prefix : Str; vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                                                aux : ResGer.VAux;
                                                                c2 : {s : Str; c : ResGer.PCase};
                                                                lock_V2 : {}; prefix : Str;
                                                                vtype : ResGer.VType}
                     = 0 ;
                mkV2 : {s : ResGer.VForm => Str; aux : ResGer.VAux; lock_V : {};
                        prefix : Str; vtype : ResGer.VType} -> {s : Str; c : ResGer.PCase;
                                                                lock_Prep : {}} -> {s : ResGer.VForm => Str;
                                                                                    aux : ResGer.VAux;
                                                                                    c2 : {s : Str;
                                                                                          c : ResGer.PCase};
                                                                                    lock_V2 : {};
                                                                                    prefix : Str;
                                                                                    vtype : ResGer.VType}
                     = 0 ;
                mkV2 : (v : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                             lock_V : {}; prefix : Str;
                             vtype : ResGer.VType}) -> (c : ResGer.PCase) -> {s : ResGer.VForm => Str;
                                                                              aux : ResGer.VAux;
                                                                              c2 : {s : Str;
                                                                                    c : ResGer.PCase};
                                                                              lock_V2 : {};
                                                                              prefix : Str;
                                                                              vtype : ResGer.VType}
                     = 0 ;
              } ;
  oper mkV2A : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                lock_V : {}; prefix : Str; vtype : ResGer.VType} -> {s : Str;
                                                                     c : ResGer.PCase;
                                                                     lock_Prep : {}} -> {s : ResGer.VForm => Str;
                                                                                         aux : ResGer.VAux;
                                                                                         c2 : {s : Str;
                                                                                               c : ResGer.PCase};
                                                                                         lock_V2A : {};
                                                                                         prefix : Str;
                                                                                         vtype : ResGer.VType} ;
  oper mkV2Q : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                lock_V : {}; prefix : Str; vtype : ResGer.VType} -> {s : Str;
                                                                     c : ResGer.PCase;
                                                                     lock_Prep : {}} -> {s : ResGer.VForm => Str;
                                                                                         aux : ResGer.VAux;
                                                                                         c2 : {s : Str;
                                                                                               c : ResGer.PCase};
                                                                                         lock_V2Q : {};
                                                                                         prefix : Str;
                                                                                         vtype : ResGer.VType} ;
  oper mkV2S : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                lock_V : {}; prefix : Str; vtype : ResGer.VType} -> {s : Str;
                                                                     c : ResGer.PCase;
                                                                     lock_Prep : {}} -> {s : ResGer.VForm => Str;
                                                                                         aux : ResGer.VAux;
                                                                                         c2 : {s : Str;
                                                                                               c : ResGer.PCase};
                                                                                         lock_V2S : {};
                                                                                         prefix : Str;
                                                                                         vtype : ResGer.VType} ;
  oper mkV2V : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                lock_V : {}; prefix : Str; vtype : ResGer.VType} -> {s : Str;
                                                                     c : ResGer.PCase;
                                                                     lock_Prep : {}} -> {s : ResGer.VForm => Str;
                                                                                         aux : ResGer.VAux;
                                                                                         c2 : {s : Str;
                                                                                               c : ResGer.PCase};
                                                                                         isAux : Prelude.Bool;
                                                                                         lock_V2V : {};
                                                                                         prefix : Str;
                                                                                         vtype : ResGer.VType} ;
  oper mkV3 : {s : ResGer.VForm => Str; aux : ResGer.VAux;
               lock_V : {}; prefix : Str; vtype : ResGer.VType} -> {s : Str;
                                                                    c : ResGer.PCase;
                                                                    lock_Prep : {}} -> {s : Str;
                                                                                        c : ResGer.PCase;
                                                                                        lock_Prep : {}} -> {s : ResGer.VForm => Str;
                                                                                                            aux : ResGer.VAux;
                                                                                                            c2 : {s : Str;
                                                                                                                  c : ResGer.PCase};
                                                                                                            c3 : {s : Str;
                                                                                                                  c : ResGer.PCase};
                                                                                                            lock_V3 : {};
                                                                                                            prefix : Str;
                                                                                                            vtype : ResGer.VType} ;
  oper mkVA : {s : ResGer.VForm => Str; aux : ResGer.VAux;
               lock_V : {}; prefix : Str;
               vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                         aux : ResGer.VAux; lock_VA : {}; prefix : Str;
                                         vtype : ResGer.VType} ;
  oper mkVQ : {s : ResGer.VForm => Str; aux : ResGer.VAux;
               lock_V : {}; prefix : Str;
               vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                         aux : ResGer.VAux; lock_VQ : {}; prefix : Str;
                                         vtype : ResGer.VType} ;
  oper mkVS : {s : ResGer.VForm => Str; aux : ResGer.VAux;
               lock_V : {}; prefix : Str;
               vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                         aux : ResGer.VAux; lock_VS : {}; prefix : Str;
                                         vtype : ResGer.VType} ;
  oper mkVV : {s : ResGer.VForm => Str; aux : ResGer.VAux;
               lock_V : {}; prefix : Str;
               vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                         aux : ResGer.VAux; isAux : Prelude.Bool; lock_VV : {};
                                         prefix : Str; vtype : ResGer.VType} ;
  oper mmkN2 : {s : ParamX.Number => ResGer.Case => Str;
                g : ResGer.Gender; lock_N : {}} -> {s : Str; c : ResGer.PCase;
                                                    lock_Prep : {}} -> {s : ParamX.Number => ResGer.Case => Str;
                                                                        c2 : {s : Str;
                                                                              c : ResGer.PCase};
                                                                        g : ResGer.Gender;
                                                                        lock_N2 : {}} ;
  oper neuter : ResGer.Gender ;
  oper no_geV : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                 lock_V : {}; prefix : Str;
                 vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                           aux : ResGer.VAux; lock_V : {}; prefix : Str;
                                           vtype : ResGer.VType} ;
  oper nominative : ResGer.PCase ;
  oper plural : ParamX.Number ;
  oper prefixV : Str -> {s : ResGer.VForm => Str; aux : ResGer.VAux;
                         lock_V : {}; prefix : Str;
                         vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                                   aux : ResGer.VAux; lock_V : {}; prefix : Str;
                                                   vtype : ResGer.VType} ;
  oper prepV2 : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                 lock_V : {}; prefix : Str; vtype : ResGer.VType} -> {s : Str;
                                                                      c : ResGer.PCase;
                                                                      lock_Prep : {}} -> {s : ResGer.VForm => Str;
                                                                                          aux : ResGer.VAux;
                                                                                          c2 : {s : Str;
                                                                                                c : ResGer.PCase};
                                                                                          lock_V2 : {};
                                                                                          prefix : Str;
                                                                                          vtype : ResGer.VType} ;
  oper reflV : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                lock_V : {}; prefix : Str;
                vtype : ResGer.VType} -> ResGer.PCase -> {s : ResGer.VForm => Str;
                                                          aux : ResGer.VAux; lock_V : {};
                                                          prefix : Str; vtype : ResGer.VType} ;
  oper reg2N : (x1 : Str) -> (x2 : Str) -> ResGer.Gender -> {s : ParamX.Number => ResGer.Case => Str;
                                                             g : ResGer.Gender; lock_N : {}} ;
  oper regA : Str -> {s : ParamX.Degree => ResGer.AForm => Str;
                      lock_A : {}} ;
  oper regN : Str -> {s : ParamX.Number => ResGer.Case => Str;
                      g : ResGer.Gender; lock_N : {}} ;
  oper regPN : (Johann : Str) -> {s : ResGer.Case => Str;
                                  lock_PN : {}} ;
  oper regV : Str -> {s : ResGer.VForm => Str; aux : ResGer.VAux;
                      lock_V : {}; prefix : Str; vtype : ResGer.VType} ;
  oper seinV : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                lock_V : {}; prefix : Str;
                vtype : ResGer.VType} -> {s : ResGer.VForm => Str;
                                          aux : ResGer.VAux; lock_V : {}; prefix : Str;
                                          vtype : ResGer.VType} ;
  oper sein_V : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                 lock_V : {}; prefix : Str; vtype : ResGer.VType} ;
  oper singular : ParamX.Number ;
  oper vonN2 : {s : ParamX.Number => ResGer.Case => Str;
                g : ResGer.Gender;
                lock_N : {}} -> {s : ParamX.Number => ResGer.Case => Str;
                                 c2 : {s : Str; c : ResGer.PCase}; g : ResGer.Gender;
                                 lock_N2 : {}} ;
  oper von_Prep : {s : Str; c : ResGer.PCase; lock_Prep : {}} ;
  oper werden_V : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                   lock_V : {}; prefix : Str; vtype : ResGer.VType} ;
  oper zuDat_Case : ResGer.PCase ;
  oper zu_Prep : {s : Str; c : ResGer.PCase; lock_Prep : {}} ;
}