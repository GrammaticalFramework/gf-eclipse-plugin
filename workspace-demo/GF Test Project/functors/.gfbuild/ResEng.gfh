resource ResEng = ParamX ** open (Prelude = Prelude) in {
  flags
    coding = "latin1" ;
  param AForm = AAdj ParamX.Degree ResEng.Case | AAdv ;
  param Agr = AgP1 ParamX.Number | AgP2 ParamX.Number |
              AgP3Sg ResEng.Gender | AgP3Pl ;
  -- ind Anteriority = canonical ParamX ;
  oper Aux : Type ;
  param CPolarity = CPos | CNeg Prelude.Bool ;
  param CardOrd = NCard | NOrd ;
  param Case = Nom | Gen ;
  oper Clause : Type ;
  -- ind Compar = canonical ParamX ;
  param DForm = unit | teen | ten ;
  -- ind DTail = canonical ParamX ;
  -- ind Degree = canonical ParamX ;
  param Gender = Neutr | Masc | Fem ;
  -- ind ImpF = canonical ParamX ;
  -- ind ImpForm = canonical ParamX ;
  param NPCase = NCase ResEng.Case | NPAcc ;
  -- ind Neg = canonical ParamX ;
  -- ind Number = canonical ParamX ;
  param Order = ODir | OQuest ;
  -- ind P1 = canonical ParamX ;
  -- ind P2 = canonical ParamX ;
  -- ind P3 = canonical ParamX ;
  -- ind Person = canonical ParamX ;
  -- ind Pl = canonical ParamX ;
  -- ind Polarity = canonical ParamX ;
  -- ind Pos = canonical ParamX ;
  -- ind Posit = canonical ParamX ;
  -- ind Pres = canonical ParamX ;
  -- ind QDir = canonical ParamX ;
  -- ind QForm = canonical ParamX ;
  -- ind QIndir = canonical ParamX ;
  param RAgr = RNoAg | RAg ResEng.Agr ;
  param RCase = RPrep ResEng.Gender |
                RC ResEng.Gender ResEng.NPCase ;
  -- ind Sg = canonical ParamX ;
  -- ind Simul = canonical ParamX ;
  oper SlashVP : Type ;
  -- ind Superl = canonical ParamX ;
  -- ind T1 = canonical ParamX ;
  -- ind T2 = canonical ParamX ;
  -- ind T3 = canonical ParamX ;
  -- ind Tense = canonical ParamX ;
  param VForm = VInf | VPres | VPPart | VPresPart ;
  oper VP : Type ;
  param VVForm = VVF ResEng.VForm | VVPresNeg ;
  param VVType = VVAux | VVInf | VVPresPart ;
  oper Verb : Type ;
  oper VerbForms : Type ;
  oper agrP3 : ParamX.Number -> ResEng.Agr ;
  oper agrVerb : Str -> Str -> ResEng.Agr -> Str ;
  oper agrgP3 : ParamX.Number -> ResEng.Gender -> ResEng.Agr ;
  oper artDef : Str ;
  oper artIndef : Str ;
  oper auxBe : {inf : Str; ppart : Str;
                pres : ParamX.Polarity => ResEng.Agr => Str; prpart : Str} ;
  oper conjAgr : ResEng.Agr -> ResEng.Agr -> ResEng.Agr ;
  -- ind conjNumber = ParamX ;
  -- ind conjPerson = ParamX ;
  oper conjThat : Str ;
  oper contrNeg : Prelude.Bool -> ParamX.Polarity -> ResEng.CPolarity ;
  oper does : ResEng.Agr -> Str ;
  oper doesnt : ResEng.Agr -> Str ;
  oper fromAgr : ResEng.Agr -> {g : ResEng.Gender; n : ParamX.Number;
                                p : ParamX.Person} ;
  oper genitiveS : Str -> Str ;
  oper have : ResEng.Agr -> Str ;
  oper havent : ResEng.Agr -> Str ;
  oper infVP : ResEng.VVType -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                              aux : Str;
                                                                                                                              fin : Str;
                                                                                                                              inf : Str};
                                 ad : Str; inf : Str; prp : Str; ptp : Str;
                                 s2 : ResEng.Agr => Str} -> ResEng.Agr -> Str ;
  oper insertAdV : Str -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                        aux : Str;
                                                                                                                        fin : Str;
                                                                                                                        inf : Str};
                           ad : Str; inf : Str; prp : Str; ptp : Str;
                           s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                    aux : Str;
                                                                                                                                                    fin : Str;
                                                                                                                                                    inf : Str};
                                                       ad : Str; inf : Str; prp : Str; ptp : Str;
                                                       s2 : ResEng.Agr => Str} ;
  oper insertObj : (ResEng.Agr => Str) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                        aux : Str;
                                                                                                                                        fin : Str;
                                                                                                                                        inf : Str};
                                           ad : Str; inf : Str; prp : Str; ptp : Str;
                                           s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                    aux : Str;
                                                                                                                                                                    fin : Str;
                                                                                                                                                                    inf : Str};
                                                                       ad : Str; inf : Str;
                                                                       prp : Str; ptp : Str;
                                                                       s2 : ResEng.Agr => Str} ;
  oper insertObjPre : (ResEng.Agr => Str) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                           aux : Str;
                                                                                                                                           fin : Str;
                                                                                                                                           inf : Str};
                                              ad : Str; inf : Str; prp : Str; ptp : Str;
                                              s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                       aux : Str;
                                                                                                                                                                       fin : Str;
                                                                                                                                                                       inf : Str};
                                                                          ad : Str; inf : Str;
                                                                          prp : Str; ptp : Str;
                                                                          s2 : ResEng.Agr => Str} ;
  oper insertObjc : (ResEng.Agr => Str) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                         aux : Str;
                                                                                                                                         fin : Str;
                                                                                                                                         inf : Str};
                                            ad : Str; c2 : Str; inf : Str; prp : Str; ptp : Str;
                                            s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                     aux : Str;
                                                                                                                                                                     fin : Str;
                                                                                                                                                                     inf : Str};
                                                                        ad : Str; c2 : Str;
                                                                        inf : Str; prp : Str;
                                                                        ptp : Str;
                                                                        s2 : ResEng.Agr => Str} ;
  oper mkAdjective : Str -> Str -> Str -> Str -> {s : ResEng.AForm => Str;
                                                  lock_A : {}} ;
  oper mkCard : ResEng.CardOrd -> Str -> ResEng.Case => Str ;
  oper mkClause : Str -> ResEng.Agr -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                     aux : Str;
                                                                                                                                     fin : Str;
                                                                                                                                     inf : Str};
                                        ad : Str; inf : Str; prp : Str; ptp : Str;
                                        s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str} ;
  oper mkIP : (i : Str) -> (me : Str) -> (my : Str) -> ParamX.Number -> {s : ResEng.NPCase => Str;
                                                                         n : ParamX.Number} ;
  oper mkNP : (i : Str) -> (me : Str) -> (my : Str) -> ParamX.Number -> ParamX.Person -> ResEng.Gender -> {s : ResEng.NPCase => Str;
                                                                                                           a : ResEng.Agr} ;
  oper mkNoun : Str -> Str -> Str -> Str -> {s : ParamX.Number => ResEng.Case => Str} ;
  oper mkNum : Str -> Str -> Str -> Str -> {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str} ;
  oper mkQuestion : {s : Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str} ;
  oper mkVerb : Str -> Str -> Str -> Str -> Str -> {s : ResEng.VForm => Str;
                                                    isRefl : Prelude.Bool} ;
  oper npGen : ResEng.NPCase ;
  oper npNom : ResEng.NPCase ;
  oper npcase2case : ResEng.NPCase -> ResEng.Case ;
  -- ind numImp = ParamX ;
  -- ind polCases = ParamX ;
  oper posneg : ParamX.Polarity -> Str -> Str ;
  oper predAux : {inf : Str; ppart : Str;
                  pres : ParamX.Polarity => ResEng.Agr => Str;
                  prpart : Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                 aux : Str;
                                                                                                                                 fin : Str;
                                                                                                                                 inf : Str};
                                    ad : Str; inf : Str; prp : Str; ptp : Str;
                                    s2 : ResEng.Agr => Str} ;
  oper predV : {s : ResEng.VForm => Str;
                isRefl : Prelude.Bool} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                        aux : Str;
                                                                                                                                        fin : Str;
                                                                                                                                        inf : Str};
                                           ad : Str; inf : Str; prp : Str; ptp : Str;
                                           s2 : ResEng.Agr => Str} ;
  oper predVV : {s : ResEng.VVForm => Str;
                 typ : ResEng.VVType} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                       aux : Str;
                                                                                                                                       fin : Str;
                                                                                                                                       inf : Str};
                                          ad : Str; inf : Str; prp : Str; ptp : Str;
                                          s2 : ResEng.Agr => Str} ;
  oper predVc : {s : ResEng.VForm => Str; c2 : Str;
                 isRefl : Prelude.Bool} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                         aux : Str;
                                                                                                                                         fin : Str;
                                                                                                                                         inf : Str};
                                            ad : Str; c2 : Str; inf : Str; prp : Str; ptp : Str;
                                            s2 : ResEng.Agr => Str} ;
  oper presVerb : {s : ResEng.VForm => Str} -> ResEng.Agr -> Str ;
  oper reflPron : ResEng.Agr => Str ;
  oper regCardOrd : Str -> {s : ResEng.CardOrd => ResEng.Case => Str} ;
  oper regGenitiveS : Str -> ResEng.Case => Str ;
  oper regNP : Str -> ParamX.Number -> {s : ResEng.NPCase => Str;
                                        a : ResEng.Agr} ;
  oper regNum : Str -> {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str} ;
  oper regOrd : Str -> Str ;
  oper toAgr : ParamX.Number -> ParamX.Person -> ResEng.Gender -> ResEng.Agr ;
  oper vf : Str -> Str -> {adv : Str; aux : Str; fin : Str;
                           inf : Str} ;
  oper vff : Str -> Str -> {adv : Str; aux : Str; fin : Str;
                            inf : Str} ;
  oper vfn : Prelude.Bool -> Str -> Str -> Str -> {adv : Str;
                                                   aux : Str; fin : Str; inf : Str} ;
}