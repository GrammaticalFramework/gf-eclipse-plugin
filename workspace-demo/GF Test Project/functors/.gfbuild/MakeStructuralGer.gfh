resource MakeStructuralGer = open (CatGer = CatGer),(ParadigmsGer = ParadigmsGer),(MorphoGer = MorphoGer),(Prelude = Prelude) in {
  flags
    coding = "latin1" ;
  oper mkConj : Str -> Str -> ParamX.Number -> {lock_Conj : {};
                                                n : ParamX.Number; s1 : Str; s2 : Str} ;
  oper mkIQuant : Str -> {s : ParamX.Number => ResGer.Gender => ResGer.Case => Str;
                          lock_IQuant : {}} ;
  oper mkPredet = overload {
                    mkPredet : (a : {s : ParamX.Degree => ResGer.AForm => Str;
                                     lock_A : {}}) -> {s : ParamX.Number => ResGer.Gender => ResGer.PCase => Str;
                                                       a : ResGer.PredetAgr;
                                                       c : {k : ResGer.PredetCase; p : Str};
                                                       lock_Predet : {}}
                             = 0 ;
                    mkPredet : (a : {s : ParamX.Degree => ResGer.AForm => Str;
                                     lock_A : {}}) -> (p : Str) -> (c : ResGer.PCase) -> (b : Prelude.Bool) -> (n : ParamX.Number) -> {s : ParamX.Number => ResGer.Gender => ResGer.PCase => Str;
                                                                                                                                       a : ResGer.PredetAgr;
                                                                                                                                       c : {k : ResGer.PredetCase;
                                                                                                                                            p : Str};
                                                                                                                                       lock_Predet : {}}
                             = 0 ;
                  } ;
  oper mkSubj : Str -> {s : Str; lock_Subj : {}} ;
}