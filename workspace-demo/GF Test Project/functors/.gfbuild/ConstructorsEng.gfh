resource ConstructorsEng = open (GrammarEng = GrammarEng),(GrammarEng = GrammarEng),(GrammarEng = GrammarEng) in {
  flags
    coding = "latin1" ;
  oper Art : Type ;
  oper ComplV2 : {s : ResEng.VForm => Str; c2 : Str;
                  isRefl : Prelude.Bool; lock_V2 : {}} -> {s : ResEng.NPCase => Str;
                                                           a : ResEng.Agr;
                                                           lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                          aux : Str;
                                                                                                                                                                          fin : Str;
                                                                                                                                                                          inf : Str};
                                                                             ad : Str; inf : Str;
                                                                             lock_VP : {};
                                                                             prp : Str; ptp : Str;
                                                                             s2 : ResEng.Agr => Str} ;
  oper ComplV2A : {s : ResEng.VForm => Str; c2 : Str;
                   isRefl : Prelude.Bool; lock_V2A : {}} -> {s : ResEng.NPCase => Str;
                                                             a : ResEng.Agr;
                                                             lock_NP : {}} -> {s : ResEng.Agr => Str;
                                                                               isPre : Prelude.Bool;
                                                                               lock_AP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                              aux : Str;
                                                                                                                                                                                              fin : Str;
                                                                                                                                                                                              inf : Str};
                                                                                                 ad : Str;
                                                                                                 inf : Str;
                                                                                                 lock_VP : {};
                                                                                                 prp : Str;
                                                                                                 ptp : Str;
                                                                                                 s2 : ResEng.Agr => Str} ;
  oper ComplV3 : {s : ResEng.VForm => Str; c2 : Str; c3 : Str;
                  isRefl : Prelude.Bool; lock_V3 : {}} -> {s : ResEng.NPCase => Str;
                                                           a : ResEng.Agr;
                                                           lock_NP : {}} -> {s : ResEng.NPCase => Str;
                                                                             a : ResEng.Agr;
                                                                             lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                            aux : Str;
                                                                                                                                                                                            fin : Str;
                                                                                                                                                                                            inf : Str};
                                                                                               ad : Str;
                                                                                               inf : Str;
                                                                                               lock_VP : {};
                                                                                               prp : Str;
                                                                                               ptp : Str;
                                                                                               s2 : ResEng.Agr => Str} ;
  oper DetArtCard : {s : Prelude.Bool => ParamX.Number => Str;
                     lock_Quant : {};
                     sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : ResEng.Case => Str;
                                                                                     lock_Card : {};
                                                                                     n : ParamX.Number} -> {s : Str;
                                                                                                            hasNum : Prelude.Bool;
                                                                                                            lock_Det : {};
                                                                                                            n : ParamX.Number;
                                                                                                            sp : ResEng.NPCase => Str} ;
  oper DetArtOrd : {s : Prelude.Bool => ParamX.Number => Str;
                    lock_Quant : {};
                    sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : ResEng.Case => Str;
                                                                                    hasCard : Prelude.Bool;
                                                                                    lock_Num : {};
                                                                                    n : ParamX.Number} -> {s : ResEng.Case => Str;
                                                                                                           lock_Ord : {}} -> {s : Str;
                                                                                                                              hasNum : Prelude.Bool;
                                                                                                                              lock_Det : {};
                                                                                                                              n : ParamX.Number;
                                                                                                                              sp : ResEng.NPCase => Str} ;
  oper DetArtPl : {s : Prelude.Bool => ParamX.Number => Str;
                   lock_Quant : {};
                   sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                   g : ResEng.Gender;
                                                                                   lock_CN : {}} -> {s : ResEng.NPCase => Str;
                                                                                                     a : ResEng.Agr;
                                                                                                     lock_NP : {}} ;
  oper DetArtSg : {s : Prelude.Bool => ParamX.Number => Str;
                   lock_Quant : {};
                   sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                   g : ResEng.Gender;
                                                                                   lock_CN : {}} -> {s : ResEng.NPCase => Str;
                                                                                                     a : ResEng.Agr;
                                                                                                     lock_NP : {}} ;
  oper DetPl : {s : Prelude.Bool => ParamX.Number => Str;
                lock_Quant : {};
                sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : ResEng.Case => Str;
                                                                                hasCard : Prelude.Bool;
                                                                                lock_Num : {};
                                                                                n : ParamX.Number} -> {s : ResEng.Case => Str;
                                                                                                       lock_Ord : {}} -> {s : Str;
                                                                                                                          hasNum : Prelude.Bool;
                                                                                                                          lock_Det : {};
                                                                                                                          n : ParamX.Number;
                                                                                                                          sp : ResEng.NPCase => Str} ;
  oper DetSg : {s : Prelude.Bool => ParamX.Number => Str;
                lock_Quant : {};
                sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : ResEng.Case => Str;
                                                                                lock_Ord : {}} -> {s : Str;
                                                                                                   hasNum : Prelude.Bool;
                                                                                                   lock_Det : {};
                                                                                                   n : ParamX.Number;
                                                                                                   sp : ResEng.NPCase => Str} ;
  param ImpForm = IFSg | IFPl | IFPol ;
  oper ListAP : Type ;
  oper ListAdv : Type ;
  oper ListNP : Type ;
  oper ListS : Type ;
  oper PlQuant : {s : Prelude.Bool => ParamX.Number => Str;
                  lock_Quant : {};
                  sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : Prelude.Bool => ParamX.Number => Str;
                                                                                  isPl : {};
                                                                                  lock_Quant : {};
                                                                                  sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  param Punct = PFullStop | PExclMark | PQuestMark ;
  oper QuantPl : Type ;
  oper QuantSg : Type ;
  oper SgQuant : {s : Prelude.Bool => ParamX.Number => Str;
                  lock_Quant : {};
                  sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : Prelude.Bool => ParamX.Number => Str;
                                                                                  isSg : {};
                                                                                  lock_Quant : {};
                                                                                  sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper TUseCl : {s : Str; lock_Tense : {};
                 t : ParamX.Tense} -> {s : Str; a : ParamX.Anteriority;
                                       lock_Ant : {}} -> {s : Str; lock_Pol : {};
                                                          p : ResEng.CPolarity} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                    lock_Cl : {}} -> {s : Str;
                                                                                                      lock_S : {}} ;
  oper TUseQCl : {s : Str; lock_Tense : {};
                  t : ParamX.Tense} -> {s : Str; a : ParamX.Anteriority;
                                        lock_Ant : {}} -> {s : Str; lock_Pol : {};
                                                           p : ResEng.CPolarity} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                     lock_QCl : {}} -> {s : ParamX.QForm => Str;
                                                                                                        lock_QS : {}} ;
  oper TUseRCl : {s : Str; lock_Tense : {};
                  t : ParamX.Tense} -> {s : Str; a : ParamX.Anteriority;
                                        lock_Ant : {}} -> {s : Str; lock_Pol : {};
                                                           p : ResEng.CPolarity} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                     c : ResEng.NPCase;
                                                                                     lock_RCl : {}} -> {s : ResEng.Agr => Str;
                                                                                                        c : ResEng.NPCase;
                                                                                                        lock_RS : {}} ;
  oper Unit : Type ;
  oper aPl_Det : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                  n : ParamX.Number; sp : ResEng.NPCase => Str} ;
  oper aSg_Det : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                  n : ParamX.Number; sp : ResEng.NPCase => Str} ;
  oper a_Art : {s : Prelude.Bool => ParamX.Number => Str;
                lock_Quant : {};
                sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper a_Det : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                n : ParamX.Number; sp : ResEng.NPCase => Str} ;
  oper a_Quant : {s : Prelude.Bool => ParamX.Number => Str;
                  lock_Quant : {};
                  sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper comparAP : {s : ResEng.AForm => Str;
                   lock_A : {}} -> {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                    lock_AP : {}} ;
  oper digit : pattern Str ;
  oper emptyText : {s : Str; lock_Text : {}} ;
  oper exclMarkPunct : ConstructorsEng.Punct ;
  oper fullStopPunct : ConstructorsEng.Punct ;
  oper genericCl : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                 aux : Str;
                                                                                                                 fin : Str;
                                                                                                                 inf : Str};
                    ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                    s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                lock_Cl : {}} ;
  oper he_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                lock_NP : {}} ;
  oper i_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
               lock_NP : {}} ;
  oper idigit : pattern Str ;
  oper it_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                lock_NP : {}} ;
  oper lets_Utt : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                aux : Str;
                                                                                                                fin : Str;
                                                                                                                inf : Str};
                   ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                   s2 : ResEng.Agr => Str} -> {s : Str; lock_Utt : {}} ;
  oper mkAP = overload {
                mkAP : {s : ResEng.AForm => Str;
                        lock_A : {}} -> {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                         lock_AP : {}}
                     = 0 ;
                mkAP : {s : ResEng.AForm => Str;
                        lock_A : {}} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                         lock_NP : {}} -> {s : ResEng.Agr => Str;
                                                           isPre : Prelude.Bool; lock_AP : {}}
                     = 0 ;
                mkAP : {s : ResEng.AForm => Str; c2 : Str;
                        lock_A2 : {}} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                          lock_NP : {}} -> {s : ResEng.Agr => Str;
                                                            isPre : Prelude.Bool; lock_AP : {}}
                     = 0 ;
                mkAP : {s : ResEng.AForm => Str; c2 : Str;
                        lock_A2 : {}} -> {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                          lock_AP : {}}
                     = 0 ;
                mkAP : (ap : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                              lock_AP : {}}) -> (s : {s : Str;
                                                      lock_S : {}}) -> {s : ResEng.Agr => Str;
                                                                        isPre : Prelude.Bool;
                                                                        lock_AP : {}}
                     = 0 ;
                mkAP : (ap : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                              lock_AP : {}}) -> (s : {s : ParamX.QForm => Str;
                                                      lock_QS : {}}) -> {s : ResEng.Agr => Str;
                                                                         isPre : Prelude.Bool;
                                                                         lock_AP : {}}
                     = 0 ;
                mkAP : (ap : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                              lock_AP : {}}) -> (s : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                   aux : Str;
                                                                                                                                                   fin : Str;
                                                                                                                                                   inf : Str};
                                                      ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                      ptp : Str;
                                                      s2 : ResEng.Agr => Str}) -> {s : ResEng.Agr => Str;
                                                                                   isPre : Prelude.Bool;
                                                                                   lock_AP : {}}
                     = 0 ;
                mkAP : (ap : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                              lock_AP : {}}) -> (s : {s : Str;
                                                      lock_SC : {}}) -> {s : ResEng.Agr => Str;
                                                                         isPre : Prelude.Bool;
                                                                         lock_AP : {}}
                     = 0 ;
                mkAP : (x : {s : Str;
                             lock_AdA : {}}) -> (y : {s : ResEng.AForm => Str;
                                                      lock_A : {}}) -> {s : ResEng.Agr => Str;
                                                                        isPre : Prelude.Bool;
                                                                        lock_AP : {}}
                     = 0 ;
                mkAP : {s : Str; lock_AdA : {}} -> {s : ResEng.Agr => Str;
                                                    isPre : Prelude.Bool;
                                                    lock_AP : {}} -> {s : ResEng.Agr => Str;
                                                                      isPre : Prelude.Bool;
                                                                      lock_AP : {}}
                     = 0 ;
                mkAP : (c : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                             s2 : Str}) -> (x : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                                 lock_AP : {}}) -> (y : {s : ResEng.Agr => Str;
                                                                         isPre : Prelude.Bool;
                                                                         lock_AP : {}}) -> {s : ResEng.Agr => Str;
                                                                                            isPre : Prelude.Bool;
                                                                                            lock_AP : {}}
                     = 0 ;
                mkAP : (c : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                             s2 : Str}) -> (xy : {isPre : Prelude.Bool; lock_ListAP : {};
                                                  s1 : ResEng.Agr => Str;
                                                  s2 : ResEng.Agr => Str}) -> {s : ResEng.Agr => Str;
                                                                               isPre : Prelude.Bool;
                                                                               lock_AP : {}}
                     = 0 ;
                mkAP : {s : ResEng.Case => Str;
                        lock_Ord : {}} -> {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                           lock_AP : {}}
                     = 0 ;
                mkAP : {s : Str; lock_CAdv : {};
                        p : Str} -> {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                     lock_AP : {}} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                       lock_NP : {}} -> {s : ResEng.Agr => Str;
                                                                         isPre : Prelude.Bool;
                                                                         lock_AP : {}}
                     = 0 ;
              } ;
  oper mkAdN : {s : Str; lock_CAdv : {}; p : Str} -> {s : Str;
                                                      lock_AdN : {}} ;
  oper mkAdv = overload {
                 mkAdv : {s : ResEng.AForm => Str; lock_A : {}} -> {s : Str;
                                                                    lock_Adv : {}}
                       = 0 ;
                 mkAdv : {s : Str; lock_Prep : {}} -> {s : ResEng.NPCase => Str;
                                                       a : ResEng.Agr; lock_NP : {}} -> {s : Str;
                                                                                         lock_Adv : {}}
                       = 0 ;
                 mkAdv : {s : Str; lock_Subj : {}} -> {s : Str;
                                                       lock_S : {}} -> {s : Str; lock_Adv : {}}
                       = 0 ;
                 mkAdv : {s : Str; lock_CAdv : {};
                          p : Str} -> {s : ResEng.AForm => Str;
                                       lock_A : {}} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                        lock_NP : {}} -> {s : Str; lock_Adv : {}}
                       = 0 ;
                 mkAdv : {s : Str; lock_CAdv : {};
                          p : Str} -> {s : ResEng.AForm => Str; lock_A : {}} -> {s : Str;
                                                                                 lock_S : {}} -> {s : Str;
                                                                                                  lock_Adv : {}}
                       = 0 ;
                 mkAdv : {s : Str; lock_AdA : {}} -> {s : Str;
                                                      lock_Adv : {}} -> {s : Str; lock_Adv : {}}
                       = 0 ;
                 mkAdv : (c : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                               s2 : Str}) -> (x : {s : Str; lock_Adv : {}}) -> (y : {s : Str;
                                                                                     lock_Adv : {}}) -> {s : Str;
                                                                                                         lock_Adv : {}}
                       = 0 ;
                 mkAdv : (c : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                               s2 : Str}) -> (xy : {lock_ListAdv : {}; s1 : Str;
                                                    s2 : Str}) -> {s : Str; lock_Adv : {}}
                       = 0 ;
               } ;
  oper mkCN = overload {
                mkCN : {s : ParamX.Number => ResEng.Case => Str; g : ResEng.Gender;
                        lock_N : {}} -> {s : ParamX.Number => ResEng.Case => Str;
                                         g : ResEng.Gender; lock_CN : {}}
                     = 0 ;
                mkCN : {s : ParamX.Number => ResEng.Case => Str; c2 : Str;
                        g : ResEng.Gender; lock_N2 : {}} -> {s : ResEng.NPCase => Str;
                                                             a : ResEng.Agr;
                                                             lock_NP : {}} -> {s : ParamX.Number => ResEng.Case => Str;
                                                                               g : ResEng.Gender;
                                                                               lock_CN : {}}
                     = 0 ;
                mkCN : (f : {s : ParamX.Number => ResEng.Case => Str; c2 : Str;
                             c3 : Str; g : ResEng.Gender;
                             lock_N3 : {}}) -> (x : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                     lock_NP : {}}) -> {s : ResEng.NPCase => Str;
                                                                        a : ResEng.Agr;
                                                                        lock_NP : {}} -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                          g : ResEng.Gender;
                                                                                          lock_CN : {}}
                     = 0 ;
                mkCN : {s : ParamX.Number => ResEng.Case => Str; c2 : Str;
                        g : ResEng.Gender;
                        lock_N2 : {}} -> {s : ParamX.Number => ResEng.Case => Str;
                                          g : ResEng.Gender; lock_CN : {}}
                     = 0 ;
                mkCN : (n : {s : ParamX.Number => ResEng.Case => Str; c2 : Str;
                             c3 : Str; g : ResEng.Gender;
                             lock_N3 : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                g : ResEng.Gender; lock_CN : {}}
                     = 0 ;
                mkCN : (x : {s : ResEng.AForm => Str;
                             lock_A : {}}) -> (y : {s : ParamX.Number => ResEng.Case => Str;
                                                    g : ResEng.Gender;
                                                    lock_N : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                      g : ResEng.Gender;
                                                                      lock_CN : {}}
                     = 0 ;
                mkCN : (x : {s : ResEng.AForm => Str;
                             lock_A : {}}) -> (y : {s : ParamX.Number => ResEng.Case => Str;
                                                    g : ResEng.Gender;
                                                    lock_CN : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                       g : ResEng.Gender;
                                                                       lock_CN : {}}
                     = 0 ;
                mkCN : (x : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                             lock_AP : {}}) -> (y : {s : ParamX.Number => ResEng.Case => Str;
                                                     g : ResEng.Gender;
                                                     lock_N : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                       g : ResEng.Gender;
                                                                       lock_CN : {}}
                     = 0 ;
                mkCN : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                        lock_AP : {}} -> {s : ParamX.Number => ResEng.Case => Str;
                                          g : ResEng.Gender;
                                          lock_CN : {}} -> {s : ParamX.Number => ResEng.Case => Str;
                                                            g : ResEng.Gender; lock_CN : {}}
                     = 0 ;
                mkCN : (x : {s : ParamX.Number => ResEng.Case => Str;
                             g : ResEng.Gender; lock_CN : {}}) -> (y : {s : ResEng.Agr => Str;
                                                                        isPre : Prelude.Bool;
                                                                        lock_AP : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                           g : ResEng.Gender;
                                                                                           lock_CN : {}}
                     = 0 ;
                mkCN : (x : {s : ParamX.Number => ResEng.Case => Str;
                             g : ResEng.Gender; lock_N : {}}) -> (y : {s : ResEng.Agr => Str;
                                                                       isPre : Prelude.Bool;
                                                                       lock_AP : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                          g : ResEng.Gender;
                                                                                          lock_CN : {}}
                     = 0 ;
                mkCN : (x : {s : ParamX.Number => ResEng.Case => Str;
                             g : ResEng.Gender; lock_N : {}}) -> (y : {s : ResEng.Agr => Str;
                                                                       c : ResEng.NPCase;
                                                                       lock_RS : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                          g : ResEng.Gender;
                                                                                          lock_CN : {}}
                     = 0 ;
                mkCN : {s : ParamX.Number => ResEng.Case => Str; g : ResEng.Gender;
                        lock_CN : {}} -> {s : ResEng.Agr => Str; c : ResEng.NPCase;
                                          lock_RS : {}} -> {s : ParamX.Number => ResEng.Case => Str;
                                                            g : ResEng.Gender; lock_CN : {}}
                     = 0 ;
                mkCN : (x : {s : ParamX.Number => ResEng.Case => Str;
                             g : ResEng.Gender; lock_N : {}}) -> (y : {s : Str;
                                                                       lock_Adv : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                           g : ResEng.Gender;
                                                                                           lock_CN : {}}
                     = 0 ;
                mkCN : {s : ParamX.Number => ResEng.Case => Str; g : ResEng.Gender;
                        lock_CN : {}} -> {s : Str;
                                          lock_Adv : {}} -> {s : ParamX.Number => ResEng.Case => Str;
                                                             g : ResEng.Gender; lock_CN : {}}
                     = 0 ;
                mkCN : (cn : {s : ParamX.Number => ResEng.Case => Str;
                              g : ResEng.Gender; lock_CN : {}}) -> (s : {s : Str;
                                                                         lock_S : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                           g : ResEng.Gender;
                                                                                           lock_CN : {}}
                     = 0 ;
                mkCN : (cn : {s : ParamX.Number => ResEng.Case => Str;
                              g : ResEng.Gender; lock_CN : {}}) -> (s : {s : ParamX.QForm => Str;
                                                                         lock_QS : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                            g : ResEng.Gender;
                                                                                            lock_CN : {}}
                     = 0 ;
                mkCN : (cn : {s : ParamX.Number => ResEng.Case => Str;
                              g : ResEng.Gender;
                              lock_CN : {}}) -> (s : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                   aux : Str;
                                                                                                                                                   fin : Str;
                                                                                                                                                   inf : Str};
                                                      ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                      ptp : Str;
                                                      s2 : ResEng.Agr => Str}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                   g : ResEng.Gender;
                                                                                   lock_CN : {}}
                     = 0 ;
                mkCN : (cn : {s : ParamX.Number => ResEng.Case => Str;
                              g : ResEng.Gender; lock_CN : {}}) -> (s : {s : Str;
                                                                         lock_SC : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                            g : ResEng.Gender;
                                                                                            lock_CN : {}}
                     = 0 ;
                mkCN : (x : {s : ParamX.Number => ResEng.Case => Str;
                             g : ResEng.Gender; lock_N : {}}) -> (y : {s : ResEng.NPCase => Str;
                                                                       a : ResEng.Agr;
                                                                       lock_NP : {}}) -> {s : ParamX.Number => ResEng.Case => Str;
                                                                                          g : ResEng.Gender;
                                                                                          lock_CN : {}}
                     = 0 ;
                mkCN : {s : ParamX.Number => ResEng.Case => Str; g : ResEng.Gender;
                        lock_CN : {}} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                          lock_NP : {}} -> {s : ParamX.Number => ResEng.Case => Str;
                                                            g : ResEng.Gender; lock_CN : {}}
                     = 0 ;
              } ;
  oper mkCard = overload {
                  mkCard : Str -> {s : ResEng.Case => Str; lock_Card : {};
                                   n : ParamX.Number}
                         = 0 ;
                  mkCard : {s : ResEng.CardOrd => ResEng.Case => Str;
                            lock_Numeral : {}; n : ParamX.Number} -> {s : ResEng.Case => Str;
                                                                      lock_Card : {};
                                                                      n : ParamX.Number}
                         = 0 ;
                  mkCard : {s : ResEng.CardOrd => ResEng.Case => Str;
                            lock_Digits : {}; n : ParamX.Number;
                            tail : ParamX.DTail} -> {s : ResEng.Case => Str; lock_Card : {};
                                                     n : ParamX.Number}
                         = 0 ;
                  mkCard : {s : Str; lock_AdN : {}} -> {s : ResEng.Case => Str;
                                                        lock_Card : {};
                                                        n : ParamX.Number} -> {s : ResEng.Case => Str;
                                                                               lock_Card : {};
                                                                               n : ParamX.Number}
                         = 0 ;
                } ;
  oper mkCl = overload {
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                     isRefl : Prelude.Bool;
                                                     lock_V : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                       lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                     isRefl : Prelude.Bool;
                                                     lock_V2 : {}}) -> (o : {s : ResEng.NPCase => Str;
                                                                             a : ResEng.Agr;
                                                                             lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                     c3 : Str; isRefl : Prelude.Bool;
                                                     lock_V3 : {}}) -> (o : {s : ResEng.NPCase => Str;
                                                                             a : ResEng.Agr;
                                                                             lock_NP : {}}) -> (i : {s : ResEng.NPCase => Str;
                                                                                                     a : ResEng.Agr;
                                                                                                     lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                                        lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VVForm => Str; lock_VV : {};
                                                     typ : ResEng.VVType}) -> (vp : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                  aux : Str;
                                                                                                                                                                                  fin : Str;
                                                                                                                                                                                  inf : Str};
                                                                                     ad : Str;
                                                                                     inf : Str;
                                                                                     lock_VP : {};
                                                                                     prp : Str;
                                                                                     ptp : Str;
                                                                                     s2 : ResEng.Agr => Str}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                                  lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                     isRefl : Prelude.Bool;
                                                     lock_VS : {}}) -> (p : {s : Str;
                                                                             lock_S : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                               lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                     isRefl : Prelude.Bool;
                                                     lock_VQ : {}}) -> (q : {s : ParamX.QForm => Str;
                                                                             lock_QS : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                     isRefl : Prelude.Bool;
                                                     lock_VA : {}}) -> (q : {s : ResEng.AForm => Str;
                                                                             lock_A : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                               lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                     isRefl : Prelude.Bool;
                                                     lock_VA : {}}) -> (q : {s : ResEng.Agr => Str;
                                                                             isPre : Prelude.Bool;
                                                                             lock_AP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                     isRefl : Prelude.Bool;
                                                     lock_V2A : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                              a : ResEng.Agr;
                                                                              lock_NP : {}}) -> (q : {s : ResEng.AForm => Str;
                                                                                                      lock_A : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                                        lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                     isRefl : Prelude.Bool;
                                                     lock_V2A : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                              a : ResEng.Agr;
                                                                              lock_NP : {}}) -> (q : {s : ResEng.Agr => Str;
                                                                                                      isPre : Prelude.Bool;
                                                                                                      lock_AP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                                         lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                     isRefl : Prelude.Bool;
                                                     lock_V2S : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                              a : ResEng.Agr;
                                                                              lock_NP : {}}) -> (q : {s : Str;
                                                                                                      lock_S : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                                        lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                     isRefl : Prelude.Bool;
                                                     lock_V2Q : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                              a : ResEng.Agr;
                                                                              lock_NP : {}}) -> (q : {s : ParamX.QForm => Str;
                                                                                                      lock_QS : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                                         lock_Cl : {}}
                     = 0 ;
                mkCl : (s : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                     c3 : Str; isRefl : Prelude.Bool; lock_V2V : {};
                                                     typ : ResEng.VVType}) -> (n : {s : ResEng.NPCase => Str;
                                                                                    a : ResEng.Agr;
                                                                                    lock_NP : {}}) -> (q : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                                         aux : Str;
                                                                                                                                                                                                         fin : Str;
                                                                                                                                                                                                         inf : Str};
                                                                                                            ad : Str;
                                                                                                            inf : Str;
                                                                                                            lock_VP : {};
                                                                                                            prp : Str;
                                                                                                            ptp : Str;
                                                                                                            s2 : ResEng.Agr => Str}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                                                         lock_Cl : {}}
                     = 0 ;
                mkCl : (x : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (y : {s : ResEng.AForm => Str;
                                                     lock_A : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                       lock_Cl : {}}
                     = 0 ;
                mkCl : (x : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (y : {s : ResEng.AForm => Str;
                                                     lock_A : {}}) -> (z : {s : ResEng.NPCase => Str;
                                                                            a : ResEng.Agr;
                                                                            lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                               lock_Cl : {}}
                     = 0 ;
                mkCl : (x : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (y : {s : ResEng.AForm => Str; c2 : Str;
                                                     lock_A2 : {}}) -> (z : {s : ResEng.NPCase => Str;
                                                                             a : ResEng.Agr;
                                                                             lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                lock_Cl : {}}
                     = 0 ;
                mkCl : (x : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (y : {s : ResEng.Agr => Str;
                                                     isPre : Prelude.Bool;
                                                     lock_AP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                        lock_Cl : {}}
                     = 0 ;
                mkCl : (x : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (y : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                     lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                        lock_Cl : {}}
                     = 0 ;
                mkCl : (x : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (y : {s : ParamX.Number => ResEng.Case => Str;
                                                     g : ResEng.Gender;
                                                     lock_N : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                       lock_Cl : {}}
                     = 0 ;
                mkCl : (x : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (y : {s : ParamX.Number => ResEng.Case => Str;
                                                     g : ResEng.Gender;
                                                     lock_CN : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                        lock_Cl : {}}
                     = 0 ;
                mkCl : (x : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> (y : {s : Str;
                                                     lock_Adv : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                         lock_Cl : {}}
                     = 0 ;
                mkCl : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                        lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                       aux : Str;
                                                                                                                                       fin : Str;
                                                                                                                                       inf : Str};
                                          ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                                          s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                      lock_Cl : {}}
                     = 0 ;
                mkCl : (y : {s : ParamX.Number => ResEng.Case => Str;
                             g : ResEng.Gender;
                             lock_N : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                               lock_Cl : {}}
                     = 0 ;
                mkCl : (y : {s : ParamX.Number => ResEng.Case => Str;
                             g : ResEng.Gender;
                             lock_CN : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                lock_Cl : {}}
                     = 0 ;
                mkCl : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                        lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                          lock_Cl : {}}
                     = 0 ;
                mkCl : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                        lock_NP : {}} -> {s : ResEng.Agr => Str; c : ResEng.NPCase;
                                          lock_RS : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                            lock_Cl : {}}
                     = 0 ;
                mkCl : {s : Str; lock_Adv : {}} -> {s : Str;
                                                    lock_S : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                     lock_Cl : {}}
                     = 0 ;
                mkCl : (v : {s : ResEng.VForm => Str; isRefl : Prelude.Bool;
                             lock_V : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                               lock_Cl : {}}
                     = 0 ;
                mkCl : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                     aux : Str;
                                                                                                                     fin : Str;
                                                                                                                     inf : Str};
                        ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                        s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                    lock_Cl : {}}
                     = 0 ;
                mkCl : {s : Str;
                        lock_SC : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                       aux : Str;
                                                                                                                                       fin : Str;
                                                                                                                                       inf : Str};
                                          ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                                          s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                      lock_Cl : {}}
                     = 0 ;
              } ;
  oper mkClSlash = overload {
                     mkClSlash : (np : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                        lock_NP : {}}) -> (vps : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                               aux : Str;
                                                                                                                                                               fin : Str;
                                                                                                                                                               inf : Str};
                                                                  ad : Str; c2 : Str; inf : Str;
                                                                  lock_VPSlash : {}; prp : Str;
                                                                  ptp : Str;
                                                                  s2 : ResEng.Agr => Str}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                               c2 : Str;
                                                                                               lock_ClSlash : {}}
                               = 0 ;
                     mkClSlash : (np : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                        lock_NP : {}}) -> (v2 : {s : ResEng.VForm => Str; c2 : Str;
                                                                 isRefl : Prelude.Bool;
                                                                 lock_V2 : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                    c2 : Str;
                                                                                    lock_ClSlash : {}}
                               = 0 ;
                     mkClSlash : (np : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                        lock_NP : {}}) -> (vv : {s : ResEng.VVForm => Str;
                                                                 lock_VV : {};
                                                                 typ : ResEng.VVType}) -> (v2 : {s : ResEng.VForm => Str;
                                                                                                 c2 : Str;
                                                                                                 isRefl : Prelude.Bool;
                                                                                                 lock_V2 : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                                    c2 : Str;
                                                                                                                    lock_ClSlash : {}}
                               = 0 ;
                     mkClSlash : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                  lock_Cl : {}} -> {s : Str;
                                                    lock_Prep : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                        c2 : Str; lock_ClSlash : {}}
                               = 0 ;
                     mkClSlash : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                  c2 : Str; lock_ClSlash : {}} -> {s : Str;
                                                                   lock_Adv : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                      c2 : Str;
                                                                                      lock_ClSlash : {}}
                               = 0 ;
                     mkClSlash : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                  lock_NP : {}} -> {s : ResEng.VForm => Str; isRefl : Prelude.Bool;
                                                    lock_VS : {}} -> {s : Str; c2 : Str;
                                                                      lock_SSlash : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                            c2 : Str;
                                                                                            lock_ClSlash : {}}
                               = 0 ;
                   } ;
  oper mkComp = overload {
                  mkComp : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                            lock_AP : {}} -> {s : ResEng.Agr => Str; lock_Comp : {}}
                         = 0 ;
                  mkComp : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                            lock_NP : {}} -> {s : ResEng.Agr => Str; lock_Comp : {}}
                         = 0 ;
                  mkComp : {s : Str; lock_Adv : {}} -> {s : ResEng.Agr => Str;
                                                        lock_Comp : {}}
                         = 0 ;
                } ;
  oper mkDet = overload {
                 mkDet : (q : {s : Prelude.Bool => ParamX.Number => Str;
                               lock_Quant : {};
                               sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> {s : Str;
                                                                                                hasNum : Prelude.Bool;
                                                                                                lock_Det : {};
                                                                                                n : ParamX.Number;
                                                                                                sp : ResEng.NPCase => Str}
                       = 0 ;
                 mkDet : (d : {s : Prelude.Bool => ParamX.Number => Str;
                               lock_Quant : {};
                               sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> (nu : {s : ResEng.Case => Str;
                                                                                                      lock_Card : {};
                                                                                                      n : ParamX.Number}) -> {s : Str;
                                                                                                                              hasNum : Prelude.Bool;
                                                                                                                              lock_Det : {};
                                                                                                                              n : ParamX.Number;
                                                                                                                              sp : ResEng.NPCase => Str}
                       = 0 ;
                 mkDet : (q : {s : Prelude.Bool => ParamX.Number => Str;
                               lock_Quant : {};
                               sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> (o : {s : ResEng.Case => Str;
                                                                                                     lock_Ord : {}}) -> {s : Str;
                                                                                                                         hasNum : Prelude.Bool;
                                                                                                                         lock_Det : {};
                                                                                                                         n : ParamX.Number;
                                                                                                                         sp : ResEng.NPCase => Str}
                       = 0 ;
                 mkDet : {s : Prelude.Bool => ParamX.Number => Str; lock_Quant : {};
                          sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : ResEng.Case => Str;
                                                                                          hasCard : Prelude.Bool;
                                                                                          lock_Num : {};
                                                                                          n : ParamX.Number} -> {s : ResEng.Case => Str;
                                                                                                                 lock_Ord : {}} -> {s : Str;
                                                                                                                                    hasNum : Prelude.Bool;
                                                                                                                                    lock_Det : {};
                                                                                                                                    n : ParamX.Number;
                                                                                                                                    sp : ResEng.NPCase => Str}
                       = 0 ;
                 mkDet : {s : Prelude.Bool => ParamX.Number => Str; lock_Quant : {};
                          sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : ResEng.Case => Str;
                                                                                          hasCard : Prelude.Bool;
                                                                                          lock_Num : {};
                                                                                          n : ParamX.Number} -> {s : Str;
                                                                                                                 hasNum : Prelude.Bool;
                                                                                                                 lock_Det : {};
                                                                                                                 n : ParamX.Number;
                                                                                                                 sp : ResEng.NPCase => Str}
                       = 0 ;
                 mkDet : {s : ResEng.Case => Str; lock_Card : {};
                          n : ParamX.Number} -> {s : Str; hasNum : Prelude.Bool;
                                                 lock_Det : {}; n : ParamX.Number;
                                                 sp : ResEng.NPCase => Str}
                       = 0 ;
                 mkDet : (d : {s : ResEng.CardOrd => ResEng.Case => Str;
                               lock_Digits : {}; n : ParamX.Number;
                               tail : ParamX.DTail}) -> {s : Str; hasNum : Prelude.Bool;
                                                         lock_Det : {}; n : ParamX.Number;
                                                         sp : ResEng.NPCase => Str}
                       = 0 ;
                 mkDet : (d : {s : ResEng.CardOrd => ResEng.Case => Str;
                               lock_Numeral : {}; n : ParamX.Number}) -> {s : Str;
                                                                          hasNum : Prelude.Bool;
                                                                          lock_Det : {};
                                                                          n : ParamX.Number;
                                                                          sp : ResEng.NPCase => Str}
                       = 0 ;
                 mkDet : (p : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                               lock_Pron : {}; sp : ResEng.Case => Str}) -> {s : Str;
                                                                             hasNum : Prelude.Bool;
                                                                             lock_Det : {};
                                                                             n : ParamX.Number;
                                                                             sp : ResEng.NPCase => Str}
                       = 0 ;
                 mkDet : (p : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                               lock_Pron : {};
                               sp : ResEng.Case => Str}) -> {s : ResEng.Case => Str;
                                                             hasCard : Prelude.Bool; lock_Num : {};
                                                             n : ParamX.Number} -> {s : Str;
                                                                                    hasNum : Prelude.Bool;
                                                                                    lock_Det : {};
                                                                                    n : ParamX.Number;
                                                                                    sp : ResEng.NPCase => Str}
                       = 0 ;
               } ;
  oper mkDigits = overload {
                    mkDigits : Str -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                       lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail}
                             = 0 ;
                    mkDigits : {s : ResEng.CardOrd => ResEng.Case => Str;
                                lock_Dig : {};
                                n : ParamX.Number} -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                       lock_Digits : {}; n : ParamX.Number;
                                                       tail : ParamX.DTail}
                             = 0 ;
                    mkDigits : {s : ResEng.CardOrd => ResEng.Case => Str;
                                lock_Dig : {};
                                n : ParamX.Number} -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                       lock_Digits : {}; n : ParamX.Number;
                                                       tail : ParamX.DTail} -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                                                lock_Digits : {};
                                                                                n : ParamX.Number;
                                                                                tail : ParamX.DTail}
                             = 0 ;
                  } ;
  oper mkIAdv = overload {
                  mkIAdv : {s : Str; lock_Prep : {}} -> {s : ResEng.NPCase => Str;
                                                         lock_IP : {};
                                                         n : ParamX.Number} -> {s : Str;
                                                                                lock_IAdv : {}}
                         = 0 ;
                  mkIAdv : {s : Str; lock_IAdv : {}} -> {s : Str;
                                                         lock_Adv : {}} -> {s : Str; lock_IAdv : {}}
                         = 0 ;
                } ;
  oper mkIComp = overload {
                   mkIComp : {s : Str; lock_IAdv : {}} -> {s : Str; lock_IComp : {}}
                           = 0 ;
                   mkIComp : {s : ResEng.NPCase => Str; lock_IP : {};
                              n : ParamX.Number} -> {s : Str; lock_IComp : {}}
                           = 0 ;
                 } ;
  oper mkIDet = overload {
                  mkIDet : (i : {s : ParamX.Number => Str;
                                 lock_IQuant : {}}) -> (nu : {s : ResEng.Case => Str;
                                                              hasCard : Prelude.Bool; lock_Num : {};
                                                              n : ParamX.Number}) -> {s : Str;
                                                                                      lock_IDet : {};
                                                                                      n : ParamX.Number}
                         = 0 ;
                  mkIDet : (i : {s : ParamX.Number => Str;
                                 lock_IQuant : {}}) -> {s : Str; lock_IDet : {}; n : ParamX.Number}
                         = 0 ;
                } ;
  oper mkIP = overload {
                mkIP : {s : Str; lock_IDet : {};
                        n : ParamX.Number} -> {s : ParamX.Number => ResEng.Case => Str;
                                               g : ResEng.Gender;
                                               lock_CN : {}} -> {s : ResEng.NPCase => Str;
                                                                 lock_IP : {}; n : ParamX.Number}
                     = 0 ;
                mkIP : (i : {s : Str; lock_IDet : {};
                             n : ParamX.Number}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                          g : ResEng.Gender;
                                                          lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                            lock_IP : {};
                                                                            n : ParamX.Number}
                     = 0 ;
                mkIP : {s : Str; lock_IDet : {};
                        n : ParamX.Number} -> {s : ResEng.NPCase => Str; lock_IP : {};
                                               n : ParamX.Number}
                     = 0 ;
                mkIP : (i : {s : ParamX.Number => Str;
                             lock_IQuant : {}}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                         g : ResEng.Gender;
                                                         lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                            lock_IP : {};
                                                                            n : ParamX.Number}
                     = 0 ;
                mkIP : (i : {s : ParamX.Number => Str;
                             lock_IQuant : {}}) -> (nu : {s : ResEng.Case => Str;
                                                          hasCard : Prelude.Bool; lock_Num : {};
                                                          n : ParamX.Number}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                                       g : ResEng.Gender;
                                                                                       lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                                                          lock_IP : {};
                                                                                                          n : ParamX.Number}
                     = 0 ;
                mkIP : (i : {s : ParamX.Number => Str;
                             lock_IQuant : {}}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                         g : ResEng.Gender;
                                                         lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                           lock_IP : {};
                                                                           n : ParamX.Number}
                     = 0 ;
                mkIP : {s : ResEng.NPCase => Str; lock_IP : {};
                        n : ParamX.Number} -> {s : Str;
                                               lock_Adv : {}} -> {s : ResEng.NPCase => Str;
                                                                  lock_IP : {}; n : ParamX.Number}
                     = 0 ;
              } ;
  oper mkImp = overload {
                 mkImp : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                       aux : Str;
                                                                                                                       fin : Str;
                                                                                                                       inf : Str};
                          ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                          s2 : ResEng.Agr => Str} -> {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                                                      lock_Imp : {}}
                       = 0 ;
                 mkImp : (v : {s : ResEng.VForm => Str; isRefl : Prelude.Bool;
                               lock_V : {}}) -> {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                                                 lock_Imp : {}}
                       = 0 ;
                 mkImp : (v : {s : ResEng.VForm => Str; c2 : Str;
                               isRefl : Prelude.Bool;
                               lock_V2 : {}}) -> (np : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                        lock_NP : {}}) -> {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                                                                           lock_Imp : {}}
                       = 0 ;
               } ;
  oper mkListAP = overload {
                    mkListAP : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                lock_AP : {}} -> {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                                  lock_AP : {}} -> {isPre : Prelude.Bool;
                                                                    lock_ListAP : {};
                                                                    s1 : ResEng.Agr => Str;
                                                                    s2 : ResEng.Agr => Str}
                             = 0 ;
                    mkListAP : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                lock_AP : {}} -> {isPre : Prelude.Bool; lock_ListAP : {};
                                                  s1 : ResEng.Agr => Str;
                                                  s2 : ResEng.Agr => Str} -> {isPre : Prelude.Bool;
                                                                              lock_ListAP : {};
                                                                              s1 : ResEng.Agr => Str;
                                                                              s2 : ResEng.Agr => Str}
                             = 0 ;
                  } ;
  oper mkListAdv = overload {
                     mkListAdv : {s : Str; lock_Adv : {}} -> {s : Str;
                                                              lock_Adv : {}} -> {lock_ListAdv : {};
                                                                                 s1 : Str; s2 : Str}
                               = 0 ;
                     mkListAdv : {s : Str; lock_Adv : {}} -> {lock_ListAdv : {};
                                                              s1 : Str;
                                                              s2 : Str} -> {lock_ListAdv : {};
                                                                            s1 : Str; s2 : Str}
                               = 0 ;
                   } ;
  oper mkListNP = overload {
                    mkListNP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                lock_NP : {}} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                  lock_NP : {}} -> {a : ResEng.Agr;
                                                                    lock_ListNP : {};
                                                                    s1 : ResEng.NPCase => Str;
                                                                    s2 : ResEng.NPCase => Str}
                             = 0 ;
                    mkListNP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                lock_NP : {}} -> {a : ResEng.Agr; lock_ListNP : {};
                                                  s1 : ResEng.NPCase => Str;
                                                  s2 : ResEng.NPCase => Str} -> {a : ResEng.Agr;
                                                                                 lock_ListNP : {};
                                                                                 s1 : ResEng.NPCase => Str;
                                                                                 s2 : ResEng.NPCase => Str}
                             = 0 ;
                  } ;
  oper mkListRS = overload {
                    mkListRS : {s : ResEng.Agr => Str; c : ResEng.NPCase;
                                lock_RS : {}} -> {s : ResEng.Agr => Str; c : ResEng.NPCase;
                                                  lock_RS : {}} -> {c : ResEng.NPCase;
                                                                    lock_ListRS : {};
                                                                    s1 : ResEng.Agr => Str;
                                                                    s2 : ResEng.Agr => Str}
                             = 0 ;
                    mkListRS : {s : ResEng.Agr => Str; c : ResEng.NPCase;
                                lock_RS : {}} -> {c : ResEng.NPCase; lock_ListRS : {};
                                                  s1 : ResEng.Agr => Str;
                                                  s2 : ResEng.Agr => Str} -> {c : ResEng.NPCase;
                                                                              lock_ListRS : {};
                                                                              s1 : ResEng.Agr => Str;
                                                                              s2 : ResEng.Agr => Str}
                             = 0 ;
                  } ;
  oper mkListS = overload {
                   mkListS : {s : Str; lock_S : {}} -> {s : Str;
                                                        lock_S : {}} -> {lock_ListS : {}; s1 : Str;
                                                                         s2 : Str}
                           = 0 ;
                   mkListS : {s : Str; lock_S : {}} -> {lock_ListS : {}; s1 : Str;
                                                        s2 : Str} -> {lock_ListS : {}; s1 : Str;
                                                                      s2 : Str}
                           = 0 ;
                 } ;
  oper mkNP = overload {
                mkNP : (q : {s : Prelude.Bool => ParamX.Number => Str;
                             lock_Quant : {};
                             sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                                                   g : ResEng.Gender;
                                                                                                   lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                                                                     a : ResEng.Agr;
                                                                                                                     lock_NP : {}}
                     = 0 ;
                mkNP : (q : {s : Prelude.Bool => ParamX.Number => Str;
                             lock_Quant : {};
                             sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                                                   g : ResEng.Gender;
                                                                                                   lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                                                                      a : ResEng.Agr;
                                                                                                                      lock_NP : {}}
                     = 0 ;
                mkNP : (q : {s : Prelude.Bool => ParamX.Number => Str;
                             lock_Quant : {};
                             sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> (nu : {s : ResEng.Case => Str;
                                                                                                    hasCard : Prelude.Bool;
                                                                                                    lock_Num : {};
                                                                                                    n : ParamX.Number}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                                                                                 g : ResEng.Gender;
                                                                                                                                 lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                                                                                                    a : ResEng.Agr;
                                                                                                                                                    lock_NP : {}}
                     = 0 ;
                mkNP : (q : {s : Prelude.Bool => ParamX.Number => Str;
                             lock_Quant : {};
                             sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> (nu : {s : ResEng.Case => Str;
                                                                                                    hasCard : Prelude.Bool;
                                                                                                    lock_Num : {};
                                                                                                    n : ParamX.Number}) -> (or : {s : ResEng.Case => Str;
                                                                                                                                  lock_Ord : {}}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                                                                                                           g : ResEng.Gender;
                                                                                                                                                           lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                                                                                                                              a : ResEng.Agr;
                                                                                                                                                                              lock_NP : {}}
                     = 0 ;
                mkNP : (q : {s : Prelude.Bool => ParamX.Number => Str;
                             lock_Quant : {};
                             sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> (nu : {s : ResEng.Case => Str;
                                                                                                    hasCard : Prelude.Bool;
                                                                                                    lock_Num : {};
                                                                                                    n : ParamX.Number}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                                                                                 g : ResEng.Gender;
                                                                                                                                 lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                                                                                                   a : ResEng.Agr;
                                                                                                                                                   lock_NP : {}}
                     = 0 ;
                mkNP : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                        n : ParamX.Number;
                        sp : ResEng.NPCase => Str} -> {s : ParamX.Number => ResEng.Case => Str;
                                                       g : ResEng.Gender;
                                                       lock_CN : {}} -> {s : ResEng.NPCase => Str;
                                                                         a : ResEng.Agr;
                                                                         lock_NP : {}}
                     = 0 ;
                mkNP : (d : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                             n : ParamX.Number;
                             sp : ResEng.NPCase => Str}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                  g : ResEng.Gender;
                                                                  lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                                    a : ResEng.Agr;
                                                                                    lock_NP : {}}
                     = 0 ;
                mkNP : (d : {s : ResEng.CardOrd => ResEng.Case => Str;
                             lock_Numeral : {};
                             n : ParamX.Number}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                          g : ResEng.Gender;
                                                          lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                             a : ResEng.Agr;
                                                                             lock_NP : {}}
                     = 0 ;
                mkNP : (d : {s : ResEng.CardOrd => ResEng.Case => Str;
                             lock_Numeral : {};
                             n : ParamX.Number}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                          g : ResEng.Gender;
                                                          lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                            a : ResEng.Agr;
                                                                            lock_NP : {}}
                     = 0 ;
                mkNP : (d : {s : ResEng.CardOrd => ResEng.Case => Str;
                             lock_Digits : {}; n : ParamX.Number;
                             tail : ParamX.DTail}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                            g : ResEng.Gender;
                                                            lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                               a : ResEng.Agr;
                                                                               lock_NP : {}}
                     = 0 ;
                mkNP : (d : {s : ResEng.CardOrd => ResEng.Case => Str;
                             lock_Digits : {}; n : ParamX.Number;
                             tail : ParamX.DTail}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                            g : ResEng.Gender;
                                                            lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                              a : ResEng.Agr;
                                                                              lock_NP : {}}
                     = 0 ;
                mkNP : (d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                             lock_Digit : {}}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                        g : ResEng.Gender;
                                                        lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                           a : ResEng.Agr;
                                                                           lock_NP : {}}
                     = 0 ;
                mkNP : (d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                             lock_Digit : {}}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                        g : ResEng.Gender;
                                                        lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                          a : ResEng.Agr;
                                                                          lock_NP : {}}
                     = 0 ;
                mkNP : (d : {s : ResEng.Case => Str; lock_Card : {};
                             n : ParamX.Number}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                          g : ResEng.Gender;
                                                          lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                             a : ResEng.Agr;
                                                                             lock_NP : {}}
                     = 0 ;
                mkNP : (d : {s : ResEng.Case => Str; lock_Card : {};
                             n : ParamX.Number}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                          g : ResEng.Gender;
                                                          lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                            a : ResEng.Agr;
                                                                            lock_NP : {}}
                     = 0 ;
                mkNP : (p : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_Pron : {};
                             sp : ResEng.Case => Str}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                g : ResEng.Gender;
                                                                lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                                   a : ResEng.Agr;
                                                                                   lock_NP : {}}
                     = 0 ;
                mkNP : (p : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_Pron : {};
                             sp : ResEng.Case => Str}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                g : ResEng.Gender;
                                                                lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                                  a : ResEng.Agr;
                                                                                  lock_NP : {}}
                     = 0 ;
                mkNP : {s : ResEng.Case => Str; g : ResEng.Gender;
                        lock_PN : {}} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                          lock_NP : {}}
                     = 0 ;
                mkNP : {s : ResEng.NPCase => Str; a : ResEng.Agr; lock_Pron : {};
                        sp : ResEng.Case => Str} -> {s : ResEng.NPCase => Str;
                                                     a : ResEng.Agr; lock_NP : {}}
                     = 0 ;
                mkNP : (q : {s : Prelude.Bool => ParamX.Number => Str;
                             lock_Quant : {};
                             sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> {s : ResEng.NPCase => Str;
                                                                                              a : ResEng.Agr;
                                                                                              lock_NP : {}}
                     = 0 ;
                mkNP : (q : {s : Prelude.Bool => ParamX.Number => Str;
                             lock_Quant : {};
                             sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> (n : {s : ResEng.Case => Str;
                                                                                                   hasCard : Prelude.Bool;
                                                                                                   lock_Num : {};
                                                                                                   n : ParamX.Number}) -> {s : ResEng.NPCase => Str;
                                                                                                                           a : ResEng.Agr;
                                                                                                                           lock_NP : {}}
                     = 0 ;
                mkNP : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                        n : ParamX.Number;
                        sp : ResEng.NPCase => Str} -> {s : ResEng.NPCase => Str;
                                                       a : ResEng.Agr; lock_NP : {}}
                     = 0 ;
                mkNP : {s : ParamX.Number => ResEng.Case => Str; g : ResEng.Gender;
                        lock_CN : {}} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                          lock_NP : {}}
                     = 0 ;
                mkNP : (n : {s : ParamX.Number => ResEng.Case => Str;
                             g : ResEng.Gender; lock_N : {}}) -> {s : ResEng.NPCase => Str;
                                                                  a : ResEng.Agr; lock_NP : {}}
                     = 0 ;
                mkNP : {s : Str; lock_Predet : {}} -> {s : ResEng.NPCase => Str;
                                                       a : ResEng.Agr;
                                                       lock_NP : {}} -> {s : ResEng.NPCase => Str;
                                                                         a : ResEng.Agr;
                                                                         lock_NP : {}}
                     = 0 ;
                mkNP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                        lock_NP : {}} -> {s : ResEng.VForm => Str; c2 : Str;
                                          isRefl : Prelude.Bool;
                                          lock_V2 : {}} -> {s : ResEng.NPCase => Str;
                                                            a : ResEng.Agr; lock_NP : {}}
                     = 0 ;
                mkNP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                        lock_NP : {}} -> {s : Str;
                                          lock_Adv : {}} -> {s : ResEng.NPCase => Str;
                                                             a : ResEng.Agr; lock_NP : {}}
                     = 0 ;
                mkNP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                        lock_NP : {}} -> {s : ResEng.Agr => Str; c : ResEng.NPCase;
                                          lock_RS : {}} -> {s : ResEng.NPCase => Str;
                                                            a : ResEng.Agr; lock_NP : {}}
                     = 0 ;
                mkNP : (c : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                             s2 : Str}) -> (x : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                 lock_NP : {}}) -> (y : {s : ResEng.NPCase => Str;
                                                                         a : ResEng.Agr;
                                                                         lock_NP : {}}) -> {s : ResEng.NPCase => Str;
                                                                                            a : ResEng.Agr;
                                                                                            lock_NP : {}}
                     = 0 ;
                mkNP : (c : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                             s2 : Str}) -> (xy : {a : ResEng.Agr; lock_ListNP : {};
                                                  s1 : ResEng.NPCase => Str;
                                                  s2 : ResEng.NPCase => Str}) -> {s : ResEng.NPCase => Str;
                                                                                  a : ResEng.Agr;
                                                                                  lock_NP : {}}
                     = 0 ;
                mkNP : (q : {s : Prelude.Bool => ParamX.Number => Str; isSg : {};
                             lock_Quant : {};
                             sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                                                   g : ResEng.Gender;
                                                                                                   lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                                                                      a : ResEng.Agr;
                                                                                                                      lock_NP : {}}
                     = 0 ;
                mkNP : (q : {s : Prelude.Bool => ParamX.Number => Str; isPl : {};
                             lock_Quant : {};
                             sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}) -> (n : {s : ParamX.Number => ResEng.Case => Str;
                                                                                                   g : ResEng.Gender;
                                                                                                   lock_CN : {}}) -> {s : ResEng.NPCase => Str;
                                                                                                                      a : ResEng.Agr;
                                                                                                                      lock_NP : {}}
                     = 0 ;
              } ;
  oper mkNum = overload {
                 mkNum : (s : Str) -> {s : ResEng.Case => Str;
                                       hasCard : Prelude.Bool; lock_Num : {}; n : ParamX.Number}
                       = 0 ;
                 mkNum : (d : {s : ResEng.CardOrd => ResEng.Case => Str;
                               lock_Numeral : {}; n : ParamX.Number}) -> {s : ResEng.Case => Str;
                                                                          hasCard : Prelude.Bool;
                                                                          lock_Num : {};
                                                                          n : ParamX.Number}
                       = 0 ;
                 mkNum : (d : {s : ResEng.CardOrd => ResEng.Case => Str;
                               lock_Digits : {}; n : ParamX.Number;
                               tail : ParamX.DTail}) -> {s : ResEng.Case => Str;
                                                         hasCard : Prelude.Bool; lock_Num : {};
                                                         n : ParamX.Number}
                       = 0 ;
                 mkNum : (d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                               lock_Digit : {}}) -> {s : ResEng.Case => Str;
                                                     hasCard : Prelude.Bool; lock_Num : {};
                                                     n : ParamX.Number}
                       = 0 ;
                 mkNum : {s : ResEng.Case => Str; lock_Card : {};
                          n : ParamX.Number} -> {s : ResEng.Case => Str;
                                                 hasCard : Prelude.Bool; lock_Num : {};
                                                 n : ParamX.Number}
                       = 0 ;
                 mkNum : (a : {s : Str;
                               lock_AdN : {}}) -> (c : {s : ResEng.Case => Str; lock_Card : {};
                                                        n : ParamX.Number}) -> {s : ResEng.Case => Str;
                                                                                hasCard : Prelude.Bool;
                                                                                lock_Num : {};
                                                                                n : ParamX.Number}
                       = 0 ;
               } ;
  oper mkNumeral = overload {
                     mkNumeral : (n : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                            lock_Digit : {}};
                                       isOne : Predef.PBool;
                                       n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                            lock_Sub10 : {};
                                            n : ParamX.Number}}) -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                                     lock_Numeral : {};
                                                                     n : ParamX.Number}
                               = 0 ;
                     mkNumeral : (n : {s : ResEng.CardOrd => ResEng.Case => Str;
                                       lock_Sub100 : {};
                                       n : ParamX.Number}) -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                               lock_Numeral : {}; n : ParamX.Number}
                               = 0 ;
                     mkNumeral : (n : {s : ResEng.CardOrd => ResEng.Case => Str;
                                       lock_Sub1000 : {};
                                       n : ParamX.Number}) -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                               lock_Numeral : {}; n : ParamX.Number}
                               = 0 ;
                     mkNumeral : (m : {s : ResEng.CardOrd => ResEng.Case => Str;
                                       lock_Sub1000 : {};
                                       n : ParamX.Number}) -> (n : {s : ResEng.CardOrd => ResEng.Case => Str;
                                                                    lock_Sub1000 : {};
                                                                    n : ParamX.Number}) -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                                                            lock_Numeral : {};
                                                                                            n : ParamX.Number}
                               = 0 ;
                     mkNumeral : Str -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                         lock_Numeral : {}; n : ParamX.Number}
                               = 0 ;
                   } ;
  oper mkOrd = overload {
                 mkOrd : {s : ResEng.CardOrd => ResEng.Case => Str;
                          lock_Numeral : {}; n : ParamX.Number} -> {s : ResEng.Case => Str;
                                                                    lock_Ord : {}}
                       = 0 ;
                 mkOrd : {s : ResEng.CardOrd => ResEng.Case => Str;
                          lock_Digits : {}; n : ParamX.Number;
                          tail : ParamX.DTail} -> {s : ResEng.Case => Str; lock_Ord : {}}
                       = 0 ;
                 mkOrd : (d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                               lock_Digit : {}}) -> {s : ResEng.Case => Str; lock_Ord : {}}
                       = 0 ;
                 mkOrd : {s : ResEng.AForm => Str;
                          lock_A : {}} -> {s : ResEng.Case => Str; lock_Ord : {}}
                       = 0 ;
               } ;
  oper mkPConj : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                  s2 : Str} -> {s : Str; lock_PConj : {}} ;
  oper mkPhr = overload {
                 mkPhr : {s : Str; lock_PConj : {}} -> {s : Str;
                                                        lock_Utt : {}} -> {s : Str;
                                                                           lock_Voc : {}} -> {s : Str;
                                                                                              lock_Phr : {}}
                       = 0 ;
                 mkPhr : (u : {s : Str; lock_Utt : {}}) -> (v : {s : Str;
                                                                 lock_Voc : {}}) -> {s : Str;
                                                                                     lock_Phr : {}}
                       = 0 ;
                 mkPhr : (u : {s : Str; lock_PConj : {}}) -> (v : {s : Str;
                                                                   lock_Utt : {}}) -> {s : Str;
                                                                                       lock_Phr : {}}
                       = 0 ;
                 mkPhr : (u : {s : Str; lock_Utt : {}}) -> {s : Str; lock_Phr : {}}
                       = 0 ;
                 mkPhr : (s : {s : Str; lock_S : {}}) -> {s : Str; lock_Phr : {}}
                       = 0 ;
                 mkPhr : (s : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                               lock_Cl : {}}) -> {s : Str; lock_Phr : {}}
                       = 0 ;
                 mkPhr : (s : {s : ParamX.QForm => Str; lock_QS : {}}) -> {s : Str;
                                                                           lock_Phr : {}}
                       = 0 ;
                 mkPhr : (s : {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                               lock_Imp : {}}) -> {s : Str; lock_Phr : {}}
                       = 0 ;
               } ;
  oper mkQCl = overload {
                 mkQCl : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                          lock_Cl : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                            lock_QCl : {}}
                       = 0 ;
                 mkQCl : {s : ResEng.NPCase => Str; lock_IP : {};
                          n : ParamX.Number} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                              aux : Str;
                                                                                                                                              fin : Str;
                                                                                                                                              inf : Str};
                                                 ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                 ptp : Str;
                                                 s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                             lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str;
                                                            isRefl : Prelude.Bool;
                                                            lock_V : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                              lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                            isRefl : Prelude.Bool;
                                                            lock_V2 : {}}) -> (o : {s : ResEng.NPCase => Str;
                                                                                    a : ResEng.Agr;
                                                                                    lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                       lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                            c3 : Str; isRefl : Prelude.Bool;
                                                            lock_V3 : {}}) -> (o : {s : ResEng.NPCase => Str;
                                                                                    a : ResEng.Agr;
                                                                                    lock_NP : {}}) -> (i : {s : ResEng.NPCase => Str;
                                                                                                            a : ResEng.Agr;
                                                                                                            lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                                               lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VVForm => Str;
                                                            lock_VV : {};
                                                            typ : ResEng.VVType}) -> (vp : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                         aux : Str;
                                                                                                                                                                                         fin : Str;
                                                                                                                                                                                         inf : Str};
                                                                                            ad : Str;
                                                                                            inf : Str;
                                                                                            lock_VP : {};
                                                                                            prp : Str;
                                                                                            ptp : Str;
                                                                                            s2 : ResEng.Agr => Str}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                                         lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str;
                                                            isRefl : Prelude.Bool;
                                                            lock_VS : {}}) -> (p : {s : Str;
                                                                                    lock_S : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                      lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str;
                                                            isRefl : Prelude.Bool;
                                                            lock_VQ : {}}) -> (q : {s : ParamX.QForm => Str;
                                                                                    lock_QS : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                       lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str;
                                                            isRefl : Prelude.Bool;
                                                            lock_VA : {}}) -> (q : {s : ResEng.AForm => Str;
                                                                                    lock_A : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                      lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str;
                                                            isRefl : Prelude.Bool;
                                                            lock_VA : {}}) -> (q : {s : ResEng.Agr => Str;
                                                                                    isPre : Prelude.Bool;
                                                                                    lock_AP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                       lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                            isRefl : Prelude.Bool;
                                                            lock_V2A : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                                     a : ResEng.Agr;
                                                                                     lock_NP : {}}) -> (q : {s : ResEng.AForm => Str;
                                                                                                             lock_A : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                                               lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                            isRefl : Prelude.Bool;
                                                            lock_V2A : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                                     a : ResEng.Agr;
                                                                                     lock_NP : {}}) -> (q : {s : ResEng.Agr => Str;
                                                                                                             isPre : Prelude.Bool;
                                                                                                             lock_AP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                                                lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                            isRefl : Prelude.Bool;
                                                            lock_V2S : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                                     a : ResEng.Agr;
                                                                                     lock_NP : {}}) -> (q : {s : Str;
                                                                                                             lock_S : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                                               lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                            isRefl : Prelude.Bool;
                                                            lock_V2Q : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                                     a : ResEng.Agr;
                                                                                     lock_NP : {}}) -> (q : {s : ParamX.QForm => Str;
                                                                                                             lock_QS : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                                                lock_QCl : {}}
                       = 0 ;
                 mkQCl : (s : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                            c3 : Str; isRefl : Prelude.Bool;
                                                            lock_V2V : {};
                                                            typ : ResEng.VVType}) -> (n : {s : ResEng.NPCase => Str;
                                                                                           a : ResEng.Agr;
                                                                                           lock_NP : {}}) -> (q : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                                                aux : Str;
                                                                                                                                                                                                                fin : Str;
                                                                                                                                                                                                                inf : Str};
                                                                                                                   ad : Str;
                                                                                                                   inf : Str;
                                                                                                                   lock_VP : {};
                                                                                                                   prp : Str;
                                                                                                                   ptp : Str;
                                                                                                                   s2 : ResEng.Agr => Str}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                                                                lock_QCl : {}}
                       = 0 ;
                 mkQCl : (x : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (y : {s : ResEng.AForm => Str;
                                                            lock_A : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                              lock_QCl : {}}
                       = 0 ;
                 mkQCl : (x : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (y : {s : ResEng.AForm => Str;
                                                            lock_A : {}}) -> (z : {s : ResEng.NPCase => Str;
                                                                                   a : ResEng.Agr;
                                                                                   lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                      lock_QCl : {}}
                       = 0 ;
                 mkQCl : (x : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (y : {s : ResEng.AForm => Str; c2 : Str;
                                                            lock_A2 : {}}) -> (z : {s : ResEng.NPCase => Str;
                                                                                    a : ResEng.Agr;
                                                                                    lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                       lock_QCl : {}}
                       = 0 ;
                 mkQCl : (x : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (y : {s : ResEng.Agr => Str;
                                                            isPre : Prelude.Bool;
                                                            lock_AP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                               lock_QCl : {}}
                       = 0 ;
                 mkQCl : (x : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (y : {s : ResEng.NPCase => Str;
                                                            a : ResEng.Agr;
                                                            lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                               lock_QCl : {}}
                       = 0 ;
                 mkQCl : (x : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (y : {s : ParamX.Number => ResEng.Case => Str;
                                                            g : ResEng.Gender;
                                                            lock_N : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                              lock_QCl : {}}
                       = 0 ;
                 mkQCl : (x : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (y : {s : ParamX.Number => ResEng.Case => Str;
                                                            g : ResEng.Gender;
                                                            lock_CN : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                               lock_QCl : {}}
                       = 0 ;
                 mkQCl : (x : {s : ResEng.NPCase => Str; lock_IP : {};
                               n : ParamX.Number}) -> (y : {s : Str;
                                                            lock_Adv : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                lock_QCl : {}}
                       = 0 ;
                 mkQCl : (ip : {s : ResEng.NPCase => Str; lock_IP : {};
                                n : ParamX.Number}) -> (np : {s : ResEng.NPCase => Str;
                                                              a : ResEng.Agr;
                                                              lock_NP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                                                      c2 : Str;
                                                                                      isRefl : Prelude.Bool;
                                                                                      lock_V2 : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                         lock_QCl : {}}
                       = 0 ;
                 mkQCl : {s : ResEng.NPCase => Str; lock_IP : {};
                          n : ParamX.Number} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                 c2 : Str;
                                                 lock_ClSlash : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                        lock_QCl : {}}
                       = 0 ;
                 mkQCl : {s : Str;
                          lock_IAdv : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                              lock_Cl : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                lock_QCl : {}}
                       = 0 ;
                 mkQCl : (p : {s : Str;
                               lock_Prep : {}}) -> (ip : {s : ResEng.NPCase => Str; lock_IP : {};
                                                          n : ParamX.Number}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                  lock_Cl : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                    lock_QCl : {}}
                       = 0 ;
                 mkQCl : (a : {s : Str;
                               lock_IAdv : {}}) -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                    lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                      lock_QCl : {}}
                       = 0 ;
                 mkQCl : (a : {s : Str;
                               lock_IComp : {}}) -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                     lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                       lock_QCl : {}}
                       = 0 ;
                 mkQCl : {s : ResEng.NPCase => Str; lock_IP : {};
                          n : ParamX.Number} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                 lock_QCl : {}}
                       = 0 ;
               } ;
  oper mkQS = overload {
                mkQS : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                        lock_QCl : {}} -> {s : ParamX.QForm => Str; lock_QS : {}}
                     = 0 ;
                mkQS : (t : {s : Str; lock_Tense : {};
                             t : ParamX.Tense}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                    lock_QCl : {}} -> {s : ParamX.QForm => Str;
                                                                       lock_QS : {}}
                     = 0 ;
                mkQS : (a : {s : Str; a : ParamX.Anteriority;
                             lock_Ant : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                 lock_QCl : {}} -> {s : ParamX.QForm => Str;
                                                                    lock_QS : {}}
                     = 0 ;
                mkQS : (p : {s : Str; lock_Pol : {};
                             p : ResEng.CPolarity}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                        lock_QCl : {}} -> {s : ParamX.QForm => Str;
                                                                           lock_QS : {}}
                     = 0 ;
                mkQS : (t : {s : Str; lock_Tense : {};
                             t : ParamX.Tense}) -> (a : {s : Str; a : ParamX.Anteriority;
                                                         lock_Ant : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                             lock_QCl : {}} -> {s : ParamX.QForm => Str;
                                                                                                lock_QS : {}}
                     = 0 ;
                mkQS : (t : {s : Str; lock_Tense : {};
                             t : ParamX.Tense}) -> (p : {s : Str; lock_Pol : {};
                                                         p : ResEng.CPolarity}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                    lock_QCl : {}} -> {s : ParamX.QForm => Str;
                                                                                                       lock_QS : {}}
                     = 0 ;
                mkQS : (a : {s : Str; a : ParamX.Anteriority;
                             lock_Ant : {}}) -> (p : {s : Str; lock_Pol : {};
                                                      p : ResEng.CPolarity}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                 lock_QCl : {}} -> {s : ParamX.QForm => Str;
                                                                                                    lock_QS : {}}
                     = 0 ;
                mkQS : {s : Str; lock_Tense : {}; t : ParamX.Tense} -> {s : Str;
                                                                        a : ParamX.Anteriority;
                                                                        lock_Ant : {}} -> {s : Str;
                                                                                           lock_Pol : {};
                                                                                           p : ResEng.CPolarity} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                                                                                                                     lock_QCl : {}} -> {s : ParamX.QForm => Str;
                                                                                                                                        lock_QS : {}}
                     = 0 ;
                mkQS : (x : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                             lock_Cl : {}}) -> {s : ParamX.QForm => Str; lock_QS : {}}
                     = 0 ;
              } ;
  oper mkQuant = overload {
                   mkQuant : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                              lock_Pron : {};
                              sp : ResEng.Case => Str} -> {s : Prelude.Bool => ParamX.Number => Str;
                                                           lock_Quant : {};
                                                           sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str}
                           = 0 ;
                 } ;
  oper mkQuantPl : {s : Prelude.Bool => ParamX.Number => Str;
                    lock_Quant : {};
                    sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : Prelude.Bool => ParamX.Number => Str;
                                                                                    isPl : {};
                                                                                    lock_Quant : {};
                                                                                    sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper mkQuantSg : {s : Prelude.Bool => ParamX.Number => Str;
                    lock_Quant : {};
                    sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} -> {s : Prelude.Bool => ParamX.Number => Str;
                                                                                    isSg : {};
                                                                                    lock_Quant : {};
                                                                                    sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper mkRCl = overload {
                 mkRCl : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                          lock_RP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                         aux : Str;
                                                                                                                                         fin : Str;
                                                                                                                                         inf : Str};
                                            ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                                            s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                        c : ResEng.NPCase;
                                                                        lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                       isRefl : Prelude.Bool;
                                                       lock_V : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                         c : ResEng.NPCase;
                                                                         lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                       isRefl : Prelude.Bool;
                                                       lock_V2 : {}}) -> (o : {s : ResEng.NPCase => Str;
                                                                               a : ResEng.Agr;
                                                                               lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                  c : ResEng.NPCase;
                                                                                                  lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                       c3 : Str; isRefl : Prelude.Bool;
                                                       lock_V3 : {}}) -> (o : {s : ResEng.NPCase => Str;
                                                                               a : ResEng.Agr;
                                                                               lock_NP : {}}) -> (i : {s : ResEng.NPCase => Str;
                                                                                                       a : ResEng.Agr;
                                                                                                       lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                                          c : ResEng.NPCase;
                                                                                                                          lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VVForm => Str; lock_VV : {};
                                                       typ : ResEng.VVType}) -> (vp : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                    aux : Str;
                                                                                                                                                                                    fin : Str;
                                                                                                                                                                                    inf : Str};
                                                                                       ad : Str;
                                                                                       inf : Str;
                                                                                       lock_VP : {};
                                                                                       prp : Str;
                                                                                       ptp : Str;
                                                                                       s2 : ResEng.Agr => Str}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                                    c : ResEng.NPCase;
                                                                                                                    lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                       isRefl : Prelude.Bool;
                                                       lock_VS : {}}) -> (p : {s : Str;
                                                                               lock_S : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                 c : ResEng.NPCase;
                                                                                                 lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                       isRefl : Prelude.Bool;
                                                       lock_VQ : {}}) -> (q : {s : ParamX.QForm => Str;
                                                                               lock_QS : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                  c : ResEng.NPCase;
                                                                                                  lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                       isRefl : Prelude.Bool;
                                                       lock_VA : {}}) -> (q : {s : ResEng.AForm => Str;
                                                                               lock_A : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                 c : ResEng.NPCase;
                                                                                                 lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                       isRefl : Prelude.Bool;
                                                       lock_VA : {}}) -> (q : {s : ResEng.Agr => Str;
                                                                               isPre : Prelude.Bool;
                                                                               lock_AP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                  c : ResEng.NPCase;
                                                                                                  lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                       isRefl : Prelude.Bool;
                                                       lock_V2A : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                                a : ResEng.Agr;
                                                                                lock_NP : {}}) -> (q : {s : ResEng.AForm => Str;
                                                                                                        lock_A : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                                          c : ResEng.NPCase;
                                                                                                                          lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                       isRefl : Prelude.Bool;
                                                       lock_V2A : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                                a : ResEng.Agr;
                                                                                lock_NP : {}}) -> (q : {s : ResEng.Agr => Str;
                                                                                                        isPre : Prelude.Bool;
                                                                                                        lock_AP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                                           c : ResEng.NPCase;
                                                                                                                           lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                       isRefl : Prelude.Bool;
                                                       lock_V2S : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                                a : ResEng.Agr;
                                                                                lock_NP : {}}) -> (q : {s : Str;
                                                                                                        lock_S : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                                          c : ResEng.NPCase;
                                                                                                                          lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                       isRefl : Prelude.Bool;
                                                       lock_V2Q : {}}) -> (n : {s : ResEng.NPCase => Str;
                                                                                a : ResEng.Agr;
                                                                                lock_NP : {}}) -> (q : {s : ParamX.QForm => Str;
                                                                                                        lock_QS : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                                           c : ResEng.NPCase;
                                                                                                                           lock_RCl : {}}
                       = 0 ;
                 mkRCl : (s : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (v : {s : ResEng.VForm => Str; c2 : Str;
                                                       c3 : Str; isRefl : Prelude.Bool;
                                                       lock_V2V : {};
                                                       typ : ResEng.VVType}) -> (n : {s : ResEng.NPCase => Str;
                                                                                      a : ResEng.Agr;
                                                                                      lock_NP : {}}) -> (q : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                                           aux : Str;
                                                                                                                                                                                                           fin : Str;
                                                                                                                                                                                                           inf : Str};
                                                                                                              ad : Str;
                                                                                                              inf : Str;
                                                                                                              lock_VP : {};
                                                                                                              prp : Str;
                                                                                                              ptp : Str;
                                                                                                              s2 : ResEng.Agr => Str}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                                                           c : ResEng.NPCase;
                                                                                                                                           lock_RCl : {}}
                       = 0 ;
                 mkRCl : (x : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (y : {s : ResEng.AForm => Str;
                                                       lock_A : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                         c : ResEng.NPCase;
                                                                         lock_RCl : {}}
                       = 0 ;
                 mkRCl : (x : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (y : {s : ResEng.AForm => Str;
                                                       lock_A : {}}) -> (z : {s : ResEng.NPCase => Str;
                                                                              a : ResEng.Agr;
                                                                              lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                 c : ResEng.NPCase;
                                                                                                 lock_RCl : {}}
                       = 0 ;
                 mkRCl : (x : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (y : {s : ResEng.AForm => Str; c2 : Str;
                                                       lock_A2 : {}}) -> (z : {s : ResEng.NPCase => Str;
                                                                               a : ResEng.Agr;
                                                                               lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                  c : ResEng.NPCase;
                                                                                                  lock_RCl : {}}
                       = 0 ;
                 mkRCl : (x : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (y : {s : ResEng.Agr => Str;
                                                       isPre : Prelude.Bool;
                                                       lock_AP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                          c : ResEng.NPCase;
                                                                          lock_RCl : {}}
                       = 0 ;
                 mkRCl : (x : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (y : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                       lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                          c : ResEng.NPCase;
                                                                          lock_RCl : {}}
                       = 0 ;
                 mkRCl : (x : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (y : {s : ParamX.Number => ResEng.Case => Str;
                                                       g : ResEng.Gender;
                                                       lock_N : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                         c : ResEng.NPCase;
                                                                         lock_RCl : {}}
                       = 0 ;
                 mkRCl : (x : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (y : {s : ParamX.Number => ResEng.Case => Str;
                                                       g : ResEng.Gender;
                                                       lock_CN : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                          c : ResEng.NPCase;
                                                                          lock_RCl : {}}
                       = 0 ;
                 mkRCl : (x : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                               lock_RP : {}}) -> (y : {s : Str;
                                                       lock_Adv : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                           c : ResEng.NPCase;
                                                                           lock_RCl : {}}
                       = 0 ;
                 mkRCl : (ip : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                                lock_RP : {}}) -> (np : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                         lock_NP : {}}) -> (v : {s : ResEng.VForm => Str;
                                                                                 c2 : Str;
                                                                                 isRefl : Prelude.Bool;
                                                                                 lock_V2 : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                    c : ResEng.NPCase;
                                                                                                    lock_RCl : {}}
                       = 0 ;
                 mkRCl : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                          lock_RP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                            c2 : Str;
                                            lock_ClSlash : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                   c : ResEng.NPCase; lock_RCl : {}}
                       = 0 ;
                 mkRCl : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                          lock_Cl : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                            c : ResEng.NPCase; lock_RCl : {}}
                       = 0 ;
               } ;
  oper mkRP : {s : Str; lock_Prep : {}} -> {s : ResEng.NPCase => Str;
                                            a : ResEng.Agr;
                                            lock_NP : {}} -> {s : ResEng.RCase => Str;
                                                              a : ResEng.RAgr;
                                                              lock_RP : {}} -> {s : ResEng.RCase => Str;
                                                                                a : ResEng.RAgr;
                                                                                lock_RP : {}} ;
  oper mkRS = overload {
                mkRS : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                        c : ResEng.NPCase; lock_RCl : {}} -> {s : ResEng.Agr => Str;
                                                              c : ResEng.NPCase; lock_RS : {}}
                     = 0 ;
                mkRS : (t : {s : Str; lock_Tense : {};
                             t : ParamX.Tense}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                    c : ResEng.NPCase;
                                                    lock_RCl : {}} -> {s : ResEng.Agr => Str;
                                                                       c : ResEng.NPCase;
                                                                       lock_RS : {}}
                     = 0 ;
                mkRS : (a : {s : Str; a : ParamX.Anteriority;
                             lock_Ant : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                 c : ResEng.NPCase;
                                                 lock_RCl : {}} -> {s : ResEng.Agr => Str;
                                                                    c : ResEng.NPCase; lock_RS : {}}
                     = 0 ;
                mkRS : (p : {s : Str; lock_Pol : {};
                             p : ResEng.CPolarity}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                        c : ResEng.NPCase;
                                                        lock_RCl : {}} -> {s : ResEng.Agr => Str;
                                                                           c : ResEng.NPCase;
                                                                           lock_RS : {}}
                     = 0 ;
                mkRS : (t : {s : Str; lock_Tense : {};
                             t : ParamX.Tense}) -> (a : {s : Str; a : ParamX.Anteriority;
                                                         lock_Ant : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                             c : ResEng.NPCase;
                                                                             lock_RCl : {}} -> {s : ResEng.Agr => Str;
                                                                                                c : ResEng.NPCase;
                                                                                                lock_RS : {}}
                     = 0 ;
                mkRS : (t : {s : Str; lock_Tense : {};
                             t : ParamX.Tense}) -> (p : {s : Str; lock_Pol : {};
                                                         p : ResEng.CPolarity}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                    c : ResEng.NPCase;
                                                                                    lock_RCl : {}} -> {s : ResEng.Agr => Str;
                                                                                                       c : ResEng.NPCase;
                                                                                                       lock_RS : {}}
                     = 0 ;
                mkRS : (a : {s : Str; a : ParamX.Anteriority;
                             lock_Ant : {}}) -> (p : {s : Str; lock_Pol : {};
                                                      p : ResEng.CPolarity}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                 c : ResEng.NPCase;
                                                                                 lock_RCl : {}} -> {s : ResEng.Agr => Str;
                                                                                                    c : ResEng.NPCase;
                                                                                                    lock_RS : {}}
                     = 0 ;
                mkRS : {s : Str; lock_Tense : {}; t : ParamX.Tense} -> {s : Str;
                                                                        a : ParamX.Anteriority;
                                                                        lock_Ant : {}} -> {s : Str;
                                                                                           lock_Pol : {};
                                                                                           p : ResEng.CPolarity} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                                                                     c : ResEng.NPCase;
                                                                                                                     lock_RCl : {}} -> {s : ResEng.Agr => Str;
                                                                                                                                        c : ResEng.NPCase;
                                                                                                                                        lock_RS : {}}
                     = 0 ;
                mkRS : {s : Str; a : ParamX.Anteriority; lock_Temp : {};
                        t : ParamX.Tense} -> {s : Str; lock_Pol : {};
                                              p : ResEng.CPolarity} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                                                                        c : ResEng.NPCase;
                                                                        lock_RCl : {}} -> {s : ResEng.Agr => Str;
                                                                                           c : ResEng.NPCase;
                                                                                           lock_RS : {}}
                     = 0 ;
                mkRS : (c : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                             s2 : Str}) -> (x : {s : ResEng.Agr => Str; c : ResEng.NPCase;
                                                 lock_RS : {}}) -> (y : {s : ResEng.Agr => Str;
                                                                         c : ResEng.NPCase;
                                                                         lock_RS : {}}) -> {s : ResEng.Agr => Str;
                                                                                            c : ResEng.NPCase;
                                                                                            lock_RS : {}}
                     = 0 ;
                mkRS : (c : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                             s2 : Str}) -> (xy : {c : ResEng.NPCase; lock_ListRS : {};
                                                  s1 : ResEng.Agr => Str;
                                                  s2 : ResEng.Agr => Str}) -> {s : ResEng.Agr => Str;
                                                                               c : ResEng.NPCase;
                                                                               lock_RS : {}}
                     = 0 ;
              } ;
  oper mkS = overload {
               mkS : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                      lock_Cl : {}} -> {s : Str; lock_S : {}}
                   = 0 ;
               mkS : (t : {s : Str; lock_Tense : {};
                           t : ParamX.Tense}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                  lock_Cl : {}} -> {s : Str; lock_S : {}}
                   = 0 ;
               mkS : (a : {s : Str; a : ParamX.Anteriority;
                           lock_Ant : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                               lock_Cl : {}} -> {s : Str; lock_S : {}}
                   = 0 ;
               mkS : (p : {s : Str; lock_Pol : {};
                           p : ResEng.CPolarity}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                      lock_Cl : {}} -> {s : Str; lock_S : {}}
                   = 0 ;
               mkS : (t : {s : Str; lock_Tense : {};
                           t : ParamX.Tense}) -> (a : {s : Str; a : ParamX.Anteriority;
                                                       lock_Ant : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                           lock_Cl : {}} -> {s : Str;
                                                                                             lock_S : {}}
                   = 0 ;
               mkS : (t : {s : Str; lock_Tense : {};
                           t : ParamX.Tense}) -> (p : {s : Str; lock_Pol : {};
                                                       p : ResEng.CPolarity}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                  lock_Cl : {}} -> {s : Str;
                                                                                                    lock_S : {}}
                   = 0 ;
               mkS : (a : {s : Str; a : ParamX.Anteriority;
                           lock_Ant : {}}) -> (p : {s : Str; lock_Pol : {};
                                                    p : ResEng.CPolarity}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                               lock_Cl : {}} -> {s : Str;
                                                                                                 lock_S : {}}
                   = 0 ;
               mkS : (t : {s : Str; lock_Tense : {};
                           t : ParamX.Tense}) -> (a : {s : Str; a : ParamX.Anteriority;
                                                       lock_Ant : {}}) -> {s : Str; lock_Pol : {};
                                                                           p : ResEng.CPolarity} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                                     lock_Cl : {}} -> {s : Str;
                                                                                                                       lock_S : {}}
                   = 0 ;
               mkS : {s : Str; a : ParamX.Anteriority; lock_Temp : {};
                      t : ParamX.Tense} -> {s : Str; lock_Pol : {};
                                            p : ResEng.CPolarity} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                      lock_Cl : {}} -> {s : Str;
                                                                                        lock_S : {}}
                   = 0 ;
               mkS : (c : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                           s2 : Str}) -> (x : {s : Str; lock_S : {}}) -> (y : {s : Str;
                                                                               lock_S : {}}) -> {s : Str;
                                                                                                 lock_S : {}}
                   = 0 ;
               mkS : (c : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                           s2 : Str}) -> (xy : {lock_ListS : {}; s1 : Str;
                                                s2 : Str}) -> {s : Str; lock_S : {}}
                   = 0 ;
               mkS : {s : Str; lock_Adv : {}} -> {s : Str;
                                                  lock_S : {}} -> {s : Str; lock_S : {}}
                   = 0 ;
             } ;
  oper mkSC = overload {
                mkSC : {s : Str; lock_S : {}} -> {s : Str; lock_SC : {}}
                     = 0 ;
                mkSC : {s : ParamX.QForm => Str; lock_QS : {}} -> {s : Str;
                                                                   lock_SC : {}}
                     = 0 ;
                mkSC : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                     aux : Str;
                                                                                                                     fin : Str;
                                                                                                                     inf : Str};
                        ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                        s2 : ResEng.Agr => Str} -> {s : Str; lock_SC : {}}
                     = 0 ;
              } ;
  oper mkSSlash = overload {
                    mkSSlash : {s : Str; a : ParamX.Anteriority; lock_Temp : {};
                                t : ParamX.Tense} -> {s : Str; lock_Pol : {};
                                                      p : ResEng.CPolarity} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                                                                c2 : Str;
                                                                                lock_ClSlash : {}} -> {s : Str;
                                                                                                       c2 : Str;
                                                                                                       lock_SSlash : {}}
                             = 0 ;
                  } ;
  oper mkSub100 = overload {
                    mkSub100 : (n : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                          lock_Digit : {}};
                                     isOne : Predef.PBool;
                                     n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                          lock_Sub10 : {};
                                          n : ParamX.Number}}) -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                                   lock_Sub100 : {};
                                                                   n : ParamX.Number}
                             = 0 ;
                    mkSub100 : (m : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                          lock_Digit : {}};
                                     isOne : Predef.PBool;
                                     n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                          lock_Sub10 : {};
                                          n : ParamX.Number}}) -> (n : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                                                             lock_Digit : {}};
                                                                        isOne : Predef.PBool;
                                                                        n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                                                             lock_Sub10 : {};
                                                                             n : ParamX.Number}}) -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                                                                      lock_Sub100 : {};
                                                                                                      n : ParamX.Number}
                             = 0 ;
                  } ;
  oper mkSub1000 = overload {
                     mkSub1000 : {s : ResEng.CardOrd => ResEng.Case => Str;
                                  lock_Sub100 : {};
                                  n : ParamX.Number} -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                         lock_Sub1000 : {}; n : ParamX.Number}
                               = 0 ;
                     mkSub1000 : (n : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                            lock_Digit : {}};
                                       isOne : Predef.PBool;
                                       n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                            lock_Sub10 : {};
                                            n : ParamX.Number}}) -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                                     lock_Sub1000 : {};
                                                                     n : ParamX.Number}
                               = 0 ;
                     mkSub1000 : (m : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                            lock_Digit : {}};
                                       isOne : Predef.PBool;
                                       n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                                            lock_Sub10 : {};
                                            n : ParamX.Number}}) -> (n : {s : ResEng.CardOrd => ResEng.Case => Str;
                                                                          lock_Sub100 : {};
                                                                          n : ParamX.Number}) -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                                                                  lock_Sub1000 : {};
                                                                                                  n : ParamX.Number}
                               = 0 ;
                   } ;
  oper mkTemp : {s : Str; lock_Tense : {};
                 t : ParamX.Tense} -> {s : Str; a : ParamX.Anteriority;
                                       lock_Ant : {}} -> {s : Str; a : ParamX.Anteriority;
                                                          lock_Temp : {}; t : ParamX.Tense} ;
  oper mkText = overload {
                  mkText : (phr : {s : Str;
                                   lock_Phr : {}}) -> (punct : ConstructorsEng.Punct) -> (text : {s : Str;
                                                                                                  lock_Text : {}}) -> {s : Str;
                                                                                                                       lock_Text : {}}
                         = 0 ;
                  mkText : (x : {s : Str; lock_Phr : {}}) -> (t : {s : Str;
                                                                   lock_Text : {}}) -> {s : Str;
                                                                                        lock_Text : {}}
                         = 0 ;
                  mkText : (phr : {s : Str;
                                   lock_Phr : {}}) -> (punct : ConstructorsEng.Punct) -> {s : Str;
                                                                                          lock_Text : {}}
                         = 0 ;
                  mkText : (x : {s : Str; lock_Phr : {}}) -> {s : Str;
                                                              lock_Text : {}}
                         = 0 ;
                  mkText : (u : {s : Str; lock_Utt : {}}) -> {s : Str;
                                                              lock_Text : {}}
                         = 0 ;
                  mkText : (s : {s : Str; lock_S : {}}) -> {s : Str; lock_Text : {}}
                         = 0 ;
                  mkText : (c : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                                 lock_Cl : {}}) -> {s : Str; lock_Text : {}}
                         = 0 ;
                  mkText : (q : {s : ParamX.QForm => Str; lock_QS : {}}) -> {s : Str;
                                                                             lock_Text : {}}
                         = 0 ;
                  mkText : (p : {s : Str; lock_Pol : {};
                                 p : ResEng.CPolarity}) -> (i : {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                                                                 lock_Imp : {}}) -> {s : Str;
                                                                                     lock_Text : {}}
                         = 0 ;
                  mkText : (i : {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                                 lock_Imp : {}}) -> {s : Str; lock_Text : {}}
                         = 0 ;
                  mkText : (t : {s : Str; lock_Text : {}}) -> (u : {s : Str;
                                                                    lock_Text : {}}) -> {s : Str;
                                                                                         lock_Text : {}}
                         = 0 ;
                } ;
  oper mkUtt = overload {
                 mkUtt : {s : Str; lock_S : {}} -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : (c : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                               lock_Cl : {}}) -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : ParamX.QForm => Str; lock_QS : {}} -> {s : Str;
                                                                     lock_Utt : {}}
                       = 0 ;
                 mkUtt : (c : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str;
                               lock_QCl : {}}) -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : ConstructorsEng.ImpForm -> {s : Str; lock_Pol : {};
                                                     p : ResEng.CPolarity} -> {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                                                                               lock_Imp : {}} -> {s : Str;
                                                                                                  lock_Utt : {}}
                       = 0 ;
                 mkUtt : (f : ConstructorsEng.ImpForm) -> {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                                                           lock_Imp : {}} -> {s : Str;
                                                                              lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : Str; lock_Pol : {};
                          p : ResEng.CPolarity} -> {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                                                    lock_Imp : {}} -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                          lock_Imp : {}} -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : ResEng.NPCase => Str; lock_IP : {};
                          n : ParamX.Number} -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : Str; lock_IAdv : {}} -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                          lock_NP : {}} -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : Str; lock_Adv : {}} -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                       aux : Str;
                                                                                                                       fin : Str;
                                                                                                                       inf : Str};
                          ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                          s2 : ResEng.Agr => Str} -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : ParamX.Number => ResEng.Case => Str;
                          g : ResEng.Gender; lock_CN : {}} -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                          lock_AP : {}} -> {s : Str; lock_Utt : {}}
                       = 0 ;
                 mkUtt : {s : ResEng.Case => Str; lock_Card : {};
                          n : ParamX.Number} -> {s : Str; lock_Utt : {}}
                       = 0 ;
               } ;
  oper mkUttImp : ConstructorsEng.ImpForm -> {s : Str; lock_Pol : {};
                                              p : ResEng.CPolarity} -> {s : ResEng.CPolarity => ParamX.ImpForm => Str;
                                                                        lock_Imp : {}} -> {s : Str;
                                                                                           lock_Utt : {}} ;
  oper mkVP = overload {
                mkVP : {s : ResEng.VForm => Str; isRefl : Prelude.Bool;
                        lock_V : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                      aux : Str;
                                                                                                                                      fin : Str;
                                                                                                                                      inf : Str};
                                         ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                                         s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ResEng.VForm => Str; c2 : Str; isRefl : Prelude.Bool;
                        lock_V2 : {}} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                          lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                         aux : Str;
                                                                                                                                                         fin : Str;
                                                                                                                                                         inf : Str};
                                                            ad : Str; inf : Str; lock_VP : {};
                                                            prp : Str; ptp : Str;
                                                            s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ResEng.VForm => Str; c2 : Str; c3 : Str;
                        isRefl : Prelude.Bool; lock_V3 : {}} -> {s : ResEng.NPCase => Str;
                                                                 a : ResEng.Agr;
                                                                 lock_NP : {}} -> {s : ResEng.NPCase => Str;
                                                                                   a : ResEng.Agr;
                                                                                   lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                                  aux : Str;
                                                                                                                                                                                                  fin : Str;
                                                                                                                                                                                                  inf : Str};
                                                                                                     ad : Str;
                                                                                                     inf : Str;
                                                                                                     lock_VP : {};
                                                                                                     prp : Str;
                                                                                                     ptp : Str;
                                                                                                     s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ResEng.VVForm => Str; lock_VV : {};
                        typ : ResEng.VVType} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                              aux : Str;
                                                                                                                                              fin : Str;
                                                                                                                                              inf : Str};
                                                 ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                 ptp : Str;
                                                 s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                          aux : Str;
                                                                                                                                                                          fin : Str;
                                                                                                                                                                          inf : Str};
                                                                             ad : Str; inf : Str;
                                                                             lock_VP : {};
                                                                             prp : Str; ptp : Str;
                                                                             s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ResEng.VForm => Str; isRefl : Prelude.Bool;
                        lock_VS : {}} -> {s : Str;
                                          lock_S : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                        aux : Str;
                                                                                                                                                        fin : Str;
                                                                                                                                                        inf : Str};
                                                           ad : Str; inf : Str; lock_VP : {};
                                                           prp : Str; ptp : Str;
                                                           s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ResEng.VForm => Str; isRefl : Prelude.Bool;
                        lock_VQ : {}} -> {s : ParamX.QForm => Str;
                                          lock_QS : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                         aux : Str;
                                                                                                                                                         fin : Str;
                                                                                                                                                         inf : Str};
                                                            ad : Str; inf : Str; lock_VP : {};
                                                            prp : Str; ptp : Str;
                                                            s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ResEng.VForm => Str; isRefl : Prelude.Bool;
                        lock_VA : {}} -> {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                          lock_AP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                         aux : Str;
                                                                                                                                                         fin : Str;
                                                                                                                                                         inf : Str};
                                                            ad : Str; inf : Str; lock_VP : {};
                                                            prp : Str; ptp : Str;
                                                            s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ResEng.VForm => Str; c2 : Str; isRefl : Prelude.Bool;
                        lock_V2A : {}} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                           lock_NP : {}} -> {s : ResEng.Agr => Str;
                                                             isPre : Prelude.Bool;
                                                             lock_AP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                            aux : Str;
                                                                                                                                                                            fin : Str;
                                                                                                                                                                            inf : Str};
                                                                               ad : Str; inf : Str;
                                                                               lock_VP : {};
                                                                               prp : Str; ptp : Str;
                                                                               s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (v : {s : ResEng.VForm => Str; c2 : Str;
                             isRefl : Prelude.Bool;
                             lock_V2S : {}}) -> (n : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                      lock_NP : {}}) -> (q : {s : Str;
                                                                              lock_S : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                             aux : Str;
                                                                                                                                                                                             fin : Str;
                                                                                                                                                                                             inf : Str};
                                                                                                ad : Str;
                                                                                                inf : Str;
                                                                                                lock_VP : {};
                                                                                                prp : Str;
                                                                                                ptp : Str;
                                                                                                s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (v : {s : ResEng.VForm => Str; c2 : Str;
                             isRefl : Prelude.Bool;
                             lock_V2Q : {}}) -> (n : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                      lock_NP : {}}) -> (q : {s : ParamX.QForm => Str;
                                                                              lock_QS : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                              aux : Str;
                                                                                                                                                                                              fin : Str;
                                                                                                                                                                                              inf : Str};
                                                                                                 ad : Str;
                                                                                                 inf : Str;
                                                                                                 lock_VP : {};
                                                                                                 prp : Str;
                                                                                                 ptp : Str;
                                                                                                 s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (v : {s : ResEng.VForm => Str; c2 : Str; c3 : Str;
                             isRefl : Prelude.Bool; lock_V2V : {};
                             typ : ResEng.VVType}) -> (n : {s : ResEng.NPCase => Str;
                                                            a : ResEng.Agr;
                                                            lock_NP : {}}) -> (q : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                 aux : Str;
                                                                                                                                                                                 fin : Str;
                                                                                                                                                                                 inf : Str};
                                                                                    ad : Str;
                                                                                    inf : Str;
                                                                                    lock_VP : {};
                                                                                    prp : Str;
                                                                                    ptp : Str;
                                                                                    s2 : ResEng.Agr => Str}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                                              aux : Str;
                                                                                                                                                                                                              fin : Str;
                                                                                                                                                                                                              inf : Str};
                                                                                                                 ad : Str;
                                                                                                                 inf : Str;
                                                                                                                 lock_VP : {};
                                                                                                                 prp : Str;
                                                                                                                 ptp : Str;
                                                                                                                 s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (a : {s : ResEng.AForm => Str;
                             lock_A : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                            aux : Str;
                                                                                                                                            fin : Str;
                                                                                                                                            inf : Str};
                                               ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                               ptp : Str; s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (y : {s : ResEng.AForm => Str;
                             lock_A : {}}) -> (z : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                    lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                    aux : Str;
                                                                                                                                                                    fin : Str;
                                                                                                                                                                    inf : Str};
                                                                       ad : Str; inf : Str;
                                                                       lock_VP : {}; prp : Str;
                                                                       ptp : Str;
                                                                       s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (y : {s : ResEng.AForm => Str; c2 : Str;
                             lock_A2 : {}}) -> (z : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                     lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                     aux : Str;
                                                                                                                                                                     fin : Str;
                                                                                                                                                                     inf : Str};
                                                                        ad : Str; inf : Str;
                                                                        lock_VP : {}; prp : Str;
                                                                        ptp : Str;
                                                                        s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (a : {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                             lock_AP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                             aux : Str;
                                                                                                                                             fin : Str;
                                                                                                                                             inf : Str};
                                                ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                ptp : Str; s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (y : {s : ParamX.Number => ResEng.Case => Str;
                             g : ResEng.Gender;
                             lock_N : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                            aux : Str;
                                                                                                                                            fin : Str;
                                                                                                                                            inf : Str};
                                               ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                               ptp : Str; s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (y : {s : ParamX.Number => ResEng.Case => Str;
                             g : ResEng.Gender;
                             lock_CN : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                             aux : Str;
                                                                                                                                             fin : Str;
                                                                                                                                             inf : Str};
                                                ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                ptp : Str; s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (a : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                             lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                             aux : Str;
                                                                                                                                             fin : Str;
                                                                                                                                             inf : Str};
                                                ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                ptp : Str; s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : (a : {s : Str;
                             lock_Adv : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                              aux : Str;
                                                                                                                                              fin : Str;
                                                                                                                                              inf : Str};
                                                 ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                 ptp : Str; s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                     aux : Str;
                                                                                                                     fin : Str;
                                                                                                                     inf : Str};
                        ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                        s2 : ResEng.Agr => Str} -> {s : Str;
                                                    lock_Adv : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                    aux : Str;
                                                                                                                                                                    fin : Str;
                                                                                                                                                                    inf : Str};
                                                                       ad : Str; inf : Str;
                                                                       lock_VP : {}; prp : Str;
                                                                       ptp : Str;
                                                                       s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : Str;
                        lock_AdV : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                        aux : Str;
                                                                                                                                        fin : Str;
                                                                                                                                        inf : Str};
                                           ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                                           s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                    aux : Str;
                                                                                                                                                                    fin : Str;
                                                                                                                                                                    inf : Str};
                                                                       ad : Str; inf : Str;
                                                                       lock_VP : {}; prp : Str;
                                                                       ptp : Str;
                                                                       s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                     aux : Str;
                                                                                                                     fin : Str;
                                                                                                                     inf : Str};
                        ad : Str; c2 : Str; inf : Str; lock_VPSlash : {}; prp : Str;
                        ptp : Str; s2 : ResEng.Agr => Str} -> {s : ResEng.NPCase => Str;
                                                               a : ResEng.Agr;
                                                               lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                              aux : Str;
                                                                                                                                                                              fin : Str;
                                                                                                                                                                              inf : Str};
                                                                                 ad : Str;
                                                                                 inf : Str;
                                                                                 lock_VP : {};
                                                                                 prp : Str;
                                                                                 ptp : Str;
                                                                                 s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                     aux : Str;
                                                                                                                     fin : Str;
                                                                                                                     inf : Str};
                        ad : Str; c2 : Str; inf : Str; lock_VPSlash : {}; prp : Str;
                        ptp : Str;
                        s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                 aux : Str;
                                                                                                                                                 fin : Str;
                                                                                                                                                 inf : Str};
                                                    ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                    ptp : Str; s2 : ResEng.Agr => Str}
                     = 0 ;
                mkVP : {s : ResEng.Agr => Str;
                        lock_Comp : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                         aux : Str;
                                                                                                                                         fin : Str;
                                                                                                                                         inf : Str};
                                            ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                                            s2 : ResEng.Agr => Str}
                     = 0 ;
              } ;
  oper mkVPSlash = overload {
                     mkVPSlash : {s : ResEng.VForm => Str; c2 : Str;
                                  isRefl : Prelude.Bool;
                                  lock_V2 : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                 aux : Str;
                                                                                                                                                 fin : Str;
                                                                                                                                                 inf : Str};
                                                    ad : Str; c2 : Str; inf : Str;
                                                    lock_VPSlash : {}; prp : Str; ptp : Str;
                                                    s2 : ResEng.Agr => Str}
                               = 0 ;
                     mkVPSlash : {s : ResEng.VForm => Str; c2 : Str; c3 : Str;
                                  isRefl : Prelude.Bool; lock_V3 : {}} -> {s : ResEng.NPCase => Str;
                                                                           a : ResEng.Agr;
                                                                           lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                          aux : Str;
                                                                                                                                                                                          fin : Str;
                                                                                                                                                                                          inf : Str};
                                                                                             ad : Str;
                                                                                             c2 : Str;
                                                                                             inf : Str;
                                                                                             lock_VPSlash : {};
                                                                                             prp : Str;
                                                                                             ptp : Str;
                                                                                             s2 : ResEng.Agr => Str}
                               = 0 ;
                     mkVPSlash : {s : ResEng.VForm => Str; c2 : Str;
                                  isRefl : Prelude.Bool; lock_V2A : {}} -> {s : ResEng.Agr => Str;
                                                                            isPre : Prelude.Bool;
                                                                            lock_AP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                           aux : Str;
                                                                                                                                                                                           fin : Str;
                                                                                                                                                                                           inf : Str};
                                                                                              ad : Str;
                                                                                              c2 : Str;
                                                                                              inf : Str;
                                                                                              lock_VPSlash : {};
                                                                                              prp : Str;
                                                                                              ptp : Str;
                                                                                              s2 : ResEng.Agr => Str}
                               = 0 ;
                     mkVPSlash : {s : ResEng.VForm => Str; c2 : Str;
                                  isRefl : Prelude.Bool; lock_V2Q : {}} -> {s : ParamX.QForm => Str;
                                                                            lock_QS : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                           aux : Str;
                                                                                                                                                                                           fin : Str;
                                                                                                                                                                                           inf : Str};
                                                                                              ad : Str;
                                                                                              c2 : Str;
                                                                                              inf : Str;
                                                                                              lock_VPSlash : {};
                                                                                              prp : Str;
                                                                                              ptp : Str;
                                                                                              s2 : ResEng.Agr => Str}
                               = 0 ;
                     mkVPSlash : {s : ResEng.VForm => Str; c2 : Str;
                                  isRefl : Prelude.Bool; lock_V2S : {}} -> {s : Str;
                                                                            lock_S : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                          aux : Str;
                                                                                                                                                                                          fin : Str;
                                                                                                                                                                                          inf : Str};
                                                                                             ad : Str;
                                                                                             c2 : Str;
                                                                                             inf : Str;
                                                                                             lock_VPSlash : {};
                                                                                             prp : Str;
                                                                                             ptp : Str;
                                                                                             s2 : ResEng.Agr => Str}
                               = 0 ;
                     mkVPSlash : {s : ResEng.VForm => Str; c2 : Str; c3 : Str;
                                  isRefl : Prelude.Bool; lock_V2V : {};
                                  typ : ResEng.VVType} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                        aux : Str;
                                                                                                                                                        fin : Str;
                                                                                                                                                        inf : Str};
                                                           ad : Str; inf : Str; lock_VP : {};
                                                           prp : Str; ptp : Str;
                                                           s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                    aux : Str;
                                                                                                                                                                                    fin : Str;
                                                                                                                                                                                    inf : Str};
                                                                                       ad : Str;
                                                                                       c2 : Str;
                                                                                       inf : Str;
                                                                                       lock_VPSlash : {};
                                                                                       prp : Str;
                                                                                       ptp : Str;
                                                                                       s2 : ResEng.Agr => Str}
                               = 0 ;
                     mkVPSlash : {s : ResEng.VVForm => Str; lock_VV : {};
                                  typ : ResEng.VVType} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                        aux : Str;
                                                                                                                                                        fin : Str;
                                                                                                                                                        inf : Str};
                                                           ad : Str; c2 : Str; inf : Str;
                                                           lock_VPSlash : {}; prp : Str; ptp : Str;
                                                           s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                    aux : Str;
                                                                                                                                                                                    fin : Str;
                                                                                                                                                                                    inf : Str};
                                                                                       ad : Str;
                                                                                       c2 : Str;
                                                                                       inf : Str;
                                                                                       lock_VPSlash : {};
                                                                                       prp : Str;
                                                                                       ptp : Str;
                                                                                       s2 : ResEng.Agr => Str}
                               = 0 ;
                     mkVPSlash : {s : ResEng.VForm => Str; c2 : Str; c3 : Str;
                                  isRefl : Prelude.Bool; lock_V2V : {};
                                  typ : ResEng.VVType} -> {s : ResEng.NPCase => Str; a : ResEng.Agr;
                                                           lock_NP : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                          aux : Str;
                                                                                                                                                                          fin : Str;
                                                                                                                                                                          inf : Str};
                                                                             ad : Str; c2 : Str;
                                                                             inf : Str;
                                                                             lock_VPSlash : {};
                                                                             prp : Str; ptp : Str;
                                                                             s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                                      aux : Str;
                                                                                                                                                                                                      fin : Str;
                                                                                                                                                                                                      inf : Str};
                                                                                                         ad : Str;
                                                                                                         c2 : Str;
                                                                                                         inf : Str;
                                                                                                         lock_VPSlash : {};
                                                                                                         prp : Str;
                                                                                                         ptp : Str;
                                                                                                         s2 : ResEng.Agr => Str}
                               = 0 ;
                   } ;
  oper mkVoc : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                lock_NP : {}} -> {s : Str; lock_Voc : {}} ;
  oper n0_Dig : {s : ResEng.CardOrd => ResEng.Case => Str;
                 lock_Dig : {}; n : ParamX.Number} ;
  oper n1000_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                       lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n1000_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                        lock_Numeral : {}; n : ParamX.Number} ;
  oper n100_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                      lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n100_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                       lock_Numeral : {}; n : ParamX.Number} ;
  oper n10_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n10_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                      lock_Numeral : {}; n : ParamX.Number} ;
  oper n1_Dig : {s : ResEng.CardOrd => ResEng.Case => Str;
                 lock_Dig : {}; n : ParamX.Number} ;
  oper n1_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                    lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n1_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Numeral : {}; n : ParamX.Number} ;
  oper n1_Unit : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Digit : {}};
                  isOne : Predef.PBool;
                  n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Sub10 : {}; n : ParamX.Number}} ;
  oper n20_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n20_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                      lock_Numeral : {}; n : ParamX.Number} ;
  oper n2_Dig : {s : ResEng.CardOrd => ResEng.Case => Str;
                 lock_Dig : {}; n : ParamX.Number} ;
  oper n2_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                    lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n2_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Numeral : {}; n : ParamX.Number} ;
  oper n2_Unit : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Digit : {}};
                  isOne : Predef.PBool;
                  n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Sub10 : {}; n : ParamX.Number}} ;
  oper n3_Dig : {s : ResEng.CardOrd => ResEng.Case => Str;
                 lock_Dig : {}; n : ParamX.Number} ;
  oper n3_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                    lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n3_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Numeral : {}; n : ParamX.Number} ;
  oper n3_Unit : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Digit : {}};
                  isOne : Predef.PBool;
                  n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Sub10 : {}; n : ParamX.Number}} ;
  oper n4_Dig : {s : ResEng.CardOrd => ResEng.Case => Str;
                 lock_Dig : {}; n : ParamX.Number} ;
  oper n4_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                    lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n4_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Numeral : {}; n : ParamX.Number} ;
  oper n4_Unit : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Digit : {}};
                  isOne : Predef.PBool;
                  n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Sub10 : {}; n : ParamX.Number}} ;
  oper n5_Dig : {s : ResEng.CardOrd => ResEng.Case => Str;
                 lock_Dig : {}; n : ParamX.Number} ;
  oper n5_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                    lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n5_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Numeral : {}; n : ParamX.Number} ;
  oper n5_Unit : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Digit : {}};
                  isOne : Predef.PBool;
                  n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Sub10 : {}; n : ParamX.Number}} ;
  oper n6_Dig : {s : ResEng.CardOrd => ResEng.Case => Str;
                 lock_Dig : {}; n : ParamX.Number} ;
  oper n6_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                    lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n6_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Numeral : {}; n : ParamX.Number} ;
  oper n6_Unit : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Digit : {}};
                  isOne : Predef.PBool;
                  n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Sub10 : {}; n : ParamX.Number}} ;
  oper n7_Dig : {s : ResEng.CardOrd => ResEng.Case => Str;
                 lock_Dig : {}; n : ParamX.Number} ;
  oper n7_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                    lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n7_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Numeral : {}; n : ParamX.Number} ;
  oper n7_Unit : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Digit : {}};
                  isOne : Predef.PBool;
                  n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Sub10 : {}; n : ParamX.Number}} ;
  oper n8_Dig : {s : ResEng.CardOrd => ResEng.Case => Str;
                 lock_Dig : {}; n : ParamX.Number} ;
  oper n8_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                    lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n8_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Numeral : {}; n : ParamX.Number} ;
  oper n8_Unit : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Digit : {}};
                  isOne : Predef.PBool;
                  n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Sub10 : {}; n : ParamX.Number}} ;
  oper n9_Dig : {s : ResEng.CardOrd => ResEng.Case => Str;
                 lock_Dig : {}; n : ParamX.Number} ;
  oper n9_Digits : {s : ResEng.CardOrd => ResEng.Case => Str;
                    lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper n9_Numeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                     lock_Numeral : {}; n : ParamX.Number} ;
  oper n9_Unit : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Digit : {}};
                  isOne : Predef.PBool;
                  n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                       lock_Sub10 : {}; n : ParamX.Number}} ;
  oper negativePol : {s : Str; lock_Pol : {}; p : ResEng.CPolarity} ;
  oper noPConj : {s : Str; lock_PConj : {}} ;
  oper noVoc : {s : Str; lock_Voc : {}} ;
  oper passiveVP = overload {
                     passiveVP : {s : ResEng.VForm => Str; c2 : Str;
                                  isRefl : Prelude.Bool;
                                  lock_V2 : {}} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                 aux : Str;
                                                                                                                                                 fin : Str;
                                                                                                                                                 inf : Str};
                                                    ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                    ptp : Str; s2 : ResEng.Agr => Str}
                               = 0 ;
                     passiveVP : (v : {s : ResEng.VForm => Str; c2 : Str;
                                       isRefl : Prelude.Bool;
                                       lock_V2 : {}}) -> (np : {s : ResEng.NPCase => Str;
                                                                a : ResEng.Agr;
                                                                lock_NP : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                                                aux : Str;
                                                                                                                                                                                fin : Str;
                                                                                                                                                                                inf : Str};
                                                                                   ad : Str;
                                                                                   inf : Str;
                                                                                   lock_VP : {};
                                                                                   prp : Str;
                                                                                   ptp : Str;
                                                                                   s2 : ResEng.Agr => Str}
                               = 0 ;
                   } ;
  oper plNum : {s : ResEng.Case => Str; hasCard : Prelude.Bool;
                lock_Num : {}; n : ParamX.Number} ;
  oper pluralImpForm : ConstructorsEng.ImpForm ;
  oper pluralNum : {s : ResEng.Case => Str; hasCard : Prelude.Bool;
                    lock_Num : {}; n : ParamX.Number} ;
  oper politeImpForm : ConstructorsEng.ImpForm ;
  oper positivePol : {s : Str; lock_Pol : {}; p : ResEng.CPolarity} ;
  oper presentTense : {s : Str; lock_Tense : {}; t : ParamX.Tense} ;
  oper progressiveVP : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                     aux : Str;
                                                                                                                     fin : Str;
                                                                                                                     inf : Str};
                        ad : Str; inf : Str; lock_VP : {}; prp : Str; ptp : Str;
                        s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                 aux : Str;
                                                                                                                                                 fin : Str;
                                                                                                                                                 inf : Str};
                                                    ad : Str; inf : Str; lock_VP : {}; prp : Str;
                                                    ptp : Str; s2 : ResEng.Agr => Str} ;
  oper questMarkPunct : ConstructorsEng.Punct ;
  oper reflAP : {s : ResEng.AForm => Str; c2 : Str;
                 lock_A2 : {}} -> {s : ResEng.Agr => Str; isPre : Prelude.Bool;
                                   lock_AP : {}} ;
  oper reflexiveVP = overload {
                       reflexiveVP : (v : {s : ResEng.VForm => Str; c2 : Str;
                                           isRefl : Prelude.Bool;
                                           lock_V2 : {}}) -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                           aux : Str;
                                                                                                                                                           fin : Str;
                                                                                                                                                           inf : Str};
                                                              ad : Str; inf : Str; lock_VP : {};
                                                              prp : Str; ptp : Str;
                                                              s2 : ResEng.Agr => Str}
                                   = 0 ;
                       reflexiveVP : {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                   aux : Str;
                                                                                                                                   fin : Str;
                                                                                                                                   inf : Str};
                                      ad : Str; c2 : Str; inf : Str; lock_VPSlash : {}; prp : Str;
                                      ptp : Str;
                                      s2 : ResEng.Agr => Str} -> {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                                                               aux : Str;
                                                                                                                                                               fin : Str;
                                                                                                                                                               inf : Str};
                                                                  ad : Str; inf : Str; lock_VP : {};
                                                                  prp : Str; ptp : Str;
                                                                  s2 : ResEng.Agr => Str}
                                   = 0 ;
                     } ;
  oper sgNum : {s : ResEng.Case => Str; hasCard : Prelude.Bool;
                lock_Num : {}; n : ParamX.Number} ;
  oper she_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                 lock_NP : {}} ;
  oper simultaneousAnt : {s : Str; a : ParamX.Anteriority;
                          lock_Ant : {}} ;
  oper singularImpForm : ConstructorsEng.ImpForm ;
  oper singularNum : {s : ResEng.Case => Str; hasCard : Prelude.Bool;
                      lock_Num : {}; n : ParamX.Number} ;
  oper str2card : Str -> {s : ResEng.Case => Str; lock_Card : {};
                          n : ParamX.Number} ;
  oper str2digits : Str -> {s : ResEng.CardOrd => ResEng.Case => Str;
                            lock_Digits : {}; n : ParamX.Number; tail : ParamX.DTail} ;
  oper str2numeral : Str -> {s : ResEng.CardOrd => ResEng.Case => Str;
                             lock_Numeral : {}; n : ParamX.Number} ;
  oper str2ord : Str -> {s : ResEng.Case => Str; lock_Ord : {}} ;
  oper tenfoldSub100 : {d : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                             lock_Digit : {}};
                        isOne : Predef.PBool;
                        n : {s : ResEng.DForm => ResEng.CardOrd => ResEng.Case => Str;
                             lock_Sub10 : {};
                             n : ParamX.Number}} -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                     lock_Sub100 : {}; n : ParamX.Number} ;
  oper that_Det : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                   n : ParamX.Number; sp : ResEng.NPCase => Str} ;
  oper that_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                  lock_NP : {}} ;
  oper that_QuantSg : {s : Prelude.Bool => ParamX.Number => Str;
                       isSg : {}; lock_Quant : {};
                       sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper thePl_Det : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                    n : ParamX.Number; sp : ResEng.NPCase => Str} ;
  oper theSg_Det : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                    n : ParamX.Number; sp : ResEng.NPCase => Str} ;
  oper the_Art : {s : Prelude.Bool => ParamX.Number => Str;
                  lock_Quant : {};
                  sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper the_Det : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                  n : ParamX.Number; sp : ResEng.NPCase => Str} ;
  oper the_Quant : {s : Prelude.Bool => ParamX.Number => Str;
                    lock_Quant : {};
                    sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper these_Det : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                    n : ParamX.Number; sp : ResEng.NPCase => Str} ;
  oper these_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                   lock_NP : {}} ;
  oper these_QuantPl : {s : Prelude.Bool => ParamX.Number => Str;
                        isPl : {}; lock_Quant : {};
                        sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper they_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                  lock_NP : {}} ;
  oper this_Det : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                   n : ParamX.Number; sp : ResEng.NPCase => Str} ;
  oper this_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                  lock_NP : {}} ;
  oper this_QuantSg : {s : Prelude.Bool => ParamX.Number => Str;
                       isSg : {}; lock_Quant : {};
                       sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper those_Det : {s : Str; hasNum : Prelude.Bool; lock_Det : {};
                    n : ParamX.Number; sp : ResEng.NPCase => Str} ;
  oper those_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                   lock_NP : {}} ;
  oper those_QuantPl : {s : Prelude.Bool => ParamX.Number => Str;
                        isPl : {}; lock_Quant : {};
                        sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  oper thousandfoldNumeral : {s : ResEng.CardOrd => ResEng.Case => Str;
                              lock_Sub1000 : {};
                              n : ParamX.Number} -> {s : ResEng.CardOrd => ResEng.Case => Str;
                                                     lock_Numeral : {}; n : ParamX.Number} ;
  oper we_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                lock_NP : {}} ;
  oper what_IP : {s : ResEng.NPCase => Str; lock_IP : {};
                  n : ParamX.Number} ;
  oper whichPl_IDet : {s : Str; lock_IDet : {}; n : ParamX.Number} ;
  oper whichSg_IDet : {s : Str; lock_IDet : {}; n : ParamX.Number} ;
  oper which_IDet : {s : Str; lock_IDet : {}; n : ParamX.Number} ;
  oper which_RP : {s : ResEng.RCase => Str; a : ResEng.RAgr;
                   lock_RP : {}} ;
  oper who_IP : {s : ResEng.NPCase => Str; lock_IP : {};
                 n : ParamX.Number} ;
  oper youPl_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                   lock_NP : {}} ;
  oper youPol_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                    lock_NP : {}} ;
  oper you_NP : {s : ResEng.NPCase => Str; a : ResEng.Agr;
                 lock_NP : {}} ;
}