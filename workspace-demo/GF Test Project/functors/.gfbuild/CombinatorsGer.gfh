resource CombinatorsGer = open (CatGer = CatGer),(StructuralGer = StructuralGer),(ConstructorsGer = ConstructorsGer),(CatGer = CatGer),(StructuralGer = StructuralGer),(ConstructorsGer = ConstructorsGer),(CatGer = CatGer),(StructuralGer = StructuralGer),(ConstructorsGer = ConstructorsGer) in {
  flags
    coding = "latin1" ;
  oper app = overload {
               app : (n : {s : ParamX.Number => ResGer.Case => Str;
                           g : ResGer.Gender; lock_N : {}}) -> {s : ResGer.PCase => Str;
                                                                a : ResGer.Agr;
                                                                isPron : Prelude.Bool; lock_NP : {}}
                   = 0 ;
               app : (n : {s : ParamX.Number => ResGer.Case => Str;
                           c2 : {s : Str; c : ResGer.PCase}; g : ResGer.Gender;
                           lock_N2 : {}}) -> (x : {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                   isPron : Prelude.Bool;
                                                   lock_NP : {}}) -> {s : ResGer.PCase => Str;
                                                                      a : ResGer.Agr;
                                                                      isPron : Prelude.Bool;
                                                                      lock_NP : {}}
                   = 0 ;
               app : (n : {s : ParamX.Number => ResGer.Case => Str;
                           c2 : {s : Str; c : ResGer.PCase}; c3 : {s : Str; c : ResGer.PCase};
                           g : ResGer.Gender; lock_N3 : {}}) -> (x : {s : ResGer.PCase => Str;
                                                                      a : ResGer.Agr;
                                                                      isPron : Prelude.Bool;
                                                                      lock_NP : {}}) -> (y : {s : ResGer.PCase => Str;
                                                                                              a : ResGer.Agr;
                                                                                              isPron : Prelude.Bool;
                                                                                              lock_NP : {}}) -> {s : ResGer.PCase => Str;
                                                                                                                 a : ResGer.Agr;
                                                                                                                 isPron : Prelude.Bool;
                                                                                                                 lock_NP : {}}
                   = 0 ;
               app : (n : {s : ParamX.Number => ResGer.Case => Str;
                           c2 : {s : Str; c : ResGer.PCase}; g : ResGer.Gender;
                           lock_N2 : {}}) -> (x : {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                   isPron : Prelude.Bool;
                                                   lock_NP : {}}) -> (y : {s : ResGer.PCase => Str;
                                                                           a : ResGer.Agr;
                                                                           isPron : Prelude.Bool;
                                                                           lock_NP : {}}) -> {s : ResGer.PCase => Str;
                                                                                              a : ResGer.Agr;
                                                                                              isPron : Prelude.Bool;
                                                                                              lock_NP : {}}
                   = 0 ;
               app : (f : {s : ParamX.Number => ResGer.Case => Str;
                           c2 : {s : Str; c : ResGer.PCase}; g : ResGer.Gender;
                           lock_N2 : {}}) -> (n : {s : ParamX.Number => ResGer.Case => Str;
                                                   g : ResGer.Gender;
                                                   lock_N : {}}) -> {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
                                                                     g : ResGer.Gender;
                                                                     lock_CN : {}}
                   = 0 ;
               app : {s : ParamX.Number => ResGer.Case => Str;
                      c2 : {s : Str; c : ResGer.PCase}; g : ResGer.Gender;
                      lock_N2 : {}} -> {s : ResGer.PCase => Str; a : ResGer.Agr;
                                        isPron : Prelude.Bool;
                                        lock_NP : {}} -> {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
                                                          g : ResGer.Gender; lock_CN : {}}
                   = 0 ;
               app : {s : ParamX.Number => ResGer.Case => Str;
                      c2 : {s : Str; c : ResGer.PCase}; c3 : {s : Str; c : ResGer.PCase};
                      g : ResGer.Gender; lock_N3 : {}} -> {s : ResGer.PCase => Str;
                                                           a : ResGer.Agr; isPron : Prelude.Bool;
                                                           lock_NP : {}} -> {s : ResGer.PCase => Str;
                                                                             a : ResGer.Agr;
                                                                             isPron : Prelude.Bool;
                                                                             lock_NP : {}} -> {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
                                                                                               g : ResGer.Gender;
                                                                                               lock_CN : {}}
                   = 0 ;
               app : (n : {s : ParamX.Number => ResGer.Case => Str;
                           c2 : {s : Str; c : ResGer.PCase}; g : ResGer.Gender;
                           lock_N2 : {}}) -> (x : {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                   isPron : Prelude.Bool;
                                                   lock_NP : {}}) -> (y : {s : ResGer.PCase => Str;
                                                                           a : ResGer.Agr;
                                                                           isPron : Prelude.Bool;
                                                                           lock_NP : {}}) -> {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
                                                                                              g : ResGer.Gender;
                                                                                              lock_CN : {}}
                   = 0 ;
             } ;
  oper coord = overload {
                 coord : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                          s2 : Str} -> {s : Str; lock_Adv : {}} -> {s : Str;
                                                                    lock_Adv : {}} -> {s : Str;
                                                                                       lock_Adv : {}}
                       = 0 ;
                 coord : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                          s2 : Str} -> {s : ResGer.AForm => Str; isPre : Prelude.Bool;
                                        lock_AP : {}} -> {s : ResGer.AForm => Str;
                                                          isPre : Prelude.Bool;
                                                          lock_AP : {}} -> {s : ResGer.AForm => Str;
                                                                            isPre : Prelude.Bool;
                                                                            lock_AP : {}}
                       = 0 ;
                 coord : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                          s2 : Str} -> {s : ResGer.PCase => Str; a : ResGer.Agr;
                                        isPron : Prelude.Bool;
                                        lock_NP : {}} -> {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                          isPron : Prelude.Bool;
                                                          lock_NP : {}} -> {s : ResGer.PCase => Str;
                                                                            a : ResGer.Agr;
                                                                            isPron : Prelude.Bool;
                                                                            lock_NP : {}}
                       = 0 ;
                 coord : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                          s2 : Str} -> {s : ResGer.Order => Str;
                                        lock_S : {}} -> {s : ResGer.Order => Str;
                                                         lock_S : {}} -> {s : ResGer.Order => Str;
                                                                          lock_S : {}}
                       = 0 ;
                 coord : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                          s2 : Str} -> {lock_ListAdv : {}; s1 : Str; s2 : Str} -> {s : Str;
                                                                                   lock_Adv : {}}
                       = 0 ;
                 coord : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                          s2 : Str} -> {isPre : Prelude.Bool; lock_ListAP : {};
                                        s1 : ResGer.AForm => Str;
                                        s2 : ResGer.AForm => Str} -> {s : ResGer.AForm => Str;
                                                                      isPre : Prelude.Bool;
                                                                      lock_AP : {}}
                       = 0 ;
                 coord : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                          s2 : Str} -> {a : ResGer.Agr; lock_ListNP : {};
                                        s1 : ResGer.PCase => Str;
                                        s2 : ResGer.PCase => Str} -> {s : ResGer.PCase => Str;
                                                                      a : ResGer.Agr;
                                                                      isPron : Prelude.Bool;
                                                                      lock_NP : {}}
                       = 0 ;
                 coord : {lock_Conj : {}; n : ParamX.Number; s1 : Str;
                          s2 : Str} -> {lock_ListS : {}; s1 : ResGer.Order => Str;
                                        s2 : ResGer.Order => Str} -> {s : ResGer.Order => Str;
                                                                      lock_S : {}}
                       = 0 ;
               } ;
  oper mod = overload {
               mod : {s : ParamX.Degree => ResGer.AForm => Str;
                      lock_A : {}} -> {s : ParamX.Number => ResGer.Case => Str;
                                       g : ResGer.Gender;
                                       lock_N : {}} -> {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
                                                        g : ResGer.Gender; lock_CN : {}}
                   = 0 ;
               mod : {s : ResGer.AForm => Str; isPre : Prelude.Bool;
                      lock_AP : {}} -> {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
                                        g : ResGer.Gender;
                                        lock_CN : {}} -> {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
                                                          g : ResGer.Gender; lock_CN : {}}
                   = 0 ;
               mod : {s : Str;
                      lock_AdA : {}} -> {s : ParamX.Degree => ResGer.AForm => Str;
                                         lock_A : {}} -> {s : ResGer.AForm => Str;
                                                          isPre : Prelude.Bool; lock_AP : {}}
                   = 0 ;
               mod : {s : ResGer.Gender => ResGer.PCase => Str; a : ResGer.Adjf;
                      lock_Det : {}; n : ParamX.Number;
                      sp : ResGer.Gender => ResGer.PCase => Str} -> {s : ParamX.Number => ResGer.Case => Str;
                                                                     g : ResGer.Gender;
                                                                     lock_N : {}} -> {s : ResGer.PCase => Str;
                                                                                      a : ResGer.Agr;
                                                                                      isPron : Prelude.Bool;
                                                                                      lock_NP : {}}
                   = 0 ;
               mod : {s : ResGer.Gender => ResGer.PCase => Str; a : ResGer.Adjf;
                      lock_Det : {}; n : ParamX.Number;
                      sp : ResGer.Gender => ResGer.PCase => Str} -> {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
                                                                     g : ResGer.Gender;
                                                                     lock_CN : {}} -> {s : ResGer.PCase => Str;
                                                                                       a : ResGer.Agr;
                                                                                       isPron : Prelude.Bool;
                                                                                       lock_NP : {}}
                   = 0 ;
               mod : {s : Prelude.Bool => ParamX.Number => ResGer.Gender => ResGer.PCase => Str;
                      a : ResGer.Adjf; lock_Quant : {};
                      sp : ParamX.Number => ResGer.Gender => ResGer.PCase => Str} -> {s : ParamX.Number => ResGer.Case => Str;
                                                                                      g : ResGer.Gender;
                                                                                      lock_N : {}} -> {s : ResGer.PCase => Str;
                                                                                                       a : ResGer.Agr;
                                                                                                       isPron : Prelude.Bool;
                                                                                                       lock_NP : {}}
                   = 0 ;
               mod : {s : Prelude.Bool => ParamX.Number => ResGer.Gender => ResGer.PCase => Str;
                      a : ResGer.Adjf; lock_Quant : {};
                      sp : ParamX.Number => ResGer.Gender => ResGer.PCase => Str} -> {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
                                                                                      g : ResGer.Gender;
                                                                                      lock_CN : {}} -> {s : ResGer.PCase => Str;
                                                                                                        a : ResGer.Agr;
                                                                                                        isPron : Prelude.Bool;
                                                                                                        lock_NP : {}}
                   = 0 ;
               mod : (p : {s : ParamX.Number => ResGer.Gender => ResGer.PCase => Str;
                           a : ResGer.PredetAgr; c : {k : ResGer.PredetCase; p : Str};
                           lock_Predet : {}}) -> (n : {s : ParamX.Number => ResGer.Case => Str;
                                                       g : ResGer.Gender;
                                                       lock_N : {}}) -> {s : ResGer.PCase => Str;
                                                                         a : ResGer.Agr;
                                                                         isPron : Prelude.Bool;
                                                                         lock_NP : {}}
                   = 0 ;
               mod : {s : ResGer.CardOrd => Str; lock_Numeral : {};
                      n : ParamX.Number} -> {s : ParamX.Number => ResGer.Case => Str;
                                             g : ResGer.Gender;
                                             lock_N : {}} -> {s : ResGer.PCase => Str;
                                                              a : ResGer.Agr; isPron : Prelude.Bool;
                                                              lock_NP : {}}
                   = 0 ;
             } ;
  oper neg = overload {
               neg : {s : ParamX.Polarity => ParamX.ImpForm => Str;
                      lock_Imp : {}} -> {s : Str; lock_Utt : {}}
                   = 0 ;
               neg : {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                      lock_Cl : {}} -> {s : ResGer.Order => Str; lock_S : {}}
                   = 0 ;
               neg : {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ParamX.QForm => Str;
                      lock_QCl : {}} -> {s : ParamX.QForm => Str; lock_QS : {}}
                   = 0 ;
               neg : {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.GenNum => Str;
                      c : ResGer.Case; lock_RCl : {}} -> {s : ResGer.GenNum => Str;
                                                          c : ResGer.Case; lock_RS : {}}
                   = 0 ;
             } ;
  oper pred = overload {
                pred : (v : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                             lock_V : {}; prefix : Str;
                             vtype : ResGer.VType}) -> (np : {s : ResGer.PCase => Str;
                                                              a : ResGer.Agr; isPron : Prelude.Bool;
                                                              lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                 lock_Cl : {}}
                     = 0 ;
                pred : (v : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                             c2 : {s : Str; c : ResGer.PCase}; lock_V2 : {}; prefix : Str;
                             vtype : ResGer.VType}) -> (np : {s : ResGer.PCase => Str;
                                                              a : ResGer.Agr; isPron : Prelude.Bool;
                                                              lock_NP : {}}) -> (ob : {s : ResGer.PCase => Str;
                                                                                       a : ResGer.Agr;
                                                                                       isPron : Prelude.Bool;
                                                                                       lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                                          lock_Cl : {}}
                     = 0 ;
                pred : (v : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                             c2 : {s : Str; c : ResGer.PCase}; c3 : {s : Str; c : ResGer.PCase};
                             lock_V3 : {}; prefix : Str;
                             vtype : ResGer.VType}) -> (np : {s : ResGer.PCase => Str;
                                                              a : ResGer.Agr; isPron : Prelude.Bool;
                                                              lock_NP : {}}) -> (ob : {s : ResGer.PCase => Str;
                                                                                       a : ResGer.Agr;
                                                                                       isPron : Prelude.Bool;
                                                                                       lock_NP : {}}) -> (ob2 : {s : ResGer.PCase => Str;
                                                                                                                 a : ResGer.Agr;
                                                                                                                 isPron : Prelude.Bool;
                                                                                                                 lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                                                                    lock_Cl : {}}
                     = 0 ;
                pred : (v : {s : ResGer.VForm => Str; aux : ResGer.VAux;
                             lock_V : {}; prefix : Str;
                             vtype : ResGer.VType}) -> (x : {s : ResGer.PCase => Str;
                                                             a : ResGer.Agr; isPron : Prelude.Bool;
                                                             lock_NP : {}}) -> (y : {s : ResGer.PCase => Str;
                                                                                     a : ResGer.Agr;
                                                                                     isPron : Prelude.Bool;
                                                                                     lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                                        lock_Cl : {}}
                     = 0 ;
                pred : (a : {s : ParamX.Degree => ResGer.AForm => Str;
                             lock_A : {}}) -> (np : {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                     isPron : Prelude.Bool;
                                                     lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                        lock_Cl : {}}
                     = 0 ;
                pred : (a : {s : ParamX.Degree => ResGer.AForm => Str;
                             c2 : {s : Str; c : ResGer.PCase};
                             lock_A2 : {}}) -> (x : {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                     isPron : Prelude.Bool;
                                                     lock_NP : {}}) -> (y : {s : ResGer.PCase => Str;
                                                                             a : ResGer.Agr;
                                                                             isPron : Prelude.Bool;
                                                                             lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                                lock_Cl : {}}
                     = 0 ;
                pred : (a : {s : ParamX.Degree => ResGer.AForm => Str;
                             lock_A : {}}) -> (x : {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                    isPron : Prelude.Bool;
                                                    lock_NP : {}}) -> (y : {s : ResGer.PCase => Str;
                                                                            a : ResGer.Agr;
                                                                            isPron : Prelude.Bool;
                                                                            lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                               lock_Cl : {}}
                     = 0 ;
                pred : (n : {s : ParamX.Number => ResGer.Case => Str;
                             g : ResGer.Gender; lock_N : {}}) -> (x : {s : ResGer.PCase => Str;
                                                                       a : ResGer.Agr;
                                                                       isPron : Prelude.Bool;
                                                                       lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                          lock_Cl : {}}
                     = 0 ;
                pred : (n : {s : ResGer.Adjf => ParamX.Number => ResGer.Case => Str;
                             g : ResGer.Gender; lock_CN : {}}) -> (x : {s : ResGer.PCase => Str;
                                                                        a : ResGer.Agr;
                                                                        isPron : Prelude.Bool;
                                                                        lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                           lock_Cl : {}}
                     = 0 ;
                pred : (n : {s : ResGer.PCase => Str; a : ResGer.Agr;
                             isPron : Prelude.Bool;
                             lock_NP : {}}) -> (x : {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                     isPron : Prelude.Bool;
                                                     lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                        lock_Cl : {}}
                     = 0 ;
                pred : (n : {s : ParamX.Number => ResGer.Case => Str;
                             c2 : {s : Str; c : ResGer.PCase}; g : ResGer.Gender;
                             lock_N2 : {}}) -> (x : {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                     isPron : Prelude.Bool;
                                                     lock_NP : {}}) -> (y : {s : ResGer.PCase => Str;
                                                                             a : ResGer.Agr;
                                                                             isPron : Prelude.Bool;
                                                                             lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                                lock_Cl : {}}
                     = 0 ;
                pred : (n : {s : ParamX.Number => ResGer.Case => Str;
                             g : ResGer.Gender; lock_N : {}}) -> (x : {s : ResGer.PCase => Str;
                                                                       a : ResGer.Agr;
                                                                       isPron : Prelude.Bool;
                                                                       lock_NP : {}}) -> (y : {s : ResGer.PCase => Str;
                                                                                               a : ResGer.Agr;
                                                                                               isPron : Prelude.Bool;
                                                                                               lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                                                  lock_Cl : {}}
                     = 0 ;
                pred : (a : {s : Str;
                             lock_Adv : {}}) -> (x : {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                      isPron : Prelude.Bool;
                                                      lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                         lock_Cl : {}}
                     = 0 ;
                pred : (p : {s : Str; c : ResGer.PCase;
                             lock_Prep : {}}) -> (x : {s : ResGer.PCase => Str; a : ResGer.Agr;
                                                       isPron : Prelude.Bool;
                                                       lock_NP : {}}) -> (y : {s : ResGer.PCase => Str;
                                                                               a : ResGer.Agr;
                                                                               isPron : Prelude.Bool;
                                                                               lock_NP : {}}) -> {s : ResGer.Mood => ParamX.Tense => ParamX.Anteriority => ParamX.Polarity => ResGer.Order => Str;
                                                                                                  lock_Cl : {}}
                     = 0 ;
              } ;
}