concrete CatEng of Cat = CommonX - [Pol] ** open (ResEng = ResEng),(Prelude = Prelude) in {
  flags
    coding = "latin1" ;
  lincat A = {s : ResEng.AForm => Str} ;
  lincat A2 = {s : ResEng.AForm => Str; c2 : Str} ;
  lincat AP = {s : ResEng.Agr => Str; isPre : Prelude.Bool} ;
  -- ind AdA = CommonX ;
  -- ind AdN = CommonX ;
  -- ind AdV = CommonX ;
  -- ind Adv = CommonX ;
  -- ind Ant = CommonX ;
  -- ind CAdv = CommonX ;
  lincat CN = {s : ParamX.Number => ResEng.Case => Str;
               g : ResEng.Gender} ;
  lincat Card = {s : ResEng.Case => Str; n : ParamX.Number} ;
  lincat Cl = {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str} ;
  lincat ClSlash = {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => Str;
                    c2 : Str} ;
  lincat Comp = {s : ResEng.Agr => Str} ;
  lincat Conj = {n : ParamX.Number; s1 : Str; s2 : Str} ;
  lincat Det = {s : Str; hasNum : Prelude.Bool; n : ParamX.Number;
                sp : ResEng.NPCase => Str} ;
  lincat Digits = {s : ResEng.CardOrd => ResEng.Case => Str;
                   n : ParamX.Number; tail : ParamX.DTail} ;
  -- ind IAdv = CommonX ;
  lincat IComp = {s : Str} ;
  lincat IDet = {s : Str; n : ParamX.Number} ;
  lincat IP = {s : ResEng.NPCase => Str; n : ParamX.Number} ;
  lincat IQuant = {s : ParamX.Number => Str} ;
  lincat Imp = {s : ResEng.CPolarity => ParamX.ImpForm => Str} ;
  -- ind Interj = CommonX ;
  lincat N = {s : ParamX.Number => ResEng.Case => Str;
              g : ResEng.Gender} ;
  lincat N2 = {s : ParamX.Number => ResEng.Case => Str; c2 : Str;
               g : ResEng.Gender} ;
  lincat N3 = {s : ParamX.Number => ResEng.Case => Str; c2 : Str;
               c3 : Str; g : ResEng.Gender} ;
  lincat NP = {s : ResEng.NPCase => Str; a : ResEng.Agr} ;
  lincat Num = {s : ResEng.Case => Str; hasCard : Prelude.Bool;
                n : ParamX.Number} ;
  lincat Numeral = {s : ResEng.CardOrd => ResEng.Case => Str;
                    n : ParamX.Number} ;
  lincat Ord = {s : ResEng.Case => Str} ;
  -- ind PConj = CommonX ;
  lincat PN = {s : ResEng.Case => Str; g : ResEng.Gender} ;
  -- ind Phr = CommonX ;
  lincat Pol = {s : Str; p : ResEng.CPolarity} ;
  lincat Predet = {s : Str} ;
  lincat Prep = {s : Str} ;
  lincat Pron = {s : ResEng.NPCase => Str; a : ResEng.Agr;
                 sp : ResEng.Case => Str} ;
  lincat QCl = {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ParamX.QForm => Str} ;
  lincat QS = {s : ParamX.QForm => Str} ;
  lincat Quant = {s : Prelude.Bool => ParamX.Number => Str;
                  sp : Prelude.Bool => ParamX.Number => ResEng.NPCase => Str} ;
  lincat RCl = {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Agr => Str;
                c : ResEng.NPCase} ;
  lincat RP = {s : ResEng.RCase => Str; a : ResEng.RAgr} ;
  lincat RS = {s : ResEng.Agr => Str; c : ResEng.NPCase} ;
  lincat S = {s : Str} ;
  -- ind SC = CommonX ;
  lincat SSlash = {s : Str; c2 : Str} ;
  lincat Subj = {s : Str} ;
  -- ind Temp = CommonX ;
  -- ind Tense = CommonX ;
  -- ind Text = CommonX ;
  -- ind Utt = CommonX ;
  lincat V = {s : ResEng.VForm => Str; isRefl : Prelude.Bool} ;
  lincat V2 = {s : ResEng.VForm => Str; c2 : Str;
               isRefl : Prelude.Bool} ;
  lincat V2A = {s : ResEng.VForm => Str; c2 : Str;
                isRefl : Prelude.Bool} ;
  lincat V2Q = {s : ResEng.VForm => Str; c2 : Str;
                isRefl : Prelude.Bool} ;
  lincat V2S = {s : ResEng.VForm => Str; c2 : Str;
                isRefl : Prelude.Bool} ;
  lincat V2V = {s : ResEng.VForm => Str; c2 : Str; c3 : Str;
                isRefl : Prelude.Bool; typ : ResEng.VVType} ;
  lincat V3 = {s : ResEng.VForm => Str; c2 : Str; c3 : Str;
               isRefl : Prelude.Bool} ;
  lincat VA = {s : ResEng.VForm => Str; isRefl : Prelude.Bool} ;
  lincat VP = {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                            aux : Str;
                                                                                                            fin : Str;
                                                                                                            inf : Str};
               ad : Str; inf : Str; prp : Str; ptp : Str;
               s2 : ResEng.Agr => Str} ;
  lincat VPSlash = {s : ParamX.Tense => ParamX.Anteriority => ResEng.CPolarity => ResEng.Order => ResEng.Agr => {adv : Str;
                                                                                                                 aux : Str;
                                                                                                                 fin : Str;
                                                                                                                 inf : Str};
                    ad : Str; c2 : Str; inf : Str; prp : Str; ptp : Str;
                    s2 : ResEng.Agr => Str} ;
  lincat VQ = {s : ResEng.VForm => Str; isRefl : Prelude.Bool} ;
  lincat VS = {s : ResEng.VForm => Str; isRefl : Prelude.Bool} ;
  lincat VV = {s : ResEng.VVForm => Str; typ : ResEng.VVType} ;
  -- ind Voc = CommonX ;
}