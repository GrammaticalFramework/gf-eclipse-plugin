resource MorphoGer = ResGer ** open (Prelude = Prelude),(Predef = Predef) in {
  flags
    coding = "latin1" ;
  -- ind AForm = canonical ResGer ;
  -- ind AMod = canonical ResGer ;
  -- ind APred = canonical ResGer ;
  -- ind Acc = canonical ResGer ;
  -- ind Adjective = ResGer ;
  -- ind Adjf = canonical ResGer ;
  -- ind Ag = canonical ResGer ;
  -- ind Agr = canonical ResGer ;
  -- ind Anteriority = canonical ParamX ;
  -- ind CAnDat = canonical ResGer ;
  -- ind CInAcc = canonical ResGer ;
  -- ind CInDat = canonical ResGer ;
  -- ind CPrep = canonical ResGer ;
  -- ind CZuDat = canonical ResGer ;
  -- ind CardOrd = canonical ResGer ;
  -- ind Case = canonical ResGer ;
  -- ind Clause = ResGer ;
  -- ind Compar = canonical ParamX ;
  -- ind DForm = canonical ResGer ;
  -- ind DTail = canonical ParamX ;
  -- ind DTeen = canonical ResGer ;
  -- ind DTen = canonical ResGer ;
  -- ind DUnit = canonical ResGer ;
  -- ind Dat = canonical ResGer ;
  -- ind Degree = canonical ParamX ;
  -- ind Fem = canonical ResGer ;
  -- ind GPl = canonical ResGer ;
  -- ind GSg = canonical ResGer ;
  -- ind Gen = canonical ResGer ;
  -- ind GenNum = canonical ResGer ;
  -- ind Gender = canonical ResGer ;
  -- ind ImpF = canonical ParamX ;
  -- ind ImpForm = canonical ParamX ;
  -- ind Inv = canonical ResGer ;
  oper LinDigit : Type ;
  -- ind MConjunct = canonical ResGer ;
  -- ind MIndic = canonical ResGer ;
  -- ind Main = canonical ResGer ;
  -- ind Masc = canonical ResGer ;
  -- ind Mood = canonical ResGer ;
  -- ind NCard = canonical ResGer ;
  -- ind NOrd = canonical ResGer ;
  -- ind NPC = canonical ResGer ;
  -- ind NPCase = canonical ResGer ;
  -- ind NPForm = canonical ResGer ;
  -- ind NPNom = ResGer ;
  -- ind NPP = canonical ResGer ;
  -- ind NPPoss = canonical ResGer ;
  -- ind Neg = canonical ParamX ;
  -- ind Neutr = canonical ResGer ;
  -- ind NoCase = canonical ResGer ;
  -- ind Nom = canonical ResGer ;
  -- ind Noun = ResGer ;
  -- ind Number = canonical ParamX ;
  -- ind Order = canonical ResGer ;
  -- ind P1 = canonical ParamX ;
  -- ind P2 = canonical ParamX ;
  -- ind P3 = canonical ParamX ;
  -- ind PAg = canonical ResGer ;
  -- ind PAgNone = canonical ResGer ;
  -- ind PCase = canonical ResGer ;
  -- ind Person = canonical ParamX ;
  -- ind Pl = canonical ParamX ;
  -- ind Polarity = canonical ParamX ;
  -- ind Pos = canonical ParamX ;
  -- ind Posit = canonical ParamX ;
  -- ind PredCase = canonical ResGer ;
  -- ind PredetAgr = canonical ResGer ;
  -- ind PredetCase = canonical ResGer ;
  -- ind Preposition = ResGer ;
  -- ind Pres = canonical ParamX ;
  -- ind QDir = canonical ParamX ;
  -- ind QForm = canonical ParamX ;
  -- ind QIndir = canonical ParamX ;
  -- ind RAg = canonical ResGer ;
  -- ind RAgr = canonical ResGer ;
  -- ind RNoAg = canonical ResGer ;
  -- ind Sg = canonical ParamX ;
  -- ind Simul = canonical ParamX ;
  -- ind Strong = canonical ResGer ;
  -- ind Sub = canonical ResGer ;
  -- ind Superl = canonical ParamX ;
  -- ind T1 = canonical ParamX ;
  -- ind T2 = canonical ParamX ;
  -- ind T3 = canonical ParamX ;
  -- ind Tense = canonical ParamX ;
  -- ind VAct = canonical ResGer ;
  -- ind VAux = canonical ResGer ;
  -- ind VFin = canonical ResGer ;
  -- ind VForm = canonical ResGer ;
  -- ind VFormFin = canonical ResGer ;
  -- ind VHaben = canonical ResGer ;
  -- ind VImper = canonical ResGer ;
  -- ind VInf = canonical ResGer ;
  -- ind VP = ResGer ;
  -- ind VPC = ResGer ;
  -- ind VPFinite = canonical ResGer ;
  -- ind VPForm = canonical ResGer ;
  -- ind VPImperat = canonical ResGer ;
  -- ind VPInfinit = canonical ResGer ;
  -- ind VPastPart = canonical ResGer ;
  -- ind VPresInd = canonical ResGer ;
  -- ind VPresPart = canonical ResGer ;
  -- ind VPresSubj = canonical ResGer ;
  -- ind VRefl = canonical ResGer ;
  -- ind VSein = canonical ResGer ;
  -- ind VType = canonical ResGer ;
  -- ind Verb = ResGer ;
  -- ind Weak = canonical ResGer ;
  -- ind adjForms = ResGer ;
  -- ind adjfCase = ResGer ;
  -- ind agrAdj = ResGer ;
  -- ind agrP3 = ResGer ;
  -- ind agrgP3 = ResGer ;
  -- ind appAdj = ResGer ;
  -- ind appPrep = ResGer ;
  -- ind artDef = ResGer ;
  -- ind artDefContr = ResGer ;
  -- ind auxPerfect = ResGer ;
  -- ind auxVV = ResGer ;
  oper cardOrd : Str -> Str -> ResGer.CardOrd => Str ;
  oper cardReg : Str -> ResGer.CardOrd => Str ;
  -- ind caselist = ResGer ;
  -- ind conjAgr = ResGer ;
  -- ind conjNumber = ParamX ;
  -- ind conjPerson = ParamX ;
  -- ind conjThan = ResGer ;
  -- ind conjThat = ResGer ;
  oper dativE : Str -> Str ;
  oper detLikeAdj : ParamX.Number -> Str -> {s : ResGer.Gender => ResGer.PCase => Str;
                                             a : ResGer.Adjf; n : ParamX.Number;
                                             sp : ResGer.Gender => ResGer.PCase => Str} ;
  -- ind genderAgr = ResGer ;
  oper genitS : Str -> Str ;
  -- ind gennum = ResGer ;
  -- ind haben_V = ResGer ;
  -- ind heavyNP = ResGer ;
  -- ind infPart = ResGer ;
  -- ind infVP = ResGer ;
  -- ind insertAdV = ResGer ;
  -- ind insertAdv = ResGer ;
  -- ind insertExtrapos = ResGer ;
  -- ind insertInf = ResGer ;
  -- ind insertObj = ResGer ;
  -- ind insertObjNP = ResGer ;
  oper invNum : ResGer.CardOrd ;
  -- ind mkA = ResGer ;
  -- ind mkAgr = ResGer ;
  -- ind mkClause = ResGer ;
  oper mkDigit : (x1 : Str) -> Str -> Str -> (x4 : Str) -> {s : ResGer.DForm => ResGer.CardOrd => Str} ;
  -- ind mkN = ResGer ;
  -- ind mkN4 = ResGer ;
  oper mkOrd : {s : ParamX.Degree => ResGer.AForm => Str} -> {s : ResGer.AForm => Str} ;
  oper mkPrep : Str -> ResGer.PCase -> {s : Str; c : ResGer.PCase} ;
  -- ind mkPronPers = ResGer ;
  -- ind mkV = ResGer ;
  oper nameNounPhrase : {s : ResGer.Case => Str} -> {s : ResGer.PCase => Str;
                                                     a : ResGer.Agr; isPron : Prelude.Bool} ;
  -- ind negation = ResGer ;
  -- ind noCase = ResGer ;
  -- ind noPreposition = ResGer ;
  -- ind numGenNum = ResGer ;
  -- ind numImp = ParamX ;
  -- ind numberAgr = ResGer ;
  -- ind personAgr = ResGer ;
  oper pluralN : Str -> Str ;
  -- ind polCases = ParamX ;
  -- ind predV = ResGer ;
  -- ind predVGen = ResGer ;
  -- ind prefixV = ResGer ;
  -- ind prepC = ResGer ;
  -- ind pronEnding = ResGer ;
  -- ind reflPron = ResGer ;
  -- ind regA = ResGer ;
  oper regDigit : Str -> {s : ResGer.DForm => ResGer.CardOrd => Str} ;
  -- ind regV = ResGer ;
  -- ind sein_V = ResGer ;
  oper stemVerb : Str -> Str ;
  -- ind useInfVP = ResGer ;
  -- ind usePrepC = ResGer ;
  -- ind useVP = ResGer ;
  -- ind vFin = ResGer ;
  oper verbST : Str -> Str ;
  oper verbT : Str -> Str ;
  -- ind werdenPass = ResGer ;
  -- ind werden_V = ResGer ;
}